import "inspectable.idl";
import "EventToken.idl";
import "AsyncInfo.idl";
import "Windows.Foundation.idl"; 
import "Windows.Foundation.Numerics.idl";
import "Windows.Media.idl";
import "Windows.UI.Xaml.Controls.idl";
import "Windows.Media.Audio.idl";
import "Windows.UI.Xaml.idl";
//import "Canvas.abi.idl";

#include <sdkddkver.h>

#define VERSION NTDDI_WIN10_RS2;
#define STANDARD_ATTRIBUTES version(VERSION), marshaling_behavior(agile), threading(both)

namespace Microsoft.Graphics.Canvas
{
	 runtimeclass CanvasDrawingSession;
}

namespace AudioVisualizer
{
	interface IVisualizationSource;
	interface IVisualizationDataFrame;
	interface IVisualizer;

	runtimeclass VisualizerDrawEventArgs;
	runtimeclass VisualizationDataFrame;
	runtimeclass ArrayData;
	runtimeclass ScalarData;
}

namespace AudioVisualizer
{
	[version(1.0)]
	typedef enum ScaleType
	{
		Linear = (int)0,
		Logarithmic = (int)1
	} ScaleType;

	[version(1.0)]
	typedef enum InterpolationType
	{
		Linear = (int)0,
		CubicSpline = (int)1
	} InterpolationType;

	[version(1.0),flags]
	typedef enum AnalyzerType
	{
		RMS = (int)1,
		Peak = (int)2,
		Spectrum = (int)4,
		All = (int)7
	} AnalyzerType;

	declare{
		interface Windows.Foundation.IAsyncOperation<IVisualizationSource *>;
		interface Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IVectorView<float> *>;
	}

	[uuid(62C7FB4D-4712-4A49-BF0F-597AC7079F3A)]
	[version(1.0)]
	[exclusiveto(VisualizerDrawEventArgs)]
	interface IVisualizerDrawEventArgs : IInspectable
	{
		[propget] HRESULT Data([out][retval] VisualizationDataFrame **pData);
		[propget] HRESULT DrawingSession([out][retval] IInspectable **pSession);
	}

	[version(1.0), uuid(7F644CA7-6BD9-455D-A330-BD5F4E9A6DA5), exclusiveto(VisualizerDrawEventArgs)]
	interface IVisualizerDrawEventArgsFactory : IInspectable
	{
		HRESULT Create(
			[in] IInspectable* canvasDrawingSession,
			[in] IVisualizationDataFrame *data,
			[out, retval] VisualizerDrawEventArgs** drawEventArgs
		);
	};

	[version(1.0),activatable(IVisualizerDrawEventArgsFactory,1.0), marshaling_behavior(agile), threading(both)]
	runtimeclass VisualizerDrawEventArgs
	{
		[default] interface IVisualizerDrawEventArgs;
	}

	[uuid(D3C979CE-1D6D-4507-B7CE-5A2E97F672FC)]
	[version(1.0)]
	interface IVisualizer : IInspectable
	{
		[propget] HRESULT Source([out][retval] IVisualizationSource **pData);
		[propput] HRESULT Source([in] IVisualizationSource *pData);

		[propget] HRESULT BackgroundColor([out, retval] Windows.UI.Color *color);
		[propput] HRESULT BackgroundColor([in] Windows.UI.Color color);
	}

	[uuid(11A7C461-9AFB-4AFB-B2E1-6E587D581139)]
	[version(1.0)]
	interface IVisualizerCustomDraw : IInspectable
	{
		[eventadd] HRESULT Draw(
			[in] Windows.Foundation.TypedEventHandler<IVisualizer*, VisualizerDrawEventArgs*>* value,
			[out, retval] EventRegistrationToken* token);
		[eventremove] HRESULT Draw([in] EventRegistrationToken token);
	};

	[version(1.0), activatable(1.0), marshaling_behavior(agile), threading(both)]
	runtimeclass CustomVisualizer : Windows.UI.Xaml.Controls.Control
	{
		[default] interface IVisualizer;
		interface IVisualizerCustomDraw;
	}

	[version(1.0)]
	typedef struct MeterBarLevel
	{
		float Level;
		Windows.UI.Color Color;
	} MeterBarLevel;

	[uuid(665C9CD0-6AAE-4AAB-B152-82128615641C)]
	[version(1.0)]
	interface IDiscreteVUBar : IInspectable
	{
		[propget] HRESULT Levels([out] UINT32* elementCount, [out][retval][size_is(, *elementCount)] MeterBarLevel** levels);
		[propput] HRESULT Levels([in] UINT32 elementCount, [in][size_is(elementCount)] MeterBarLevel* levels);
		[propget] HRESULT Orientation([out, retval] Windows.UI.Xaml.Controls.Orientation *orientation);
		[propput] HRESULT Orientation([in] Windows.UI.Xaml.Controls.Orientation orientation);
		[propget] HRESULT ChannelCount([out,retval] UINT32* pChannels);
		[propput] HRESULT ChannelCount([in] UINT32 channels);
		[propget] HRESULT ElementSize([out,retval] Windows.Foundation.Size *pSize);
		[propput] HRESULT ElementSize([in] Windows.Foundation.Size size);
		[propget] HRESULT ElementMargin([out,retval] Windows.UI.Xaml.Thickness *pValue);
		[propput] HRESULT ElementMargin([in] Windows.UI.Xaml.Thickness value);
		[propget] HRESULT UnlitElement([out,retval] Windows.UI.Color *pColor);
		[propput] HRESULT UnlitElement([in] Windows.UI.Color color);
		[propget] HRESULT RiseTime([out, retval] Windows.Foundation.TimeSpan *time);
		[propput] HRESULT RiseTime([in] Windows.Foundation.TimeSpan time);
		[propget] HRESULT FallTime([out, retval] Windows.Foundation.TimeSpan *time);
		[propput] HRESULT FallTime([in] Windows.Foundation.TimeSpan time);
	};

	[version(1.0), marshaling_behavior(agile), threading(both),activatable(1.0)]
	runtimeclass DiscreteVUBar : Windows.UI.Xaml.Controls.Control
	{
		[default] interface IVisualizer;
		interface IDiscreteVUBar;
	}
	

	[uuid(199F41A4-8EF0-4E0B-AAD3-9E0666511F6A),version(1.0)]
	interface IArrayData : IInspectable
	{
		[propget] HRESULT AmplitudeScale([out, retval] AudioVisualizer.ScaleType *scale);
		[propget] HRESULT FrequencyScale([out, retval] AudioVisualizer.ScaleType *scale);
		[propget] HRESULT MinFrequency([out, retval] float *value);
		[propget] HRESULT MaxFrequency([out, retval] float *value);
		[propget] HRESULT FrequencyStep([out, retval] float *value);
		[propget] HRESULT FrequencyCount([out, retval] UINT32 *value);

		HRESULT TransformLinearFrequency(UINT32 elementCount, [out, retval] ArrayData **result);
		HRESULT ConvertToLogFrequency([in] UINT32 elementCount, [in] float fromFrequency, [in] float toFrequency, [in] InterpolationType type, [out, retval] ArrayData **result);
		HRESULT ApplyRiseAndFall([in] ArrayData *previous, [in] Windows.Foundation.TimeSpan riseTime, [in] Windows.Foundation.TimeSpan fallTime, [in] Windows.Foundation.TimeSpan timeFromPrevious, [out, retval] ArrayData **result);
		HRESULT ConvertToLogAmplitude([in] float minValue,[in] float maxValue, [out, retval] ArrayData **result );
	};


	[version(1.0), uuid(EB2CBCA8-2345-4CEE-9CC7-688B66AE76D3), exclusiveto(ScalarData)]
	interface IScalarDataFactory : IInspectable
	{
		HRESULT Create(
			[in] UINT32 channels,
			[out, retval] ScalarData** data
		);
	};

	[uuid(FA6EDA25-96DC-473E-AA4C-5F67C2307134),version(1.0)]
	interface IScalarData : IInspectable
	{
		HRESULT ConvertToLogAmplitude([in] float minValue, [in] float maxValue, [out, retval] ScalarData **result);
		HRESULT ApplyRiseAndFall([in] ScalarData *previous, [in] Windows.Foundation.TimeSpan riseTime, [in] Windows.Foundation.TimeSpan fallTime, [in] Windows.Foundation.TimeSpan timeFromPrevious, [out, retval] ScalarData **result);
		[propget] HRESULT AmplitudeScale([out, retval] AudioVisualizer.ScaleType *scale);
	};

	[version(1.0), marshaling_behavior(agile), threading(both)]
	[activatable(IScalarDataFactory, 1.0)]
	runtimeclass ScalarData
	{
		[default] interface IScalarData;
		interface Windows.Foundation.Collections.IVectorView<float>;
	}

	[version(1.0), uuid(D2E78F9C-8EE6-441B-85A6-A87E6DCE2114), exclusiveto(ArrayData)]
	interface IArrayDataFactory : IInspectable
	{
		HRESULT Create(
			[in] UINT32 channels,
			[in] UINT32 cElements,
			[out, retval] ArrayData** data
		);
	};
	[version(1.0), marshaling_behavior(agile), threading(both)]
	[activatable(IArrayDataFactory,1.0)]
	runtimeclass ArrayData 
	{
		[default]interface IArrayData;
		interface Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IVectorView<float>*>;
	}

	[uuid(E4C11BE5-112E-49AD-A565-EE713089C447)]
	[version(1.0)]
	interface IVisualizationDataFrame : IInspectable {
		[propget] HRESULT Time([out, retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> **time);
		[propget] HRESULT Duration([out, retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> **time);
		[propget] HRESULT RMS([out, retval] ScalarData **data);
		[propget] HRESULT Peak([out, retval] ScalarData **data);
		[propget] HRESULT Spectrum([out, retval] ArrayData **data);
	};

	 
	[version(1.0), marshaling_behavior(agile), threading(both)]
	runtimeclass VisualizationDataFrame
	{
		[default] interface IVisualizationDataFrame; 
	}

	[uuid(B7589126-33C4-43E8-9D8E-BCF3F3DCE802)]
	[version(1.0)]
	interface IVisualizationSourceStatics : IInspectable
	{
		HRESULT CreateFromMediaElementAsync([in] Windows.UI.Xaml.Controls.MediaElement *pObject, [out, retval] Windows.Foundation.IAsyncOperation<IVisualizationSource *> **ppAsyncOp);
		HRESULT CreateFromMediaPlayerAsync([in] Windows.Media.Playback.MediaPlayer *pObject, [out, retval] Windows.Foundation.IAsyncOperation<IVisualizationSource *> **ppAsyncOp);
		HRESULT CreateFromAudioNode([in] Windows.Media.Audio.IAudioNode *pObject, [out, retval] IVisualizationSource **ppSource);
	}

	[uuid(B74989FE-1436-4179-92B6-E06B540E0C7E)]
	[version(1.0)]
	interface IVisualizationSource : IInspectable {
		//HRESULT Configure([in] AnalyzerType analyzersToRun, [in] float outSampleRate, [in] UINT32 fftLength, [in] float overlapPercent);
		HRESULT GetData([out][retval] IVisualizationDataFrame **result);
		[propget] HRESULT IsSuspended([out][retval] boolean *bIsSuspended);
		[propput] HRESULT IsSuspended(boolean bIsSuspended);
		[propget] HRESULT Fps([out, retval] float *pFramesPerSecond);
		[propput] HRESULT Fps([in] float framesPerSecond);
		[propget] HRESULT AnalyzerTypes([out,retval] AnalyzerType *pResult);
		[propput] HRESULT AnalyzerTypes([in] AnalyzerType types);
	};

	[uuid(722B9116-78B8-40BD-9840-84B59CAC6E84)]
	[version(1.0)]
	interface ISpectralAnalyzerSettings : IInspectable
	{
		[propget] HRESULT FftLength([out,retval] UINT32 *pResult);
		[propput] HRESULT FftLength([in] UINT32 result);
		[propget] HRESULT Overlap([out,retval] float *pResult);
		[propput] HRESULT Overlap([in] float result);
	};

	[version(1.0)]
	[static(AudioVisualizer.IVisualizationSourceStatics, 1.0)]
	runtimeclass VisualizationSource 
	{
		// [default] interface IVisualizationSource;
	};

	[version(1.0)]
	runtimeclass MftAnalyzer
	{
		[default]interface Windows.Media.IMediaExtension;
		interface IVisualizationSource;
		interface ISpectralAnalyzerSettings;
	}
}

