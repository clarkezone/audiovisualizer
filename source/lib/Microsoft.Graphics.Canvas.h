

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.01.0622 */
/* at Mon Jan 18 19:14:07 2038
 */
/* Compiler settings for C:\Users\grfxaltb\AppData\Local\Temp\2\Canvas.abi.idl-16b937ea:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 8.01.0622 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */



/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __Microsoft2EGraphics2ECanvas_h__
#define __Microsoft2EGraphics2ECanvas_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

#if defined(__cplusplus)
#if defined(__MIDL_USE_C_ENUM)
#define MIDL_ENUM enum
#else
#define MIDL_ENUM enum class
#endif
#endif


/* Forward Declarations */ 

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasResourceCreator;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasResourceCreatorWithDpi;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasDeviceFactory;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasDeviceStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasDevice;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasLock;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_FWD_DEFINED__ */


#ifndef ____FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_FWD_DEFINED__
#define ____FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_FWD_DEFINED__
typedef interface __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision;

#endif 	/* ____FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ICanvasEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasImage;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasImageStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasBrush;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasSolidColorBrushFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasSolidColorBrushStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasSolidColorBrush;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasImageBrushFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasImageBrush;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasLinearGradientBrushFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasLinearGradientBrushStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasLinearGradientBrush;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasRadialGradientBrushFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasRadialGradientBrushStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasRadialGradientBrush;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasBitmapFactory;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasBitmap;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__ */


#ifndef ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__
typedef interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

#endif 	/* ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__ */


#ifndef ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__
typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

#endif 	/* ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasBitmapStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasRenderTargetFactory;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasRenderTargetStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasRenderTarget;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__ */


#ifndef ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_FWD_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_FWD_DEFINED__
typedef interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

#endif 	/* ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_FWD_DEFINED__ */


#ifndef ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_FWD_DEFINED__
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_FWD_DEFINED__
typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

#endif 	/* ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasVirtualBitmapStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasVirtualBitmap;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasStrokeStyle;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextInlineObject;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextFormat;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextFormatStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTypography;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextLayout;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextLayoutFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextLayoutStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasPathBuilder;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasPathBuilderFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasActiveLayer;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasGradientMesh;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasGradientMeshFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasGradientMeshStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextRenderingParameters;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextRenderingParametersFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasFontFace;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_FWD_DEFINED__ */


#ifndef ____FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__
typedef interface __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING;

#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__ */


#ifndef ____FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__
typedef interface __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING;

#endif 	/* ____FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__ */


#ifndef ____FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__
#define ____FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__
typedef interface __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

#endif 	/* ____FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__ */


#ifndef ____FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__
#define ____FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__
typedef interface __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

#endif 	/* ____FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__ */


#ifndef ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__
#define ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__
typedef interface __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

#endif 	/* ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__ */


#ifndef ____FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__
#define ____FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__
typedef interface __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

#endif 	/* ____FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextRenderer;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasPathReceiver;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasGeometry;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasGeometryStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasCachedGeometry;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasCachedGeometryStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasFontSet;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasFontSetFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasFontSetStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasNumberSubstitution;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasNumberSubstitutionFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextAnalyzerOptions;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasScaledFont;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_FWD_DEFINED__ */


#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__ */


#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__ */


#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__ */


#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__ */


#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__ */


#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__ */


#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__ */


#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__ */


#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__ */


#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__ */


#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__ */


#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__ */


#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__ */


#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__ */


#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__ */


#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__ */


#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__ */


#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__ */


#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__ */


#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__ */


#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__ */


#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__ */


#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__ */


#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextAnalyzer;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextAnalyzerFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_FWD_DEFINED__ */


#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__ */


#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__ */


#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__ */


#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__ */


#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__ */


#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__ */


#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__ */


#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__ */


#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__ */


#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__ */


#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSpriteBatchStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSpriteBatch;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgElement;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgAttribute;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgNamedElement;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgTextElement;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgPaintAttribute;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgPathAttribute;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgPointsAttribute;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgStrokeDashArrayAttribute;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_FWD_DEFINED__ */


#ifndef ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_FWD_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_FWD_DEFINED__
typedef interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement;

#endif 	/* ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_FWD_DEFINED__ */


#ifndef ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_FWD_DEFINED__
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_FWD_DEFINED__
typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement;

#endif 	/* ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgDocument;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FWD_DEFINED__ */


#ifndef ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_FWD_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_FWD_DEFINED__
typedef interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument;

#endif 	/* ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_FWD_DEFINED__ */


#ifndef ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_FWD_DEFINED__
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_FWD_DEFINED__
typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument;

#endif 	/* ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgDocumentStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgDocumentFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasDrawingSession;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasImageSourceFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasImageSource;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSwapChainFactory;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSwapChainStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSwapChain;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasCommandListFactory;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasCommandList;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    interface ICanvasPrintDocumentFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    interface ICanvasPrintDocument;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    interface ICanvasPrintTaskOptionsChangedEventArgs;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    interface ICanvasPreviewEventArgs;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    interface ICanvasPrintEventArgs;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    interface ICanvasPrintDeferral;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedUpdateEventArgsFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedUpdateEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedDrawEventArgsFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedDrawEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedControl;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    interface ICanvasCreateResourcesEventArgsFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    interface ICanvasCreateResourcesEventArgs;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasDrawEventArgsFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasDrawEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasControl;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasSwapChainPanel;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasVirtualImageSourceFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasVirtualImageSource;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasRegionsInvalidatedEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasVirtualControl;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Composition {
                        interface ICanvasCompositionStatics;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPixelShaderEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPixelShaderEffectFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_FWD_DEFINED__ */


#ifndef ____FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__
typedef interface __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable;

#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__ */


#ifndef ____FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__
typedef interface __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable;

#endif 	/* ____FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__ */


#ifndef ____FIReference_1_Windows__CFoundation__CNumerics__CVector2_FWD_DEFINED__
#define ____FIReference_1_Windows__CFoundation__CNumerics__CVector2_FWD_DEFINED__
typedef interface __FIReference_1_Windows__CFoundation__CNumerics__CVector2 __FIReference_1_Windows__CFoundation__CNumerics__CVector2;

#endif 	/* ____FIReference_1_Windows__CFoundation__CNumerics__CVector2_FWD_DEFINED__ */


#ifndef ____FIReference_1_Windows__CFoundation__CNumerics__CVector4_FWD_DEFINED__
#define ____FIReference_1_Windows__CFoundation__CNumerics__CVector4_FWD_DEFINED__
typedef interface __FIReference_1_Windows__CFoundation__CNumerics__CVector4 __FIReference_1_Windows__CFoundation__CNumerics__CVector4;

#endif 	/* ____FIReference_1_Windows__CFoundation__CNumerics__CVector4_FWD_DEFINED__ */


#ifndef ____FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_FWD_DEFINED__
#define ____FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_FWD_DEFINED__
typedef interface __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2;

#endif 	/* ____FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_FWD_DEFINED__ */


#ifndef ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_FWD_DEFINED__
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_FWD_DEFINED__
typedef interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2;

#endif 	/* ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_FWD_DEFINED__ */


#ifndef ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_FWD_DEFINED__
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_FWD_DEFINED__
typedef interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3;

#endif 	/* ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_FWD_DEFINED__ */


#ifndef ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_FWD_DEFINED__
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_FWD_DEFINED__
typedef interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4;

#endif 	/* ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_FWD_DEFINED__ */


#ifndef ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_FWD_DEFINED__
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_FWD_DEFINED__
typedef interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2;

#endif 	/* ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_FWD_DEFINED__ */


#ifndef ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_FWD_DEFINED__
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_FWD_DEFINED__
typedef interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4;

#endif 	/* ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_FWD_DEFINED__ */


#ifndef ____FIReferenceArray_1_float_FWD_DEFINED__
#define ____FIReferenceArray_1_float_FWD_DEFINED__
typedef interface __FIReferenceArray_1_float __FIReferenceArray_1_float;

#endif 	/* ____FIReferenceArray_1_float_FWD_DEFINED__ */


#ifndef ____FIReferenceArray_1_int_FWD_DEFINED__
#define ____FIReferenceArray_1_int_FWD_DEFINED__
typedef interface __FIReferenceArray_1_int __FIReferenceArray_1_int;

#endif 	/* ____FIReferenceArray_1_int_FWD_DEFINED__ */


#ifndef ____FIReferenceArray_1_boolean_FWD_DEFINED__
#define ____FIReferenceArray_1_boolean_FWD_DEFINED__
typedef interface __FIReferenceArray_1_boolean __FIReferenceArray_1_boolean;

#endif 	/* ____FIReferenceArray_1_boolean_FWD_DEFINED__ */


#ifndef ____FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_FWD_DEFINED__
#define ____FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_FWD_DEFINED__
typedef interface __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile;

#endif 	/* ____FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorManagementProfile;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorManagementProfileFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorManagementProfileStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IEffectTransferTable3D;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IEffectTransferTable3DStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IAlphaMaskEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IAlphaMaskEffectStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IArithmeticCompositeEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IAtlasEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IBlendEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IBorderEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IBrightnessEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IChromaKeyEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorManagementEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorManagementEffectStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorMatrixEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorSourceEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_FWD_DEFINED__ */


#ifndef ____FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define ____FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
typedef interface __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

#endif 	/* ____FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__ */


#ifndef ____FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define ____FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
typedef interface __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

#endif 	/* ____FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__ */


#ifndef ____FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define ____FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
typedef interface __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

#endif 	/* ____FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__ */


#ifndef ____FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define ____FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
typedef interface __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

#endif 	/* ____FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ICompositeEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IContrastEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IConvolveMatrixEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ICropEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ICrossFadeEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ICrossFadeEffectStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDirectionalBlurEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDiscreteTransferEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDisplacementMapEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDistantDiffuseEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDistantSpecularEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDpiCompensationEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IEdgeDetectionEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IEmbossEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IExposureEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IGammaTransferEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IGaussianBlurEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IGrayscaleEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IHighlightsAndShadowsEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IHueRotationEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IHueToRgbEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IInvertEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ILinearTransferEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ILuminanceToAlphaEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IMorphologyEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IOpacityEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IOpacityEffectStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IOpacityMetadataEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPointDiffuseEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPointSpecularEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPosterizeEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPremultiplyEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IRgbToHueEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISaturationEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IScaleEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISepiaEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IShadowEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISharpenEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISpotDiffuseEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISpotSpecularEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IStraightenEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITableTransferEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITableTransfer3DEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITemperatureAndTintEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITileEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITintEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITintEffectStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITransform2DEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITransform3DEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITurbulenceEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IUnPremultiplyEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IVignetteEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_FWD_DEFINED__ */


/* header files for imported files */
#include "inspectable.h"
#include "Windows.Foundation.h"
#include "Windows.UI.h"
#include "Windows.UI.Xaml.Media.Imaging.h"
#include "Windows.Graphics.Printing.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_Canvas2Eabi_0000_0000 */
/* [local] */ 

#ifdef __cplusplus
} /*extern "C"*/ 
#endif
#include <windows.foundation.collections.h>
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasDevice;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
interface ICanvasDevice;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

interface IInspectable;


/* interface __MIDL_itf_Canvas2Eabi_0000_0000 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0000_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5496 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5496 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5496_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5496_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0001 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("ef539eb5-aa23-573f-ba41-ccd7f3150c5b"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::CanvasDevice*,IInspectable*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasDevice*, ABI::Microsoft::Graphics::Canvas::ICanvasDevice*>,IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.CanvasDevice, Object>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::CanvasDevice*,IInspectable*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_USE */

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
#if defined(MIDL_ENUM)
MIDL_ENUM CanvasBufferPrecision;
#else
enum class CanvasBufferPrecision;
#endif
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0001 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0001_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5497 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5497 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5497_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5497_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0002 */
/* [local] */ 

#ifndef DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_USE
#define DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("8bff1f50-aef3-558e-a02b-589b6c0cfea8"))
IReference<MIDL_ENUM ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision> : IReference_impl<MIDL_ENUM ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReference`1<Microsoft.Graphics.Canvas.CanvasBufferPrecision>"; }
};
typedef IReference<MIDL_ENUM ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision> __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_t;
#define ____FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_FWD_DEFINED__
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision ABI::Windows::Foundation::__FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_USE */

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Foundation {
struct Rect;
} /*Foundation*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0002 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0002_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5498 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5498 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5498_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5498_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0003 */
/* [local] */ 

#ifndef DEF___FIReference_1_Windows__CFoundation__CRect_USE
#define DEF___FIReference_1_Windows__CFoundation__CRect_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("80423f11-054f-5eac-afd3-63b6ce15e77b"))
IReference<struct ABI::Windows::Foundation::Rect> : IReference_impl<struct ABI::Windows::Foundation::Rect> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReference`1<Windows.Foundation.Rect>"; }
};
typedef IReference<struct ABI::Windows::Foundation::Rect> __FIReference_1_Windows__CFoundation__CRect_t;
#define ____FIReference_1_Windows__CFoundation__CRect_FWD_DEFINED__
#define __FIReference_1_Windows__CFoundation__CRect ABI::Windows::Foundation::__FIReference_1_Windows__CFoundation__CRect_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReference_1_Windows__CFoundation__CRect_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasBitmap;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
interface ICanvasBitmap;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0003 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0003_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5499 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5499 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5499_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5499_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0004 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("01f4b012-b7d5-5e02-8caa-2c460f35c947"))
IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*, ABI::Microsoft::Graphics::Canvas::ICanvasBitmap*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Microsoft.Graphics.Canvas.CanvasBitmap>"; }
};
typedef IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*> __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t;
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0004 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0004_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5500 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5500 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5500_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5500_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0005 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("0391e8ef-719a-5c80-b87a-7d902b154e3e"))
IAsyncOperation<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*, ABI::Microsoft::Graphics::Canvas::ICanvasBitmap*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.CanvasBitmap>"; }
};
typedef IAsyncOperation<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*> __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t;
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap ABI::Windows::Foundation::__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasVirtualBitmap;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
interface ICanvasVirtualBitmap;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0005 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0005_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5501 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5501 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5501_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5501_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0006 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6fec4e18-7336-5236-8748-9a4b669b98f6"))
IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmap*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmap*, ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Microsoft.Graphics.Canvas.CanvasVirtualBitmap>"; }
};
typedef IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmap*> __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_t;
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_FWD_DEFINED__
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0006 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0006_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5502 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5502 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5502_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5502_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0007 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_USE
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("d47cfc52-5abc-550b-ad7c-63b5aec8ca3a"))
IAsyncOperation<ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmap*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmap*, ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.CanvasVirtualBitmap>"; }
};
typedef IAsyncOperation<ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmap*> __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_t;
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_FWD_DEFINED__
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap ABI::Windows::Foundation::__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0007 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0007_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5503 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5503 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5503_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5503_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0008 */
/* [local] */ 

#ifndef DEF___FIIterator_1_HSTRING_USE
#define DEF___FIIterator_1_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("8c304ebb-6615-50a4-8829-879ecd443236"))
IIterator<HSTRING> : IIterator_impl<HSTRING> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<String>"; }
};
typedef IIterator<HSTRING> __FIIterator_1_HSTRING_t;
#define ____FIIterator_1_HSTRING_FWD_DEFINED__
#define __FIIterator_1_HSTRING ABI::Windows::Foundation::Collections::__FIIterator_1_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_HSTRING_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0008 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0008_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5504 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5504 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5504_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5504_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0009 */
/* [local] */ 

#ifndef DEF___FIIterable_1_HSTRING_USE
#define DEF___FIIterable_1_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e2fcc7c1-3bfc-5a0b-b2b0-72e769d1cb7e"))
IIterable<HSTRING> : IIterable_impl<HSTRING> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<String>"; }
};
typedef IIterable<HSTRING> __FIIterable_1_HSTRING_t;
#define ____FIIterable_1_HSTRING_FWD_DEFINED__
#define __FIIterable_1_HSTRING ABI::Windows::Foundation::Collections::__FIIterable_1_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_HSTRING_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0009 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0009_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5505 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5505 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5505_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5505_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0010 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_HSTRING_USE
#define DEF___FIVectorView_1_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("2f13c006-a03a-5f69-b090-75a43e33423e"))
IVectorView<HSTRING> : IVectorView_impl<HSTRING> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<String>"; }
};
typedef IVectorView<HSTRING> __FIVectorView_1_HSTRING_t;
#define ____FIVectorView_1_HSTRING_FWD_DEFINED__
#define __FIVectorView_1_HSTRING ABI::Windows::Foundation::Collections::__FIVectorView_1_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_HSTRING_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0010 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0010_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5506 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5506 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5506_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5506_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0011 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("60310303-49c5-52e6-abc6-a9b36eccc716"))
IKeyValuePair<HSTRING,HSTRING> : IKeyValuePair_impl<HSTRING,HSTRING> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IKeyValuePair`2<String, String>"; }
};
typedef IKeyValuePair<HSTRING,HSTRING> __FIKeyValuePair_2_HSTRING_HSTRING_t;
#define ____FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__
#define __FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_HSTRING_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIKeyValuePair_2_HSTRING_HSTRING_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0011 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0011_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5507 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5507 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5507_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5507_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0012 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("05eb86f1-7140-5517-b88d-cbaebe57e6b1"))
IIterator<__FIKeyValuePair_2_HSTRING_HSTRING*> : IIterator_impl<__FIKeyValuePair_2_HSTRING_HSTRING*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>"; }
};
typedef IIterator<__FIKeyValuePair_2_HSTRING_HSTRING*> __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_t;
#define ____FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__
#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0012 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0012_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5508 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5508 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5508_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5508_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0013 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e9bdaaf0-cbf6-5c72-be90-29cbf3a1319b"))
IIterable<__FIKeyValuePair_2_HSTRING_HSTRING*> : IIterable_impl<__FIKeyValuePair_2_HSTRING_HSTRING*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>"; }
};
typedef IIterable<__FIKeyValuePair_2_HSTRING_HSTRING*> __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_t;
#define ____FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__
#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0013 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0013_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5509 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5509 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5509_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5509_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0014 */
/* [local] */ 

#ifndef DEF___FIMapView_2_HSTRING_HSTRING_USE
#define DEF___FIMapView_2_HSTRING_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("ac7f26f2-feb7-5b2a-8ac4-345bc62caede"))
IMapView<HSTRING,HSTRING> : IMapView_impl<HSTRING,HSTRING> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IMapView`2<String, String>"; }
};
typedef IMapView<HSTRING,HSTRING> __FIMapView_2_HSTRING_HSTRING_t;
#define ____FIMapView_2_HSTRING_HSTRING_FWD_DEFINED__
#define __FIMapView_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIMapView_2_HSTRING_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIMapView_2_HSTRING_HSTRING_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0014 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0014_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5510 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5510 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5510_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5510_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0015 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("d211d7c6-b231-5857-8ebe-5dcc576e3c94"))
IVectorView<__FIKeyValuePair_2_HSTRING_HSTRING*> : IVectorView_impl<__FIKeyValuePair_2_HSTRING_HSTRING*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>"; }
};
typedef IVectorView<__FIKeyValuePair_2_HSTRING_HSTRING*> __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_t;
#define ____FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__
#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0015 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0015_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5511 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5511 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5511_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5511_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0016 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("d3705344-38b6-5af6-83e5-3ced5c0f3d03"))
IVector<__FIKeyValuePair_2_HSTRING_HSTRING*> : IVector_impl<__FIKeyValuePair_2_HSTRING_HSTRING*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>"; }
};
typedef IVector<__FIKeyValuePair_2_HSTRING_HSTRING*> __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_t;
#define ____FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__
#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
class CanvasFontFace;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
interface ICanvasFontFace;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0016 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0016_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0016_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5512 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5512 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5512_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5512_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0017 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#define DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("ba9cfc0b-75d0-5455-9d9d-b88a73a806d0"))
IIterator<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Microsoft.Graphics.Canvas.Text.CanvasFontFace>"; }
};
typedef IIterator<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t;
#define ____FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__
#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace ABI::Windows::Foundation::Collections::__FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0017 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0017_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0017_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5513 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5513 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5513_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5513_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0018 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#define DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("dadc03be-adec-5e2b-8056-e620ebd250a6"))
IIterable<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Microsoft.Graphics.Canvas.Text.CanvasFontFace>"; }
};
typedef IIterable<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t;
#define ____FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__
#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace ABI::Windows::Foundation::Collections::__FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0018 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0018_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5514 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5514 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5514_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5514_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0019 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#define DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f90149d7-8a7e-5e74-a251-9e92f5a8084d"))
IVectorView<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Microsoft.Graphics.Canvas.Text.CanvasFontFace>"; }
};
typedef IVectorView<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t;
#define ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__
#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace ABI::Windows::Foundation::Collections::__FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0019 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0019_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5515 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5515 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5515_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5515_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0020 */
/* [local] */ 

#ifndef DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#define DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("488e8b62-7d1c-5a28-ba1b-d30062a9462c"))
IVector<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Microsoft.Graphics.Canvas.Text.CanvasFontFace>"; }
};
typedef IVector<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t;
#define ____FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_FWD_DEFINED__
#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace ABI::Windows::Foundation::Collections::__FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Input {
namespace Inking {
class InkStroke;
} /*Inking*/
} /*Input*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Input {
namespace Inking {
interface IInkStroke;
} /*Inking*/
} /*Input*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0020 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0020_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5516 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5516 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5516_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5516_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0021 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_USE
#define DEF___FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5608d5a9-e7e4-5a0b-941f-b7fed76b35bf"))
IIterator<ABI::Windows::UI::Input::Inking::InkStroke*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Input::Inking::InkStroke*, ABI::Windows::UI::Input::Inking::IInkStroke*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.UI.Input.Inking.InkStroke>"; }
};
typedef IIterator<ABI::Windows::UI::Input::Inking::InkStroke*> __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_t;
#define ____FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_FWD_DEFINED__
#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0021 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0021_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5517 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5517 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5517_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5517_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0022 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_USE
#define DEF___FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bbc11401-89d0-5305-a3b3-36c887714b9b"))
IIterable<ABI::Windows::UI::Input::Inking::InkStroke*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Input::Inking::InkStroke*, ABI::Windows::UI::Input::Inking::IInkStroke*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.UI.Input.Inking.InkStroke>"; }
};
typedef IIterable<ABI::Windows::UI::Input::Inking::InkStroke*> __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_t;
#define ____FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_FWD_DEFINED__
#define __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_USE */

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
struct CanvasCharacterRange;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
class CanvasScaledFont;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
interface ICanvasScaledFont;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0022 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0022_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5518 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5518 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5518_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5518_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0023 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("659fa7a9-d350-5c96-9eda-65d151127be6"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasScaledFont*> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasScaledFont*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>"; }
};
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasScaledFont*> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t;
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0023 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0023_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5519 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5519 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5519_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5519_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0024 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("56051c10-f92f-5a6c-911e-367267245224"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>>"; }
};
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t;
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0024 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0024_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5520 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5520 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5520_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5520_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0025 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e13342d7-18ac-5a96-8f97-4ad9aa7cc211"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>>"; }
};
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t;
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0025 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0025_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5521 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5521 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5521_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5521_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0026 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f1eaee0a-1f12-5e87-9657-cb93e8827bb0"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>>"; }
};
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t;
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE */

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
struct CanvasAnalyzedBidi;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0026 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0026_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5522 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5522 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5522_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5522_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0027 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("9f5425b6-be6f-5f3d-9d65-ad8c61aa01de"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>"; }
};
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t;
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0027 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0027_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5523 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5523 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5523_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5523_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0028 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("7e9530ef-eb03-5e8f-9d38-f2c62e31d4bc"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>>"; }
};
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t;
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0028 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0028_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5524 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5524 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5524_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5524_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0029 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("51271225-b352-5aaa-ae19-95d387c9b6b7"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>>"; }
};
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t;
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0029 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0029_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5525 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5525 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5525_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5525_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0030 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("67c4d9c7-c31e-51c1-ab1d-f8a0ebcd5552"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>>"; }
};
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t;
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
class CanvasNumberSubstitution;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
interface ICanvasNumberSubstitution;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0030 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0030_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5526 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5526 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5526_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5526_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0031 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("93f9a2ab-5b51-5468-8b38-4693d96b4255"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution*> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>"; }
};
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution*> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t;
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0031 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0031_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5527 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5527 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5527_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5527_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0032 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("c95c26dd-c066-543f-a3d4-a3fc9f0cad1a"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>>"; }
};
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t;
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0032 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0032_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5528 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5528 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5528_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5528_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0033 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("27f7d15b-8c80-5fa3-a202-899cef70e002"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>>"; }
};
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t;
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0033 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0033_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5529 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5529 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5529_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5529_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0034 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("80a1114f-758f-5110-baa8-f1884a7bb922"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>>"; }
};
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t;
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE */

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
struct CanvasAnalyzedScript;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0034 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0034_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5530 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5530 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5530_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5530_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0035 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f113a468-5320-5b3d-b976-1c12d95d71fe"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>"; }
};
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t;
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0035 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0035_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5531 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5531 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5531_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5531_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0036 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("d6dd13e4-d1e8-577c-bbcb-cf31b96f09ed"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>>"; }
};
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t;
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0036 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0036_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5532 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5532 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5532_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5532_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0037 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("4b15169a-c4b5-51d3-b6c8-79ec3e177871"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>>"; }
};
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t;
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0037 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0037_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5533 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5533 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5533_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5533_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0038 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("9b325f09-f744-53fd-acc7-d5e6fea523d7"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>>"; }
};
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t;
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE */

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
struct CanvasAnalyzedGlyphOrientation;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0038 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0038_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5534 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5534 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5534_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5534_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0039 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("a8240806-1266-51ae-9276-0d6eb62f403b"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>"; }
};
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t;
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0039 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0039_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5535 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5535 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5535_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5535_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0040 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("6fa01beb-a02e-57b4-975d-0662230315e9"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>>"; }
};
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t;
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0040 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0040_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5536 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5536 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5536_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5536_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0041 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bc2186a2-f834-5c78-8d4c-ec4166c46b40"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>>"; }
};
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t;
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0041 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0041_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5537 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5537 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5537_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5537_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0042 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("ce1ccf50-cc60-5c33-98d5-fb6ea38131bd"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>>"; }
};
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t;
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
class CanvasTypography;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
interface ICanvasTypography;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0042 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0042_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5538 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5538 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5538_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5538_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0043 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("3e238e5e-5b0e-519e-b8ee-9524d51e0376"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasTypography*> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasTypography*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>"; }
};
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasTypography*> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t;
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0043 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0043_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5539 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5539 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5539_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5539_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0044 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("6bf99e32-7516-5e16-ad21-f83a89898c50"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>>"; }
};
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t;
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0044 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0044_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5540 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5540 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5540_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5540_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0045 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("9101ecfa-8e8b-5236-b3c1-3ae419df1a4d"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>>"; }
};
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t;
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0045 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0045_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0045_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5541 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5541 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5541_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5541_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0046 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("08f216fc-38e5-5c04-bb90-ed0436cdf91d"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>>"; }
};
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t;
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0046 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0046_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5542 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5542 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5542_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5542_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0047 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("842f5ded-4e0a-5c23-b1d2-f551a40dfb56"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>>"; }
};
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t;
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_FWD_DEFINED__
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0047 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0047_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5543 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5543 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5543_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5543_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0048 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("eaf56dfd-1114-5c78-a566-389d8da38288"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>>"; }
};
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t;
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_FWD_DEFINED__
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE */

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
struct CanvasAnalyzedBreakpoint;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0048 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0048_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5544 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5544 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5544_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5544_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0049 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("2c386993-9c51-5a1a-b59c-176b085558dd"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint>"; }
};
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t;
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0049 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0049_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0049_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5545 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5545 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5545_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5545_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0050 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("662b6385-c525-52d3-95be-f878f47eb9ec"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint>>"; }
};
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t;
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0050 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0050_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5546 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5546 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5546_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5546_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0051 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("ec783e46-bd88-51b7-9539-e767dfd3aa5a"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint>>"; }
};
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t;
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0051 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0051_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5547 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5547 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5547_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5547_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0052 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("864c33d2-ec71-546a-a93e-8c7600579bbb"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint>>"; }
};
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t;
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0052 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0052_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5548 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5548 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5548_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5548_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0053 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5f14499a-b04a-527b-a1b2-4861c2ba02e2"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint>>"; }
};
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t;
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_FWD_DEFINED__
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0053 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0053_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5549 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5549 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5549_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5549_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0054 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("de9ca46b-a6c8-57de-8423-c62f9719fbaf"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>>"; }
};
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t;
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_FWD_DEFINED__
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0054 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0054_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5550 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5550 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5550_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5550_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0055 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f347bfc7-bb27-523d-9efc-c70891b2b98b"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>>"; }
};
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t;
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_FWD_DEFINED__
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0055 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0055_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0055_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5551 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5551 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5551_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5551_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0056 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("c512a1c3-6564-5d44-8a62-bd91e7fc17c0"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>>"; }
};
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t;
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_FWD_DEFINED__
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0056 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0056_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0056_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5552 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5552 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5552_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5552_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0057 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("efdb3d2a-c102-5f30-bb87-1c5d3e22d912"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>>"; }
};
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t;
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_FWD_DEFINED__
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Svg {
class CanvasSvgNamedElement;
} /*Svg*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Svg {
interface ICanvasSvgNamedElement;
} /*Svg*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0057 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0057_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0057_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5553 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5553 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5553_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5553_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0058 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("76b5a817-1bef-5f3e-91bb-5697a3ba6e51"))
IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement*, ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement>"; }
};
typedef IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement*> __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_t;
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_FWD_DEFINED__
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0058 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0058_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0058_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5554 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5554 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5554_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5554_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0059 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_USE
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("68a752f6-827a-5816-8e65-0b3342673075"))
IAsyncOperation<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement*, ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement>"; }
};
typedef IAsyncOperation<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement*> __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_t;
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_FWD_DEFINED__
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement ABI::Windows::Foundation::__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Svg {
class CanvasSvgDocument;
} /*Svg*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Svg {
interface ICanvasSvgDocument;
} /*Svg*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0059 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0059_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0059_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5555 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5555 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5555_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5555_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0060 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("45ebe17c-efb1-5ba2-9280-84134cea38f9"))
IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument*, ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument>"; }
};
typedef IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument*> __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_t;
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_FWD_DEFINED__
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0060 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0060_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0060_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5556 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5556 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5556_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5556_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0061 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_USE
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("63adbeeb-f748-5aec-a9d3-5fd731b2bc67"))
IAsyncOperation<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument*, ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument>"; }
};
typedef IAsyncOperation<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument*> __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_t;
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_FWD_DEFINED__
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument ABI::Windows::Foundation::__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Printing {
class CanvasPrintDocument;
} /*Printing*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Printing {
interface ICanvasPrintDocument;
} /*Printing*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Printing {
class CanvasPrintTaskOptionsChangedEventArgs;
} /*Printing*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Printing {
interface ICanvasPrintTaskOptionsChangedEventArgs;
} /*Printing*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0061 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0061_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0061_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5557 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5557 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5557_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5557_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0062 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("87076d4b-95f2-5eb5-94b8-f3a8feb8d335"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*, ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs*, ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument, Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Printing {
class CanvasPreviewEventArgs;
} /*Printing*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Printing {
interface ICanvasPreviewEventArgs;
} /*Printing*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0062 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0062_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0062_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5558 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5558 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5558_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5558_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0063 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f406c30c-1745-5ada-a50f-11237a9d21c3"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*, ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs*, ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument, Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Printing {
class CanvasPrintEventArgs;
} /*Printing*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Printing {
interface ICanvasPrintEventArgs;
} /*Printing*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0063 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0063_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0063_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5559 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5559 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5559_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5559_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0064 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("e1b1643e-7f53-57d8-8bd1-90ff039d73ca"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*, ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs*, ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument, Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasAnimatedControl;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasAnimatedControl;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
class CanvasCreateResourcesEventArgs;
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
interface ICanvasCreateResourcesEventArgs;
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0064 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0064_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0064_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5560 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5560 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5560_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5560_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0065 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a29acd34-5ab2-50ff-b02d-e6737195de24"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl, Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasAnimatedUpdateEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasAnimatedUpdateEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0065 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0065_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0065_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5561 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5561 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5561_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5561_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0066 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f3505553-11e9-548c-80b6-33e56d2e673b"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs*> : ITypedEventHandler_impl<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasAnimatedDrawEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasAnimatedDrawEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0066 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0066_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0066_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5562 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5562 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5562_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5562_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0067 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("00ddd999-594e-5c0f-b4a0-52b01171dcd6"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs*> : ITypedEventHandler_impl<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0067 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0067_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0067_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5563 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5563 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5563_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5563_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0068 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("17e87476-4ea7-5920-a49e-a7a9e383c7dc"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,IInspectable*> : ITypedEventHandler_impl<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, Object>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,IInspectable*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasControl;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasControl;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0068 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0068_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0068_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5564 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5564 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5564_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5564_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0069 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("ffcd91a9-b0f6-5e59-b815-0581129240e6"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl, Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasDrawEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasDrawEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0069 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0069_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0069_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5565 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5565 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5565_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5565_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0070 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6b0b7674-c32a-59f5-ba42-79cd2fd7f023"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl, Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasVirtualImageSource;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasVirtualImageSource;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasRegionsInvalidatedEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasRegionsInvalidatedEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0070 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0070_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0070_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5566 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5566 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5566_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5566_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0071 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("fed1b996-f368-58b3-bccd-8ebacf6611b2"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource, Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasVirtualControl;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasVirtualControl;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0071 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0071_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0071_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5567 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5567 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5567_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5567_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0072 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("82c7431b-0f55-5f54-8dd8-f9a8327df123"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl, Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0072 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0072_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0072_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5568 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5568 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5568_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5568_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0073 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("9a63a22f-5ad4-5195-beb6-9b73b4304443"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl, Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0073 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0073_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0073_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5569 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5569 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5569_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5569_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0074 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("09335560-6c6b-5a26-9348-97b781132b20"))
IKeyValuePair<HSTRING,IInspectable*> : IKeyValuePair_impl<HSTRING,IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IKeyValuePair`2<String, Object>"; }
};
typedef IKeyValuePair<HSTRING,IInspectable*> __FIKeyValuePair_2_HSTRING_IInspectable_t;
#define ____FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__
#define __FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_HSTRING_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0074 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0074_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0074_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5570 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5570 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5570_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5570_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0075 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5db5fa32-707c-5849-a06b-91c8eb9d10e8"))
IIterator<__FIKeyValuePair_2_HSTRING_IInspectable*> : IIterator_impl<__FIKeyValuePair_2_HSTRING_IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>"; }
};
typedef IIterator<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define ____FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__
#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0075 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0075_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0075_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5571 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5571 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5571_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5571_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0076 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("fe2f3d47-5d47-5499-8374-430c7cda0204"))
IIterable<__FIKeyValuePair_2_HSTRING_IInspectable*> : IIterable_impl<__FIKeyValuePair_2_HSTRING_IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>"; }
};
typedef IIterable<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define ____FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__
#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0076 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0076_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0076_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5572 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5572 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5572_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5572_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0077 */
/* [local] */ 

#ifndef DEF___FIMapView_2_HSTRING_IInspectable_USE
#define DEF___FIMapView_2_HSTRING_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bb78502a-f79d-54fa-92c9-90c5039fdf7e"))
IMapView<HSTRING,IInspectable*> : IMapView_impl<HSTRING,IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IMapView`2<String, Object>"; }
};
typedef IMapView<HSTRING,IInspectable*> __FIMapView_2_HSTRING_IInspectable_t;
#define ____FIMapView_2_HSTRING_IInspectable_FWD_DEFINED__
#define __FIMapView_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIMapView_2_HSTRING_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIMapView_2_HSTRING_IInspectable_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0077 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0077_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0077_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5573 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5573 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5573_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5573_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0078 */
/* [local] */ 

#ifndef DEF___FIMap_2_HSTRING_IInspectable_USE
#define DEF___FIMap_2_HSTRING_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("1b0d3570-0877-5ec2-8a2c-3b9539506aca"))
IMap<HSTRING,IInspectable*> : IMap_impl<HSTRING,IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IMap`2<String, Object>"; }
};
typedef IMap<HSTRING,IInspectable*> __FIMap_2_HSTRING_IInspectable_t;
#define ____FIMap_2_HSTRING_IInspectable_FWD_DEFINED__
#define __FIMap_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIMap_2_HSTRING_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIMap_2_HSTRING_IInspectable_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0078 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0078_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0078_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5574 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5574 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5574_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5574_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0079 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("696a5329-ed0f-57cc-9379-ff81e8235bcc"))
IVectorView<__FIKeyValuePair_2_HSTRING_IInspectable*> : IVectorView_impl<__FIKeyValuePair_2_HSTRING_IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>"; }
};
typedef IVectorView<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define ____FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__
#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0079 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0079_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0079_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5575 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5575 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5575_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5575_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0080 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("7b624b94-16ce-554e-89e4-6fa8d769da11"))
IVector<__FIKeyValuePair_2_HSTRING_IInspectable*> : IVector_impl<__FIKeyValuePair_2_HSTRING_IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>"; }
};
typedef IVector<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define ____FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__
#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Foundation {
namespace Numerics {
struct Vector2;
} /*Numerics*/
} /*Foundation*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0080 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0080_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0080_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5576 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5576 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5576_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5576_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0081 */
/* [local] */ 

#ifndef DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector2_USE
#define DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector2_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("48f6a69e-8465-57ae-9400-9764087f65ad"))
IReference<struct ABI::Windows::Foundation::Numerics::Vector2> : IReference_impl<struct ABI::Windows::Foundation::Numerics::Vector2> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReference`1<Windows.Foundation.Numerics.Vector2>"; }
};
typedef IReference<struct ABI::Windows::Foundation::Numerics::Vector2> __FIReference_1_Windows__CFoundation__CNumerics__CVector2_t;
#define ____FIReference_1_Windows__CFoundation__CNumerics__CVector2_FWD_DEFINED__
#define __FIReference_1_Windows__CFoundation__CNumerics__CVector2 ABI::Windows::Foundation::__FIReference_1_Windows__CFoundation__CNumerics__CVector2_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector2_USE */

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Foundation {
namespace Numerics {
struct Vector4;
} /*Numerics*/
} /*Foundation*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0081 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0081_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0081_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5577 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5577 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5577_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5577_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0082 */
/* [local] */ 

#ifndef DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector4_USE
#define DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector4_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a5e843c9-ed20-5339-8f8d-9fe404cf3654"))
IReference<struct ABI::Windows::Foundation::Numerics::Vector4> : IReference_impl<struct ABI::Windows::Foundation::Numerics::Vector4> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReference`1<Windows.Foundation.Numerics.Vector4>"; }
};
typedef IReference<struct ABI::Windows::Foundation::Numerics::Vector4> __FIReference_1_Windows__CFoundation__CNumerics__CVector4_t;
#define ____FIReference_1_Windows__CFoundation__CNumerics__CVector4_FWD_DEFINED__
#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4 ABI::Windows::Foundation::__FIReference_1_Windows__CFoundation__CNumerics__CVector4_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector4_USE */

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Foundation {
namespace Numerics {
struct Matrix3x2;
} /*Numerics*/
} /*Foundation*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0082 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0082_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0082_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5578 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5578 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5578_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5578_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0083 */
/* [local] */ 

#ifndef DEF___FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_USE
#define DEF___FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("76358cfd-2cbd-525b-a49e-90ee18247b71"))
IReference<struct ABI::Windows::Foundation::Numerics::Matrix3x2> : IReference_impl<struct ABI::Windows::Foundation::Numerics::Matrix3x2> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReference`1<Windows.Foundation.Numerics.Matrix3x2>"; }
};
typedef IReference<struct ABI::Windows::Foundation::Numerics::Matrix3x2> __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_t;
#define ____FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_FWD_DEFINED__
#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 ABI::Windows::Foundation::__FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0083 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0083_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0083_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5579 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5579 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5579_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5579_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0084 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_USE
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("29df2178-ffdb-563e-88db-3869a007305e"))
IReferenceArray<struct ABI::Windows::Foundation::Numerics::Vector2> : IReferenceArray_impl<struct ABI::Windows::Foundation::Numerics::Vector2> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReferenceArray`1<Windows.Foundation.Numerics.Vector2>"; }
};
typedef IReferenceArray<struct ABI::Windows::Foundation::Numerics::Vector2> __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_t;
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_FWD_DEFINED__
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 ABI::Windows::Foundation::__FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_USE */

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Foundation {
namespace Numerics {
struct Vector3;
} /*Numerics*/
} /*Foundation*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0084 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0084_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0084_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5580 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5580 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5580_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5580_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0085 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_USE
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("aa1a35fa-0b4e-5248-bd79-ffd47cfe4027"))
IReferenceArray<struct ABI::Windows::Foundation::Numerics::Vector3> : IReferenceArray_impl<struct ABI::Windows::Foundation::Numerics::Vector3> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReferenceArray`1<Windows.Foundation.Numerics.Vector3>"; }
};
typedef IReferenceArray<struct ABI::Windows::Foundation::Numerics::Vector3> __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_t;
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_FWD_DEFINED__
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 ABI::Windows::Foundation::__FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0085 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0085_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0085_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5581 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5581 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5581_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5581_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0086 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_USE
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("68757250-5849-5772-90e3-aadb4c970bff"))
IReferenceArray<struct ABI::Windows::Foundation::Numerics::Vector4> : IReferenceArray_impl<struct ABI::Windows::Foundation::Numerics::Vector4> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReferenceArray`1<Windows.Foundation.Numerics.Vector4>"; }
};
typedef IReferenceArray<struct ABI::Windows::Foundation::Numerics::Vector4> __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_t;
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_FWD_DEFINED__
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 ABI::Windows::Foundation::__FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0086 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0086_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0086_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5582 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5582 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5582_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5582_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0087 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_USE
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a525d9ff-c09b-501a-a785-4d1ed9e102b8"))
IReferenceArray<struct ABI::Windows::Foundation::Numerics::Matrix3x2> : IReferenceArray_impl<struct ABI::Windows::Foundation::Numerics::Matrix3x2> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReferenceArray`1<Windows.Foundation.Numerics.Matrix3x2>"; }
};
typedef IReferenceArray<struct ABI::Windows::Foundation::Numerics::Matrix3x2> __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_t;
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_FWD_DEFINED__
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 ABI::Windows::Foundation::__FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_USE */

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Foundation {
namespace Numerics {
struct Matrix4x4;
} /*Numerics*/
} /*Foundation*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0087 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0087_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0087_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5583 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5583 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5583_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5583_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0088 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_USE
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("fc0d5a15-8f9d-5e8f-8828-aef2c2e25bad"))
IReferenceArray<struct ABI::Windows::Foundation::Numerics::Matrix4x4> : IReferenceArray_impl<struct ABI::Windows::Foundation::Numerics::Matrix4x4> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReferenceArray`1<Windows.Foundation.Numerics.Matrix4x4>"; }
};
typedef IReferenceArray<struct ABI::Windows::Foundation::Numerics::Matrix4x4> __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_t;
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_FWD_DEFINED__
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 ABI::Windows::Foundation::__FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0088 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0088_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0088_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5584 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5584 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5584_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5584_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0089 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_float_USE
#define DEF___FIReferenceArray_1_float_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6ab1ea83-cb41-5f99-92cc-23bd4336a1fb"))
IReferenceArray<float> : IReferenceArray_impl<float> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReferenceArray`1<Single>"; }
};
typedef IReferenceArray<float> __FIReferenceArray_1_float_t;
#define ____FIReferenceArray_1_float_FWD_DEFINED__
#define __FIReferenceArray_1_float ABI::Windows::Foundation::__FIReferenceArray_1_float_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReferenceArray_1_float_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0089 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0089_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0089_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5585 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5585 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5585_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5585_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0090 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_int_USE
#define DEF___FIReferenceArray_1_int_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a6d080a5-b087-5bc2-9a9f-5cd687b4d1f7"))
IReferenceArray<int> : IReferenceArray_impl<int> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReferenceArray`1<Int32>"; }
};
typedef IReferenceArray<int> __FIReferenceArray_1_int_t;
#define ____FIReferenceArray_1_int_FWD_DEFINED__
#define __FIReferenceArray_1_int ABI::Windows::Foundation::__FIReferenceArray_1_int_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReferenceArray_1_int_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0090 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0090_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0090_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5586 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5586 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5586_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5586_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0091 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_boolean_USE
#define DEF___FIReferenceArray_1_boolean_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("e8e72666-48cc-593f-ba85-2663496956e3"))
IReferenceArray<bool> : IReferenceArray_impl<ABI::Windows::Foundation::Internal::AggregateType<bool, boolean>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReferenceArray`1<Boolean>"; }
};
typedef IReferenceArray<bool> __FIReferenceArray_1_boolean_t;
#define ____FIReferenceArray_1_boolean_FWD_DEFINED__
#define __FIReferenceArray_1_boolean ABI::Windows::Foundation::__FIReferenceArray_1_boolean_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReferenceArray_1_boolean_USE */

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
struct ColorManagementSimpleProfile;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0091 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0091_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0091_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5587 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5587 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5587_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5587_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0092 */
/* [local] */ 

#ifndef DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_USE
#define DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("41db10c7-f02c-5d7f-a12e-4e05047388e7"))
IReference<struct ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile> : IReference_impl<struct ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReference`1<Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile>"; }
};
typedef IReference<struct ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile> __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_t;
#define ____FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_FWD_DEFINED__
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile ABI::Windows::Foundation::__FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_USE */

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Graphics {
namespace Effects {
interface IGraphicsEffectSource;
} /*Effects*/
} /*Graphics*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0092 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0092_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0092_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5588 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5588 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5588_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5588_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0093 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#define DEF___FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("c50f44f2-b5b9-50e5-b493-a967ccc21dd2"))
IIterator<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> : IIterator_impl<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Graphics.Effects.IGraphicsEffectSource>"; }
};
typedef IIterator<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t;
#define ____FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0093 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0093_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0093_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5589 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5589 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5589_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5589_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0094 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#define DEF___FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("42924784-b65c-5e5f-9ea2-d50dcf427e65"))
IIterable<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> : IIterable_impl<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Graphics.Effects.IGraphicsEffectSource>"; }
};
typedef IIterable<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t;
#define ____FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0094 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0094_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0094_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5590 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5590 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5590_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5590_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0095 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#define DEF___FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("74afa1ad-285c-5bc4-9936-4338f19d7979"))
IVectorView<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> : IVectorView_impl<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Graphics.Effects.IGraphicsEffectSource>"; }
};
typedef IVectorView<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t;
#define ____FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0095 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0095_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0095_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5591 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5591 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5591_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5591_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0096 */
/* [local] */ 

#ifndef DEF___FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#define DEF___FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("b5a2f91f-1f97-50ef-ba3f-27aecbfb6d0a"))
IVector<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> : IVector_impl<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.Graphics.Effects.IGraphicsEffectSource>"; }
};
typedef IVector<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t;
#define ____FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE */
#pragma warning(push)
#pragma warning(disable:4668) 
#pragma warning(disable:4001) 
#pragma once
#pragma warning(pop)
#if defined(__cplusplus)
namespace ABI { namespace Microsoft { namespace Graphics { namespace Canvas { namespace Numerics = ::ABI::Windows::Foundation::Numerics; } } } }
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode
    {
        CanvasAlphaMode_Premultiplied	= ( int  )0,
        CanvasAlphaMode_Straight	= ( int  )1,
        CanvasAlphaMode_Ignore	= ( int  )2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing
    {
        CanvasAntialiasing_Antialiased	= ( int  )0,
        CanvasAntialiasing_Aliased	= ( int  )1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend
    {
        CanvasBlend_SourceOver	= ( int  )0,
        CanvasBlend_Copy	= ( int  )1,
        CanvasBlend_Min	= ( int  )2,
        CanvasBlend_Add	= ( int  )3
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision
    {
        CanvasBufferPrecision_Precision8UIntNormalized	= ( int  )0,
        CanvasBufferPrecision_Precision8UIntNormalizedSrgb	= ( int  )1,
        CanvasBufferPrecision_Precision16UIntNormalized	= ( int  )2,
        CanvasBufferPrecision_Precision16Float	= ( int  )3,
        CanvasBufferPrecision_Precision32Float	= ( int  )4
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace
    {
        CanvasColorSpace_Custom	= ( int  )0,
        CanvasColorSpace_Srgb	= ( int  )1,
        CanvasColorSpace_ScRgb	= ( int  )2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite
    {
        CanvasComposite_SourceOver	= ( int  )0,
        CanvasComposite_DestinationOver	= ( int  )1,
        CanvasComposite_SourceIn	= ( int  )2,
        CanvasComposite_DestinationIn	= ( int  )3,
        CanvasComposite_SourceOut	= ( int  )4,
        CanvasComposite_DestinationOut	= ( int  )5,
        CanvasComposite_SourceAtop	= ( int  )6,
        CanvasComposite_DestinationAtop	= ( int  )7,
        CanvasComposite_Xor	= ( int  )8,
        CanvasComposite_Add	= ( int  )9,
        CanvasComposite_Copy	= ( int  )10,
        CanvasComposite_BoundedCopy	= ( int  )11,
        CanvasComposite_MaskInvert	= ( int  )12
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel
    {
        CanvasDebugLevel_None	= ( int  )0,
        CanvasDebugLevel_Error	= ( int  )1,
        CanvasDebugLevel_Warning	= ( int  )2,
        CanvasDebugLevel_Information	= ( int  )3
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior
    {
        CanvasEdgeBehavior_Clamp	= ( int  )0,
        CanvasEdgeBehavior_Wrap	= ( int  )1,
        CanvasEdgeBehavior_Mirror	= ( int  )2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation
    {
        CanvasImageInterpolation_NearestNeighbor	= ( int  )0,
        CanvasImageInterpolation_Linear	= ( int  )1,
        CanvasImageInterpolation_Cubic	= ( int  )2,
        CanvasImageInterpolation_MultiSampleLinear	= ( int  )3,
        CanvasImageInterpolation_Anisotropic	= ( int  )4,
        CanvasImageInterpolation_HighQualityCubic	= ( int  )5
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions
    {
        CanvasLayerOptions_None	= 0,
        CanvasLayerOptions_InitializeFromBackground	= 1,
        CanvasLayerOptions_IgnoreAlpha	= 2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions;


#endif /* end if !defined(__cplusplus) */


#else
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
#if defined(MIDL_ENUM)
typedef MIDL_ENUM CanvasLayerOptions CanvasLayerOptions;
#else
typedef enum class CanvasLayerOptions CanvasLayerOptions;
#endif
DEFINE_ENUM_FLAG_OPERATORS(CanvasLayerOptions)
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits
    {
        CanvasUnits_Dips	= ( int  )0,
        CanvasUnits_Pixels	= ( int  )1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize
    {
        CanvasArcSize_Small	= ( int  )0,
        CanvasArcSize_Large	= ( int  )1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle
    {
        CanvasCapStyle_Flat	= ( int  )0,
        CanvasCapStyle_Square	= ( int  )1,
        CanvasCapStyle_Round	= ( int  )2,
        CanvasCapStyle_Triangle	= ( int  )3
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle
    {
        CanvasDashStyle_Solid	= ( int  )0,
        CanvasDashStyle_Dash	= ( int  )1,
        CanvasDashStyle_Dot	= ( int  )2,
        CanvasDashStyle_DashDot	= ( int  )3,
        CanvasDashStyle_DashDotDot	= ( int  )4
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill
    {
        CanvasFigureFill_Default	= ( int  )0,
        CanvasFigureFill_DoesNotAffectFills	= ( int  )1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop
    {
        CanvasFigureLoop_Open	= ( int  )0,
        CanvasFigureLoop_Closed	= ( int  )1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions
    {
        CanvasFigureSegmentOptions_None	= 0,
        CanvasFigureSegmentOptions_ForceUnstroked	= 0x1,
        CanvasFigureSegmentOptions_ForceRoundLineJoin	= 0x2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions;


#endif /* end if !defined(__cplusplus) */


#else
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Geometry {
#if defined(MIDL_ENUM)
typedef MIDL_ENUM CanvasFigureSegmentOptions CanvasFigureSegmentOptions;
#else
typedef enum class CanvasFigureSegmentOptions CanvasFigureSegmentOptions;
#endif
DEFINE_ENUM_FLAG_OPERATORS(CanvasFigureSegmentOptions)
} /*Geometry*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination
    {
        CanvasFilledRegionDetermination_Alternate	= ( int  )0,
        CanvasFilledRegionDetermination_Winding	= ( int  )1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine
    {
        CanvasGeometryCombine_Union	= ( int  )0,
        CanvasGeometryCombine_Intersect	= ( int  )1,
        CanvasGeometryCombine_Xor	= ( int  )2,
        CanvasGeometryCombine_Exclude	= ( int  )3
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation
    {
        CanvasGeometryRelation_Disjoint	= ( int  )0,
        CanvasGeometryRelation_Contained	= ( int  )1,
        CanvasGeometryRelation_Contains	= ( int  )2,
        CanvasGeometryRelation_Overlap	= ( int  )3
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification
    {
        CanvasGeometrySimplification_CubicsAndLines	= ( int  )0,
        CanvasGeometrySimplification_Lines	= ( int  )1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin
    {
        CanvasLineJoin_Miter	= ( int  )0,
        CanvasLineJoin_Bevel	= ( int  )1,
        CanvasLineJoin_Round	= ( int  )2,
        CanvasLineJoin_MiterOrBevel	= ( int  )3
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior
    {
        CanvasStrokeTransformBehavior_Normal	= ( int  )0,
        CanvasStrokeTransformBehavior_Fixed	= ( int  )1,
        CanvasStrokeTransformBehavior_Hairline	= ( int  )2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection
    {
        CanvasSweepDirection_CounterClockwise	= ( int  )0,
        CanvasSweepDirection_Clockwise	= ( int  )1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions
    {
        CanvasDrawTextOptions_Default	= 0,
        CanvasDrawTextOptions_NoPixelSnap	= 0x1,
        CanvasDrawTextOptions_Clip	= 0x2,
        CanvasDrawTextOptions_EnableColorFont	= 0x4
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions;


#endif /* end if !defined(__cplusplus) */


#else
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
#if defined(MIDL_ENUM)
typedef MIDL_ENUM CanvasDrawTextOptions CanvasDrawTextOptions;
#else
typedef enum class CanvasDrawTextOptions CanvasDrawTextOptions;
#endif
DEFINE_ENUM_FLAG_OPERATORS(CanvasDrawTextOptions)
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing
    {
        CanvasTextAntialiasing_Auto	= ( int  )0,
        CanvasTextAntialiasing_ClearType	= ( int  )1,
        CanvasTextAntialiasing_Grayscale	= ( int  )2,
        CanvasTextAntialiasing_Aliased	= ( int  )3
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing;


#endif /* end if !defined(__cplusplus) */


#endif
#define PIXEL_FORMAT(x) ::ABI::Windows::Graphics::DirectX::DirectXPixelFormat_##x
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode
    {
        EffectBorderMode_Soft	= 0,
        EffectBorderMode_Hard	= 1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent
    {
        ColorManagementRenderingIntent_Perceptual	= 0,
        ColorManagementRenderingIntent_RelativeColorimetric	= 1,
        ColorManagementRenderingIntent_Saturation	= 2,
        ColorManagementRenderingIntent_AbsoluteColorimetric	= 3
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization
    {
        EffectOptimization_Speed	= 0,
        EffectOptimization_Balanced	= 1,
        EffectOptimization_Quality	= 2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect
    {
        EffectChannelSelect_Red	= 0,
        EffectChannelSelect_Green	= 1,
        EffectChannelSelect_Blue	= 2,
        EffectChannelSelect_Alpha	= 3
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace
    {
        EffectHueColorSpace_Hsv	= 0,
        EffectHueColorSpace_Hsl	= 1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasLock;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding
    {
        CanvasDpiRounding_Floor	= 0,
        CanvasDpiRounding_Round	= 1,
        CanvasDpiRounding_Ceiling	= 2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasResourceCreator[] = L"Microsoft.Graphics.Canvas.ICanvasResourceCreator";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0096 */
/* [local] */ 


#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasAlphaMode
                    {
                        Premultiplied	= ( int  )0,
                        Straight	= ( int  )1,
                        Ignore	= ( int  )2
                    } ;

                const MIDL_ENUM CanvasAlphaMode CanvasAlphaMode_Premultiplied = CanvasAlphaMode::Premultiplied;
                const MIDL_ENUM CanvasAlphaMode CanvasAlphaMode_Straight = CanvasAlphaMode::Straight;
                const MIDL_ENUM CanvasAlphaMode CanvasAlphaMode_Ignore = CanvasAlphaMode::Ignore;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasAlphaMode CanvasAlphaMode;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasAntialiasing
                    {
                        Antialiased	= ( int  )0,
                        Aliased	= ( int  )1
                    } ;

                const MIDL_ENUM CanvasAntialiasing CanvasAntialiasing_Antialiased = CanvasAntialiasing::Antialiased;
                const MIDL_ENUM CanvasAntialiasing CanvasAntialiasing_Aliased = CanvasAntialiasing::Aliased;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasAntialiasing CanvasAntialiasing;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasBlend
                    {
                        SourceOver	= ( int  )0,
                        Copy	= ( int  )1,
                        Min	= ( int  )2,
                        Add	= ( int  )3
                    } ;

                const MIDL_ENUM CanvasBlend CanvasBlend_SourceOver = CanvasBlend::SourceOver;
                const MIDL_ENUM CanvasBlend CanvasBlend_Copy = CanvasBlend::Copy;
                const MIDL_ENUM CanvasBlend CanvasBlend_Min = CanvasBlend::Min;
                const MIDL_ENUM CanvasBlend CanvasBlend_Add = CanvasBlend::Add;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasBlend CanvasBlend;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasBufferPrecision
                    {
                        Precision8UIntNormalized	= ( int  )0,
                        Precision8UIntNormalizedSrgb	= ( int  )1,
                        Precision16UIntNormalized	= ( int  )2,
                        Precision16Float	= ( int  )3,
                        Precision32Float	= ( int  )4
                    } ;

                const MIDL_ENUM CanvasBufferPrecision CanvasBufferPrecision_Precision8UIntNormalized = CanvasBufferPrecision::Precision8UIntNormalized;
                const MIDL_ENUM CanvasBufferPrecision CanvasBufferPrecision_Precision8UIntNormalizedSrgb = CanvasBufferPrecision::Precision8UIntNormalizedSrgb;
                const MIDL_ENUM CanvasBufferPrecision CanvasBufferPrecision_Precision16UIntNormalized = CanvasBufferPrecision::Precision16UIntNormalized;
                const MIDL_ENUM CanvasBufferPrecision CanvasBufferPrecision_Precision16Float = CanvasBufferPrecision::Precision16Float;
                const MIDL_ENUM CanvasBufferPrecision CanvasBufferPrecision_Precision32Float = CanvasBufferPrecision::Precision32Float;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasBufferPrecision CanvasBufferPrecision;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasColorSpace
                    {
                        Custom	= ( int  )0,
                        Srgb	= ( int  )1,
                        ScRgb	= ( int  )2
                    } ;

                const MIDL_ENUM CanvasColorSpace CanvasColorSpace_Custom = CanvasColorSpace::Custom;
                const MIDL_ENUM CanvasColorSpace CanvasColorSpace_Srgb = CanvasColorSpace::Srgb;
                const MIDL_ENUM CanvasColorSpace CanvasColorSpace_ScRgb = CanvasColorSpace::ScRgb;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasColorSpace CanvasColorSpace;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasComposite
                    {
                        SourceOver	= ( int  )0,
                        DestinationOver	= ( int  )1,
                        SourceIn	= ( int  )2,
                        DestinationIn	= ( int  )3,
                        SourceOut	= ( int  )4,
                        DestinationOut	= ( int  )5,
                        SourceAtop	= ( int  )6,
                        DestinationAtop	= ( int  )7,
                        Xor	= ( int  )8,
                        Add	= ( int  )9,
                        Copy	= ( int  )10,
                        BoundedCopy	= ( int  )11,
                        MaskInvert	= ( int  )12
                    } ;

                const MIDL_ENUM CanvasComposite CanvasComposite_SourceOver = CanvasComposite::SourceOver;
                const MIDL_ENUM CanvasComposite CanvasComposite_DestinationOver = CanvasComposite::DestinationOver;
                const MIDL_ENUM CanvasComposite CanvasComposite_SourceIn = CanvasComposite::SourceIn;
                const MIDL_ENUM CanvasComposite CanvasComposite_DestinationIn = CanvasComposite::DestinationIn;
                const MIDL_ENUM CanvasComposite CanvasComposite_SourceOut = CanvasComposite::SourceOut;
                const MIDL_ENUM CanvasComposite CanvasComposite_DestinationOut = CanvasComposite::DestinationOut;
                const MIDL_ENUM CanvasComposite CanvasComposite_SourceAtop = CanvasComposite::SourceAtop;
                const MIDL_ENUM CanvasComposite CanvasComposite_DestinationAtop = CanvasComposite::DestinationAtop;
                const MIDL_ENUM CanvasComposite CanvasComposite_Xor = CanvasComposite::Xor;
                const MIDL_ENUM CanvasComposite CanvasComposite_Add = CanvasComposite::Add;
                const MIDL_ENUM CanvasComposite CanvasComposite_Copy = CanvasComposite::Copy;
                const MIDL_ENUM CanvasComposite CanvasComposite_BoundedCopy = CanvasComposite::BoundedCopy;
                const MIDL_ENUM CanvasComposite CanvasComposite_MaskInvert = CanvasComposite::MaskInvert;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasComposite CanvasComposite;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasDebugLevel
                    {
                        None	= ( int  )0,
                        Error	= ( int  )1,
                        Warning	= ( int  )2,
                        Information	= ( int  )3
                    } ;

                const MIDL_ENUM CanvasDebugLevel CanvasDebugLevel_None = CanvasDebugLevel::None;
                const MIDL_ENUM CanvasDebugLevel CanvasDebugLevel_Error = CanvasDebugLevel::Error;
                const MIDL_ENUM CanvasDebugLevel CanvasDebugLevel_Warning = CanvasDebugLevel::Warning;
                const MIDL_ENUM CanvasDebugLevel CanvasDebugLevel_Information = CanvasDebugLevel::Information;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasDebugLevel CanvasDebugLevel;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasEdgeBehavior
                    {
                        Clamp	= ( int  )0,
                        Wrap	= ( int  )1,
                        Mirror	= ( int  )2
                    } ;

                const MIDL_ENUM CanvasEdgeBehavior CanvasEdgeBehavior_Clamp = CanvasEdgeBehavior::Clamp;
                const MIDL_ENUM CanvasEdgeBehavior CanvasEdgeBehavior_Wrap = CanvasEdgeBehavior::Wrap;
                const MIDL_ENUM CanvasEdgeBehavior CanvasEdgeBehavior_Mirror = CanvasEdgeBehavior::Mirror;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasEdgeBehavior CanvasEdgeBehavior;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasImageInterpolation
                    {
                        NearestNeighbor	= ( int  )0,
                        Linear	= ( int  )1,
                        Cubic	= ( int  )2,
                        MultiSampleLinear	= ( int  )3,
                        Anisotropic	= ( int  )4,
                        HighQualityCubic	= ( int  )5
                    } ;

                const MIDL_ENUM CanvasImageInterpolation CanvasImageInterpolation_NearestNeighbor = CanvasImageInterpolation::NearestNeighbor;
                const MIDL_ENUM CanvasImageInterpolation CanvasImageInterpolation_Linear = CanvasImageInterpolation::Linear;
                const MIDL_ENUM CanvasImageInterpolation CanvasImageInterpolation_Cubic = CanvasImageInterpolation::Cubic;
                const MIDL_ENUM CanvasImageInterpolation CanvasImageInterpolation_MultiSampleLinear = CanvasImageInterpolation::MultiSampleLinear;
                const MIDL_ENUM CanvasImageInterpolation CanvasImageInterpolation_Anisotropic = CanvasImageInterpolation::Anisotropic;
                const MIDL_ENUM CanvasImageInterpolation CanvasImageInterpolation_HighQualityCubic = CanvasImageInterpolation::HighQualityCubic;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasImageInterpolation CanvasImageInterpolation;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasLayerOptions
                    {
                        None	= 0,
                        InitializeFromBackground	= 1,
                        IgnoreAlpha	= 2
                    } ;

                const MIDL_ENUM CanvasLayerOptions CanvasLayerOptions_None = CanvasLayerOptions::None;
                const MIDL_ENUM CanvasLayerOptions CanvasLayerOptions_InitializeFromBackground = CanvasLayerOptions::InitializeFromBackground;
                const MIDL_ENUM CanvasLayerOptions CanvasLayerOptions_IgnoreAlpha = CanvasLayerOptions::IgnoreAlpha;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasLayerOptions CanvasLayerOptions;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasUnits
                    {
                        Dips	= ( int  )0,
                        Pixels	= ( int  )1
                    } ;

                const MIDL_ENUM CanvasUnits CanvasUnits_Dips = CanvasUnits::Dips;
                const MIDL_ENUM CanvasUnits CanvasUnits_Pixels = CanvasUnits::Pixels;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasUnits CanvasUnits;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasArcSize
                        {
                            Small	= ( int  )0,
                            Large	= ( int  )1
                        } ;

                    const MIDL_ENUM CanvasArcSize CanvasArcSize_Small = CanvasArcSize::Small;
                    const MIDL_ENUM CanvasArcSize CanvasArcSize_Large = CanvasArcSize::Large;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasArcSize CanvasArcSize;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasCapStyle
                        {
                            Flat	= ( int  )0,
                            Square	= ( int  )1,
                            Round	= ( int  )2,
                            Triangle	= ( int  )3
                        } ;

                    const MIDL_ENUM CanvasCapStyle CanvasCapStyle_Flat = CanvasCapStyle::Flat;
                    const MIDL_ENUM CanvasCapStyle CanvasCapStyle_Square = CanvasCapStyle::Square;
                    const MIDL_ENUM CanvasCapStyle CanvasCapStyle_Round = CanvasCapStyle::Round;
                    const MIDL_ENUM CanvasCapStyle CanvasCapStyle_Triangle = CanvasCapStyle::Triangle;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasCapStyle CanvasCapStyle;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasDashStyle
                        {
                            Solid	= ( int  )0,
                            Dash	= ( int  )1,
                            Dot	= ( int  )2,
                            DashDot	= ( int  )3,
                            DashDotDot	= ( int  )4
                        } ;

                    const MIDL_ENUM CanvasDashStyle CanvasDashStyle_Solid = CanvasDashStyle::Solid;
                    const MIDL_ENUM CanvasDashStyle CanvasDashStyle_Dash = CanvasDashStyle::Dash;
                    const MIDL_ENUM CanvasDashStyle CanvasDashStyle_Dot = CanvasDashStyle::Dot;
                    const MIDL_ENUM CanvasDashStyle CanvasDashStyle_DashDot = CanvasDashStyle::DashDot;
                    const MIDL_ENUM CanvasDashStyle CanvasDashStyle_DashDotDot = CanvasDashStyle::DashDotDot;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasDashStyle CanvasDashStyle;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasFigureFill
                        {
                            Default	= ( int  )0,
                            DoesNotAffectFills	= ( int  )1
                        } ;

                    const MIDL_ENUM CanvasFigureFill CanvasFigureFill_Default = CanvasFigureFill::Default;
                    const MIDL_ENUM CanvasFigureFill CanvasFigureFill_DoesNotAffectFills = CanvasFigureFill::DoesNotAffectFills;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasFigureFill CanvasFigureFill;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasFigureLoop
                        {
                            Open	= ( int  )0,
                            Closed	= ( int  )1
                        } ;

                    const MIDL_ENUM CanvasFigureLoop CanvasFigureLoop_Open = CanvasFigureLoop::Open;
                    const MIDL_ENUM CanvasFigureLoop CanvasFigureLoop_Closed = CanvasFigureLoop::Closed;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasFigureLoop CanvasFigureLoop;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasFigureSegmentOptions
                        {
                            None	= 0,
                            ForceUnstroked	= 0x1,
                            ForceRoundLineJoin	= 0x2
                        } ;

                    const MIDL_ENUM CanvasFigureSegmentOptions CanvasFigureSegmentOptions_None = CanvasFigureSegmentOptions::None;
                    const MIDL_ENUM CanvasFigureSegmentOptions CanvasFigureSegmentOptions_ForceUnstroked = CanvasFigureSegmentOptions::ForceUnstroked;
                    const MIDL_ENUM CanvasFigureSegmentOptions CanvasFigureSegmentOptions_ForceRoundLineJoin = CanvasFigureSegmentOptions::ForceRoundLineJoin;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasFigureSegmentOptions CanvasFigureSegmentOptions;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasFilledRegionDetermination
                        {
                            Alternate	= ( int  )0,
                            Winding	= ( int  )1
                        } ;

                    const MIDL_ENUM CanvasFilledRegionDetermination CanvasFilledRegionDetermination_Alternate = CanvasFilledRegionDetermination::Alternate;
                    const MIDL_ENUM CanvasFilledRegionDetermination CanvasFilledRegionDetermination_Winding = CanvasFilledRegionDetermination::Winding;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasFilledRegionDetermination CanvasFilledRegionDetermination;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasGeometryCombine
                        {
                            Union	= ( int  )0,
                            Intersect	= ( int  )1,
                            Xor	= ( int  )2,
                            Exclude	= ( int  )3
                        } ;

                    const MIDL_ENUM CanvasGeometryCombine CanvasGeometryCombine_Union = CanvasGeometryCombine::Union;
                    const MIDL_ENUM CanvasGeometryCombine CanvasGeometryCombine_Intersect = CanvasGeometryCombine::Intersect;
                    const MIDL_ENUM CanvasGeometryCombine CanvasGeometryCombine_Xor = CanvasGeometryCombine::Xor;
                    const MIDL_ENUM CanvasGeometryCombine CanvasGeometryCombine_Exclude = CanvasGeometryCombine::Exclude;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasGeometryCombine CanvasGeometryCombine;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasGeometryRelation
                        {
                            Disjoint	= ( int  )0,
                            Contained	= ( int  )1,
                            Contains	= ( int  )2,
                            Overlap	= ( int  )3
                        } ;

                    const MIDL_ENUM CanvasGeometryRelation CanvasGeometryRelation_Disjoint = CanvasGeometryRelation::Disjoint;
                    const MIDL_ENUM CanvasGeometryRelation CanvasGeometryRelation_Contained = CanvasGeometryRelation::Contained;
                    const MIDL_ENUM CanvasGeometryRelation CanvasGeometryRelation_Contains = CanvasGeometryRelation::Contains;
                    const MIDL_ENUM CanvasGeometryRelation CanvasGeometryRelation_Overlap = CanvasGeometryRelation::Overlap;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasGeometryRelation CanvasGeometryRelation;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasGeometrySimplification
                        {
                            CubicsAndLines	= ( int  )0,
                            Lines	= ( int  )1
                        } ;

                    const MIDL_ENUM CanvasGeometrySimplification CanvasGeometrySimplification_CubicsAndLines = CanvasGeometrySimplification::CubicsAndLines;
                    const MIDL_ENUM CanvasGeometrySimplification CanvasGeometrySimplification_Lines = CanvasGeometrySimplification::Lines;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasGeometrySimplification CanvasGeometrySimplification;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasLineJoin
                        {
                            Miter	= ( int  )0,
                            Bevel	= ( int  )1,
                            Round	= ( int  )2,
                            MiterOrBevel	= ( int  )3
                        } ;

                    const MIDL_ENUM CanvasLineJoin CanvasLineJoin_Miter = CanvasLineJoin::Miter;
                    const MIDL_ENUM CanvasLineJoin CanvasLineJoin_Bevel = CanvasLineJoin::Bevel;
                    const MIDL_ENUM CanvasLineJoin CanvasLineJoin_Round = CanvasLineJoin::Round;
                    const MIDL_ENUM CanvasLineJoin CanvasLineJoin_MiterOrBevel = CanvasLineJoin::MiterOrBevel;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasLineJoin CanvasLineJoin;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasStrokeTransformBehavior
                        {
                            Normal	= ( int  )0,
                            Fixed	= ( int  )1,
                            Hairline	= ( int  )2
                        } ;

                    const MIDL_ENUM CanvasStrokeTransformBehavior CanvasStrokeTransformBehavior_Normal = CanvasStrokeTransformBehavior::Normal;
                    const MIDL_ENUM CanvasStrokeTransformBehavior CanvasStrokeTransformBehavior_Fixed = CanvasStrokeTransformBehavior::Fixed;
                    const MIDL_ENUM CanvasStrokeTransformBehavior CanvasStrokeTransformBehavior_Hairline = CanvasStrokeTransformBehavior::Hairline;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasStrokeTransformBehavior CanvasStrokeTransformBehavior;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasSweepDirection
                        {
                            CounterClockwise	= ( int  )0,
                            Clockwise	= ( int  )1
                        } ;

                    const MIDL_ENUM CanvasSweepDirection CanvasSweepDirection_CounterClockwise = CanvasSweepDirection::CounterClockwise;
                    const MIDL_ENUM CanvasSweepDirection CanvasSweepDirection_Clockwise = CanvasSweepDirection::Clockwise;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasSweepDirection CanvasSweepDirection;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasDrawTextOptions
                        {
                            Default	= 0,
                            NoPixelSnap	= 0x1,
                            Clip	= 0x2,
                            EnableColorFont	= 0x4
                        } ;

                    const MIDL_ENUM CanvasDrawTextOptions CanvasDrawTextOptions_Default = CanvasDrawTextOptions::Default;
                    const MIDL_ENUM CanvasDrawTextOptions CanvasDrawTextOptions_NoPixelSnap = CanvasDrawTextOptions::NoPixelSnap;
                    const MIDL_ENUM CanvasDrawTextOptions CanvasDrawTextOptions_Clip = CanvasDrawTextOptions::Clip;
                    const MIDL_ENUM CanvasDrawTextOptions CanvasDrawTextOptions_EnableColorFont = CanvasDrawTextOptions::EnableColorFont;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasDrawTextOptions CanvasDrawTextOptions;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasTextAntialiasing
                        {
                            Auto	= ( int  )0,
                            ClearType	= ( int  )1,
                            Grayscale	= ( int  )2,
                            Aliased	= ( int  )3
                        } ;

                    const MIDL_ENUM CanvasTextAntialiasing CanvasTextAntialiasing_Auto = CanvasTextAntialiasing::Auto;
                    const MIDL_ENUM CanvasTextAntialiasing CanvasTextAntialiasing_ClearType = CanvasTextAntialiasing::ClearType;
                    const MIDL_ENUM CanvasTextAntialiasing CanvasTextAntialiasing_Grayscale = CanvasTextAntialiasing::Grayscale;
                    const MIDL_ENUM CanvasTextAntialiasing CanvasTextAntialiasing_Aliased = CanvasTextAntialiasing::Aliased;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasTextAntialiasing CanvasTextAntialiasing;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM EffectBorderMode
                        {
                            Soft	= 0,
                            Hard	= 1
                        } ;

                    const MIDL_ENUM EffectBorderMode EffectBorderMode_Soft = EffectBorderMode::Soft;
                    const MIDL_ENUM EffectBorderMode EffectBorderMode_Hard = EffectBorderMode::Hard;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM EffectBorderMode EffectBorderMode;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM ColorManagementRenderingIntent
                        {
                            Perceptual	= 0,
                            RelativeColorimetric	= 1,
                            Saturation	= 2,
                            AbsoluteColorimetric	= 3
                        } ;

                    const MIDL_ENUM ColorManagementRenderingIntent ColorManagementRenderingIntent_Perceptual = ColorManagementRenderingIntent::Perceptual;
                    const MIDL_ENUM ColorManagementRenderingIntent ColorManagementRenderingIntent_RelativeColorimetric = ColorManagementRenderingIntent::RelativeColorimetric;
                    const MIDL_ENUM ColorManagementRenderingIntent ColorManagementRenderingIntent_Saturation = ColorManagementRenderingIntent::Saturation;
                    const MIDL_ENUM ColorManagementRenderingIntent ColorManagementRenderingIntent_AbsoluteColorimetric = ColorManagementRenderingIntent::AbsoluteColorimetric;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM ColorManagementRenderingIntent ColorManagementRenderingIntent;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM EffectOptimization
                        {
                            Speed	= 0,
                            Balanced	= 1,
                            Quality	= 2
                        } ;

                    const MIDL_ENUM EffectOptimization EffectOptimization_Speed = EffectOptimization::Speed;
                    const MIDL_ENUM EffectOptimization EffectOptimization_Balanced = EffectOptimization::Balanced;
                    const MIDL_ENUM EffectOptimization EffectOptimization_Quality = EffectOptimization::Quality;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM EffectOptimization EffectOptimization;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM EffectChannelSelect
                        {
                            Red	= 0,
                            Green	= 1,
                            Blue	= 2,
                            Alpha	= 3
                        } ;

                    const MIDL_ENUM EffectChannelSelect EffectChannelSelect_Red = EffectChannelSelect::Red;
                    const MIDL_ENUM EffectChannelSelect EffectChannelSelect_Green = EffectChannelSelect::Green;
                    const MIDL_ENUM EffectChannelSelect EffectChannelSelect_Blue = EffectChannelSelect::Blue;
                    const MIDL_ENUM EffectChannelSelect EffectChannelSelect_Alpha = EffectChannelSelect::Alpha;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM EffectChannelSelect EffectChannelSelect;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM EffectHueColorSpace
                        {
                            Hsv	= 0,
                            Hsl	= 1
                        } ;

                    const MIDL_ENUM EffectHueColorSpace EffectHueColorSpace_Hsv = EffectHueColorSpace::Hsv;
                    const MIDL_ENUM EffectHueColorSpace EffectHueColorSpace_Hsl = EffectHueColorSpace::Hsl;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM EffectHueColorSpace EffectHueColorSpace;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif


#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasDpiRounding
                    {
                        Floor	= 0,
                        Round	= 1,
                        Ceiling	= 2
                    } ;

                const MIDL_ENUM CanvasDpiRounding CanvasDpiRounding_Floor = CanvasDpiRounding::Floor;
                const MIDL_ENUM CanvasDpiRounding CanvasDpiRounding_Round = CanvasDpiRounding::Round;
                const MIDL_ENUM CanvasDpiRounding CanvasDpiRounding_Ceiling = CanvasDpiRounding::Ceiling;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasDpiRounding CanvasDpiRounding;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0096_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0096_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("8F6D8AA8-492F-4BC6-B3D0-E7F5EAE84B11")
                    ICanvasResourceCreator : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasResourceCreator = __uuidof(ICanvasResourceCreator);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0097 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi[] = L"Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0097 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0097_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0097_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("1A75B512-E9FA-49E6-A876-38CAE194013E")
                    ICanvasResourceCreatorWithDpi : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Dpi( 
                            /* [out][retval] */ float *dpi) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ConvertPixelsToDips( 
                            /* [in] */ INT32 pixels,
                            /* [out][retval] */ float *dips) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ConvertDipsToPixels( 
                            /* [in] */ float dips,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasDpiRounding dpiRounding,
                            /* [out][retval] */ INT32 *pixels) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasResourceCreatorWithDpi = __uuidof(ICanvasResourceCreatorWithDpi);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [out][retval] */ float *dpi);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertPixelsToDips )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [in] */ INT32 pixels,
            /* [out][retval] */ float *dips);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertDipsToPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [in] */ float dips,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding dpiRounding,
            /* [out][retval] */ INT32 *pixels);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_get_Dpi(This,dpi)	\
    ( (This)->lpVtbl -> get_Dpi(This,dpi) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_ConvertPixelsToDips(This,pixels,dips)	\
    ( (This)->lpVtbl -> ConvertPixelsToDips(This,pixels,dips) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_ConvertDipsToPixels(This,dips,dpiRounding,pixels)	\
    ( (This)->lpVtbl -> ConvertDipsToPixels(This,dips,dpiRounding,pixels) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0098 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDeviceFactory[] = L"Microsoft.Graphics.Canvas.ICanvasDeviceFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0098 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0098_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0098_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasDeviceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("E2C2BF21-5418-43B9-A2DA-539E287C790F")
                    ICanvasDeviceFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateWithForceSoftwareRendererOption( 
                            /* [in] */ boolean forceSoftwareRenderer,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **canvasDevice) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasDeviceFactory = __uuidof(ICanvasDeviceFactory);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithForceSoftwareRendererOption )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
            /* [in] */ boolean forceSoftwareRenderer,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **canvasDevice);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_CreateWithForceSoftwareRendererOption(This,forceSoftwareRenderer,canvasDevice)	\
    ( (This)->lpVtbl -> CreateWithForceSoftwareRendererOption(This,forceSoftwareRenderer,canvasDevice) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0099 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDeviceStatics[] = L"Microsoft.Graphics.Canvas.ICanvasDeviceStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0099 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0099_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0099_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasDeviceStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("9B6E2B27-CD07-421A-8F69-0AE8A787FE8C")
                    ICanvasDeviceStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11Device( 
                            /* [in] */ ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice *direct3DDevice,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **canvasDevice) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetSharedDevice( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **canvasDevice) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetSharedDeviceWithForceSoftwareRenderer( 
                            /* [in] */ boolean forceSoftwareRenderer,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **canvasDevice) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DebugLevel( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasDebugLevel value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DebugLevel( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasDebugLevel *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasDeviceStatics = __uuidof(ICanvasDeviceStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice *direct3DDevice,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **canvasDevice);
        
        HRESULT ( STDMETHODCALLTYPE *GetSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **canvasDevice);
        
        HRESULT ( STDMETHODCALLTYPE *GetSharedDeviceWithForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [in] */ boolean forceSoftwareRenderer,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **canvasDevice);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DebugLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DebugLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_CreateFromDirect3D11Device(This,direct3DDevice,canvasDevice)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11Device(This,direct3DDevice,canvasDevice) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetSharedDevice(This,canvasDevice)	\
    ( (This)->lpVtbl -> GetSharedDevice(This,canvasDevice) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetSharedDeviceWithForceSoftwareRenderer(This,forceSoftwareRenderer,canvasDevice)	\
    ( (This)->lpVtbl -> GetSharedDeviceWithForceSoftwareRenderer(This,forceSoftwareRenderer,canvasDevice) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_put_DebugLevel(This,value)	\
    ( (This)->lpVtbl -> put_DebugLevel(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_get_DebugLevel(This,value)	\
    ( (This)->lpVtbl -> get_DebugLevel(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5592 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5592 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5592_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5592_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0101 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0101 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0101_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0101_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ef539eb5-aa23-573f-ba41-ccd7f3150c5b")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *sender,
            /* [in] */ IInspectable *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *sender,
            /* [in] */ IInspectable *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0102 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDevice[] = L"Microsoft.Graphics.Canvas.ICanvasDevice";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0102 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0102_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0102_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasDevice */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("A27F0B5D-EC2C-4D4F-948F-0AA1E95E33E6")
                    ICanvasDevice : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ForceSoftwareRenderer( 
                            /* [out][retval] */ boolean *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MaximumBitmapSizeInPixels( 
                            /* [out][retval] */ INT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE IsPixelFormatSupported( 
                            /* [in] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat pixelFormat,
                            /* [out][retval] */ boolean *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE IsBufferPrecisionSupported( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                            /* [out][retval] */ boolean *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MaximumCacheSize( 
                            /* [out][retval] */ UINT64 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MaximumCacheSize( 
                            /* [in] */ UINT64 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LowPriority( 
                            /* [out][retval] */ boolean *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LowPriority( 
                            /* [in] */ boolean value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_DeviceLost( 
                            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable *value,
                            /* [out][retval] */ EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_DeviceLost( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE IsDeviceLost( 
                            /* [in] */ int hresult,
                            /* [out][retval] */ boolean *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE RaiseDeviceLost( void) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE Lock( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasLock **lock) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasDevice = __uuidof(ICanvasDevice);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out][retval] */ boolean *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaximumBitmapSizeInPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out][retval] */ INT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *IsPixelFormatSupported )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat pixelFormat,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *IsBufferPrecisionSupported )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
            /* [out][retval] */ boolean *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaximumCacheSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out][retval] */ UINT64 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaximumCacheSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [in] */ UINT64 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LowPriority )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LowPriority )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [in] */ boolean value);
        
        HRESULT ( STDMETHODCALLTYPE *add_DeviceLost )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_DeviceLost )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *IsDeviceLost )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [in] */ int hresult,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *RaiseDeviceLost )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *Lock )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock **lock);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_get_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> get_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_get_MaximumBitmapSizeInPixels(This,value)	\
    ( (This)->lpVtbl -> get_MaximumBitmapSizeInPixels(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_IsPixelFormatSupported(This,pixelFormat,value)	\
    ( (This)->lpVtbl -> IsPixelFormatSupported(This,pixelFormat,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_IsBufferPrecisionSupported(This,bufferPrecision,value)	\
    ( (This)->lpVtbl -> IsBufferPrecisionSupported(This,bufferPrecision,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_get_MaximumCacheSize(This,value)	\
    ( (This)->lpVtbl -> get_MaximumCacheSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_put_MaximumCacheSize(This,value)	\
    ( (This)->lpVtbl -> put_MaximumCacheSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_get_LowPriority(This,value)	\
    ( (This)->lpVtbl -> get_LowPriority(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_put_LowPriority(This,value)	\
    ( (This)->lpVtbl -> put_LowPriority(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_add_DeviceLost(This,value,token)	\
    ( (This)->lpVtbl -> add_DeviceLost(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_remove_DeviceLost(This,token)	\
    ( (This)->lpVtbl -> remove_DeviceLost(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_IsDeviceLost(This,hresult,value)	\
    ( (This)->lpVtbl -> IsDeviceLost(This,hresult,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_RaiseDeviceLost(This)	\
    ( (This)->lpVtbl -> RaiseDeviceLost(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_Lock(This,lock)	\
    ( (This)->lpVtbl -> Lock(This,lock) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0103 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDevice_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDevice_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasDevice[] = L"Microsoft.Graphics.Canvas.CanvasDevice";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasLock[] = L"Microsoft.Graphics.Canvas.ICanvasLock";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0103 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0103_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0103_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasLock */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("7A0E8498-FBA9-4FB0-AA8C-6A48B5EE3E4F")
                    ICanvasLock : public IInspectable
                    {
                    public:
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasLock = __uuidof(ICanvasLock);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * This,
            /* [out] */ TrustLevel *trustLevel);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLockVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0104 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasLock_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasLock_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasLock[] = L"Microsoft.Graphics.Canvas.CanvasLock";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0104 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0104_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0104_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5593 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5593 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5593_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5593_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0105 */
/* [local] */ 

#ifndef DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision
#define DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0105 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0105_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0105_v0_0_s_ifspec;

#ifndef ____FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_INTERFACE_DEFINED__
#define ____FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_INTERFACE_DEFINED__

/* interface __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision */
/* [unique][uuid][object] */ 



/* interface __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8bff1f50-aef3-558e-a02b-589b6c0cfea8")
    __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ MIDL_ENUM ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision *value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecisionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This,
            /* [retval][out] */ enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision *value);
        
        END_INTERFACE
    } __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecisionVtbl;

    interface __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision
    {
        CONST_VTBL struct __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecisionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0106 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICanvasEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICanvasEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0106 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0106_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0106_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ICanvasEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("0EF96F8C-9B5E-4BF0-A399-AAD8CE53DB55")
                        ICanvasEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CacheOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CacheOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BufferPrecision( 
                                /* [out][retval] */ __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision **value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BufferPrecision( 
                                /* [in] */ __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE InvalidateSourceRectangle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                                /* [in] */ UINT32 sourceIndex,
                                /* [in] */ ABI::Windows::Foundation::Rect invalidRectangle) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetInvalidRectangles( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Windows::Foundation::Rect **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetRequiredSourceRectangle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Rect outputRectangle,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::ICanvasEffect *sourceEffect,
                                /* [in] */ UINT32 sourceIndex,
                                /* [in] */ ABI::Windows::Foundation::Rect sourceBounds,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetRequiredSourceRectangles( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Rect outputRectangle,
                                /* [in] */ UINT32 sourceEffectCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Effects::ICanvasEffect **sourceEffects,
                                /* [in] */ UINT32 sourceIndexCount,
                                /* [in][size_is] */ UINT32 *sourceIndices,
                                /* [in] */ UINT32 sourceBoundsCount,
                                /* [in][size_is] */ ABI::Windows::Foundation::Rect *sourceBounds,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Windows::Foundation::Rect **valueElements) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasEffect = __uuidof(ICanvasEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CacheOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BufferPrecision )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
            /* [out][retval] */ __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BufferPrecision )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
            /* [in] */ __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision *value);
        
        HRESULT ( STDMETHODCALLTYPE *InvalidateSourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ UINT32 sourceIndex,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect invalidRectangle);
        
        HRESULT ( STDMETHODCALLTYPE *GetInvalidRectangles )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CWindows_CFoundation_CRect **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetRequiredSourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect outputRectangle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect *sourceEffect,
            /* [in] */ UINT32 sourceIndex,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceBounds,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetRequiredSourceRectangles )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect outputRectangle,
            /* [in] */ UINT32 sourceEffectCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect **sourceEffects,
            /* [in] */ UINT32 sourceIndexCount,
            /* [in][size_is] */ UINT32 *sourceIndices,
            /* [in] */ UINT32 sourceBoundsCount,
            /* [in][size_is] */ __x_ABI_CWindows_CFoundation_CRect *sourceBounds,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CWindows_CFoundation_CRect **valueElements);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_get_CacheOutput(This,value)	\
    ( (This)->lpVtbl -> get_CacheOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_put_CacheOutput(This,value)	\
    ( (This)->lpVtbl -> put_CacheOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_get_BufferPrecision(This,value)	\
    ( (This)->lpVtbl -> get_BufferPrecision(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_put_BufferPrecision(This,value)	\
    ( (This)->lpVtbl -> put_BufferPrecision(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_InvalidateSourceRectangle(This,resourceCreator,sourceIndex,invalidRectangle)	\
    ( (This)->lpVtbl -> InvalidateSourceRectangle(This,resourceCreator,sourceIndex,invalidRectangle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_GetInvalidRectangles(This,resourceCreator,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetInvalidRectangles(This,resourceCreator,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_GetRequiredSourceRectangle(This,resourceCreator,outputRectangle,sourceEffect,sourceIndex,sourceBounds,value)	\
    ( (This)->lpVtbl -> GetRequiredSourceRectangle(This,resourceCreator,outputRectangle,sourceEffect,sourceIndex,sourceBounds,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_GetRequiredSourceRectangles(This,resourceCreator,outputRectangle,sourceEffectCount,sourceEffects,sourceIndexCount,sourceIndices,sourceBoundsCount,sourceBounds,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetRequiredSourceRectangles(This,resourceCreator,outputRectangle,sourceEffectCount,sourceEffects,sourceIndexCount,sourceIndices,sourceBoundsCount,sourceBounds,valueCount,valueElements) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0107 */
/* [local] */ 

#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4
    {
    float M11;
    float M12;
    float M13;
    float M14;
    float M21;
    float M22;
    float M23;
    float M24;
    float M31;
    float M32;
    float M33;
    float M34;
    float M41;
    float M42;
    float M43;
    float M44;
    float M51;
    float M52;
    float M53;
    float M54;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4 __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4;

#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasDrawingSession;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasImage[] = L"Microsoft.Graphics.Canvas.ICanvasImage";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0107 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    struct Matrix5x4
                        {
                        float M11;
                        float M12;
                        float M13;
                        float M14;
                        float M21;
                        float M22;
                        float M23;
                        float M24;
                        float M31;
                        float M32;
                        float M33;
                        float M34;
                        float M41;
                        float M42;
                        float M43;
                        float M44;
                        float M51;
                        float M52;
                        float M53;
                        float M54;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef struct Matrix5x4 Matrix5x4;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0107_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0107_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasImage */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("794966D3-6A64-47E9-8DA8-B46AAA24D53B")
                    ICanvasImage : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetBounds( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetBoundsWithTransform( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasImage = __uuidof(ICanvasImage);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *GetBoundsWithTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetBounds(This,resourceCreator,bounds)	\
    ( (This)->lpVtbl -> GetBounds(This,resourceCreator,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetBoundsWithTransform(This,resourceCreator,transform,bounds)	\
    ( (This)->lpVtbl -> GetBoundsWithTransform(This,resourceCreator,transform,bounds) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0108 */
/* [local] */ 

#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat
    {
        CanvasBitmapFileFormat_Auto	= 0,
        CanvasBitmapFileFormat_Bmp	= ( CanvasBitmapFileFormat_Auto + 1 ) ,
        CanvasBitmapFileFormat_Png	= ( CanvasBitmapFileFormat_Bmp + 1 ) ,
        CanvasBitmapFileFormat_Jpeg	= ( CanvasBitmapFileFormat_Png + 1 ) ,
        CanvasBitmapFileFormat_Tiff	= ( CanvasBitmapFileFormat_Jpeg + 1 ) ,
        CanvasBitmapFileFormat_Gif	= ( CanvasBitmapFileFormat_Tiff + 1 ) ,
        CanvasBitmapFileFormat_JpegXR	= ( CanvasBitmapFileFormat_Gif + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasImageStatics[] = L"Microsoft.Graphics.Canvas.ICanvasImageStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0108 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasBitmapFileFormat
                    {
                        Auto	= 0,
                        Bmp	= ( Auto + 1 ) ,
                        Png	= ( Bmp + 1 ) ,
                        Jpeg	= ( Png + 1 ) ,
                        Tiff	= ( Jpeg + 1 ) ,
                        Gif	= ( Tiff + 1 ) ,
                        JpegXR	= ( Gif + 1 ) 
                    } ;

                const MIDL_ENUM CanvasBitmapFileFormat CanvasBitmapFileFormat_Auto = CanvasBitmapFileFormat::Auto;
                const MIDL_ENUM CanvasBitmapFileFormat CanvasBitmapFileFormat_Bmp = CanvasBitmapFileFormat::Bmp;
                const MIDL_ENUM CanvasBitmapFileFormat CanvasBitmapFileFormat_Png = CanvasBitmapFileFormat::Png;
                const MIDL_ENUM CanvasBitmapFileFormat CanvasBitmapFileFormat_Jpeg = CanvasBitmapFileFormat::Jpeg;
                const MIDL_ENUM CanvasBitmapFileFormat CanvasBitmapFileFormat_Tiff = CanvasBitmapFileFormat::Tiff;
                const MIDL_ENUM CanvasBitmapFileFormat CanvasBitmapFileFormat_Gif = CanvasBitmapFileFormat::Gif;
                const MIDL_ENUM CanvasBitmapFileFormat CanvasBitmapFileFormat_JpegXR = CanvasBitmapFileFormat::JpegXR;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasBitmapFileFormat CanvasBitmapFileFormat;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0108_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0108_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasImageStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("C54EEA15-5A14-489A-8FA0-6E84541F922D")
                    ICanvasImageStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE SaveAsync( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **action) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SaveWithQualityAsync( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                            /* [in] */ float quality,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **action) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SaveWithQualityAndBufferPrecisionAsync( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                            /* [in] */ float quality,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **action) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ComputeHistogram( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect channelSelect,
                            /* [in] */ INT32 numberOfBins,
                            /* [out] */ UINT32 *valueCount,
                            /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE IsHistogramSupported( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *device,
                            /* [out][retval] */ boolean *result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasImageStatics = __uuidof(ICanvasImageStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *SaveAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **action);
        
        HRESULT ( STDMETHODCALLTYPE *SaveWithQualityAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
            /* [in] */ float quality,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **action);
        
        HRESULT ( STDMETHODCALLTYPE *SaveWithQualityAndBufferPrecisionAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
            /* [in] */ float quality,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **action);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeHistogram )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect channelSelect,
            /* [in] */ INT32 numberOfBins,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *IsHistogramSupported )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *device,
            /* [out][retval] */ boolean *result);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_SaveAsync(This,image,sourceRectangle,dpi,resourceCreator,stream,fileFormat,action)	\
    ( (This)->lpVtbl -> SaveAsync(This,image,sourceRectangle,dpi,resourceCreator,stream,fileFormat,action) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_SaveWithQualityAsync(This,image,sourceRectangle,dpi,resourceCreator,stream,fileFormat,quality,action)	\
    ( (This)->lpVtbl -> SaveWithQualityAsync(This,image,sourceRectangle,dpi,resourceCreator,stream,fileFormat,quality,action) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_SaveWithQualityAndBufferPrecisionAsync(This,image,sourceRectangle,dpi,resourceCreator,stream,fileFormat,quality,bufferPrecision,action)	\
    ( (This)->lpVtbl -> SaveWithQualityAndBufferPrecisionAsync(This,image,sourceRectangle,dpi,resourceCreator,stream,fileFormat,quality,bufferPrecision,action) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_ComputeHistogram(This,image,sourceRectangle,resourceCreator,channelSelect,numberOfBins,valueCount,valueElements)	\
    ( (This)->lpVtbl -> ComputeHistogram(This,image,sourceRectangle,resourceCreator,channelSelect,numberOfBins,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_IsHistogramSupported(This,device,result)	\
    ( (This)->lpVtbl -> IsHistogramSupported(This,device,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0109 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasImage_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasImage_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasImage[] = L"Microsoft.Graphics.Canvas.CanvasImage";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasBrush";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0109 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0109_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0109_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("F5D58591-C803-41B4-878E-79D92AB13295")
                        ICanvasBrush : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Opacity( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Opacity( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Transform( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Matrix3x2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Transform( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasBrush = __uuidof(ICanvasBrush);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Opacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Opacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Transform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Transform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_get_Opacity(This,value)	\
    ( (This)->lpVtbl -> get_Opacity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_put_Opacity(This,value)	\
    ( (This)->lpVtbl -> put_Opacity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_get_Transform(This,value)	\
    ( (This)->lpVtbl -> get_Transform(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_put_Transform(This,value)	\
    ( (This)->lpVtbl -> put_Transform(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0110 */
/* [local] */ 

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Brushes {
class CanvasSolidColorBrush;
} /*Brushes*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0110 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0110_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0110_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("8ABF4780-4EDD-4F2B-BF63-2C385115B201")
                        ICanvasSolidColorBrushFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::UI::Color color,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush **canvasSolidColorBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSolidColorBrushFactory = __uuidof(ICanvasSolidColorBrushFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush **canvasSolidColorBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_Create(This,resourceCreator,color,canvasSolidColorBrush)	\
    ( (This)->lpVtbl -> Create(This,resourceCreator,color,canvasSolidColorBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0111 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushStatics[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0111 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0111_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0111_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("629B7244-5B9E-4EF8-8E09-264714201EE8")
                        ICanvasSolidColorBrushStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateHdr( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 colorHdr,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush **canvasSolidColorBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSolidColorBrushStatics = __uuidof(ICanvasSolidColorBrushStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 colorHdr,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush **canvasSolidColorBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_CreateHdr(This,resourceCreator,colorHdr,canvasSolidColorBrush)	\
    ( (This)->lpVtbl -> CreateHdr(This,resourceCreator,colorHdr,canvasSolidColorBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0112 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0112 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0112_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0112_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("8BC30F87-BAD5-4871-88B8-9FE3C63D204A")
                        ICanvasSolidColorBrush : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorHdr( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorHdr( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSolidColorBrush = __uuidof(ICanvasSolidColorBrush);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_get_Color(This,value)	\
    ( (This)->lpVtbl -> get_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_put_Color(This,value)	\
    ( (This)->lpVtbl -> put_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_get_ColorHdr(This,value)	\
    ( (This)->lpVtbl -> get_ColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_put_ColorHdr(This,value)	\
    ( (This)->lpVtbl -> put_ColorHdr(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0113 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasSolidColorBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasSolidColorBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasSolidColorBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Brushes {
class CanvasImageBrush;
} /*Brushes*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0113 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0113_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0113_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrushFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("C40CCB59-1B87-4394-A6A6-ECD278E877D6")
                        ICanvasImageBrushFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush **canvasImageBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithImage( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush **canvasImageBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasImageBrushFactory = __uuidof(ICanvasImageBrushFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush **canvasImageBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithImage )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush **canvasImageBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_Create(This,resourceCreator,canvasImageBrush)	\
    ( (This)->lpVtbl -> Create(This,resourceCreator,canvasImageBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_CreateWithImage(This,resourceCreator,image,canvasImageBrush)	\
    ( (This)->lpVtbl -> CreateWithImage(This,resourceCreator,image,canvasImageBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0114 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0114 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0114_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0114_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("5A21C4E7-D450-4942-8BBD-F017097AB763")
                        ICanvasImageBrush : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage **value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Image( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ExtendX( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ExtendX( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ExtendY( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ExtendY( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceRectangle( 
                                /* [out][retval] */ __FIReference_1_Windows__CFoundation__CRect **value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceRectangle( 
                                /* [in] */ __FIReference_1_Windows__CFoundation__CRect *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Interpolation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Interpolation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasImageBrush = __uuidof(ICanvasImageBrush);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Image )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtendX )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExtendX )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtendY )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExtendY )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out][retval] */ __FIReference_1_Windows__CFoundation__CRect **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [in] */ __FIReference_1_Windows__CFoundation__CRect *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_Image(This,value)	\
    ( (This)->lpVtbl -> get_Image(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_Image(This,value)	\
    ( (This)->lpVtbl -> put_Image(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_ExtendX(This,value)	\
    ( (This)->lpVtbl -> get_ExtendX(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_ExtendX(This,value)	\
    ( (This)->lpVtbl -> put_ExtendX(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_ExtendY(This,value)	\
    ( (This)->lpVtbl -> get_ExtendY(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_ExtendY(This,value)	\
    ( (This)->lpVtbl -> put_ExtendY(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> get_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> put_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_Interpolation(This,value)	\
    ( (This)->lpVtbl -> get_Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_Interpolation(This,value)	\
    ( (This)->lpVtbl -> put_Interpolation(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0115 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasImageBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasImageBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasImageBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush";
#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop
    {
    float Position;
    __x_ABI_CWindows_CUI_CColor Color;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop;

#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr
    {
    float Position;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector4 Color;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr;

#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Brushes {
class CanvasLinearGradientBrush;
} /*Brushes*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0115 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    
                    struct CanvasGradientStop
                        {
                        float Position;
                        ABI::Windows::UI::Color Color;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    
                    typedef struct CanvasGradientStop CanvasGradientStop;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    
                    struct CanvasGradientStopHdr
                        {
                        float Position;
                        ABI::Windows::Foundation::Numerics::Vector4 Color;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    
                    typedef struct CanvasGradientStopHdr CanvasGradientStopHdr;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0115_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0115_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("A2E8E34A-8592-4B9D-BA1C-00D3F3C34F54")
                        ICanvasLinearGradientBrushFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateSimple( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::UI::Color startColor,
                                /* [in] */ ABI::Windows::UI::Color endColor,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithStops( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop *gradientStops,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithEdgeBehaviorAndAlphaMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop *gradientStops,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithEdgeBehaviorAndInterpolationOptions( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop *gradientStops,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasLinearGradientBrushFactory = __uuidof(ICanvasLinearGradientBrushFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSimple )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CUI_CColor startColor,
            /* [in] */ __x_ABI_CWindows_CUI_CColor endColor,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithStops )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop *gradientStops,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithEdgeBehaviorAndAlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop *gradientStops,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithEdgeBehaviorAndInterpolationOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop *gradientStops,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace preInterpolationSpace,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace postInterpolationSpace,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_CreateSimple(This,resourceCreator,startColor,endColor,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateSimple(This,resourceCreator,startColor,endColor,canvasLinearGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_CreateWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasLinearGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_CreateWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasLinearGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_CreateWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasLinearGradientBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0116 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushStatics[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0116 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0116_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0116_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("E9DE3392-8FBF-478C-8E6A-D0A0EA753B37")
                        ICanvasLinearGradientBrushStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateHdrSimple( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 startColorHdr,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 endColorHdr,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateHdrWithStops( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr *gradientStopsHdr,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateHdrWithEdgeBehaviorAndAlphaMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr *gradientStopsHdr,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateHdrWithEdgeBehaviorAndInterpolationOptions( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr *gradientStopsHdr,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateRainbow( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ float eldritchness,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasLinearGradientBrushStatics = __uuidof(ICanvasLinearGradientBrushStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateHdrSimple )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 startColorHdr,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 endColorHdr,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateHdrWithStops )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr *gradientStopsHdr,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateHdrWithEdgeBehaviorAndAlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr *gradientStopsHdr,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateHdrWithEdgeBehaviorAndInterpolationOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr *gradientStopsHdr,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace preInterpolationSpace,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace postInterpolationSpace,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRainbow )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float eldritchness,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_CreateHdrSimple(This,resourceCreator,startColorHdr,endColorHdr,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateHdrSimple(This,resourceCreator,startColorHdr,endColorHdr,canvasLinearGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_CreateHdrWithStops(This,resourceCreator,gradientStopCount,gradientStopsHdr,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateHdrWithStops(This,resourceCreator,gradientStopCount,gradientStopsHdr,canvasLinearGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_CreateHdrWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStopsHdr,edgeBehavior,alphaMode,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateHdrWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStopsHdr,edgeBehavior,alphaMode,canvasLinearGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_CreateHdrWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStopsHdr,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateHdrWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStopsHdr,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasLinearGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_CreateRainbow(This,resourceCreator,eldritchness,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateRainbow(This,resourceCreator,eldritchness,canvasLinearGradientBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0117 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0117 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0117_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0117_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("A4FFBCB1-EC22-48C8-B1AF-09BCFD34EEBD")
                        ICanvasLinearGradientBrush : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StartPoint( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_EndPoint( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Stops( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop **valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StopsHdr( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr **valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EdgeBehavior( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PreInterpolationSpace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PostInterpolationSpace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BufferPrecision( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasLinearGradientBrush = __uuidof(ICanvasLinearGradientBrush);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_EndPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Stops )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop **valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StopsHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr **valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EdgeBehavior )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreInterpolationSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PostInterpolationSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BufferPrecision )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_StartPoint(This,value)	\
    ( (This)->lpVtbl -> get_StartPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_put_StartPoint(This,value)	\
    ( (This)->lpVtbl -> put_StartPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_EndPoint(This,value)	\
    ( (This)->lpVtbl -> get_EndPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_put_EndPoint(This,value)	\
    ( (This)->lpVtbl -> put_EndPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_Stops(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_Stops(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_StopsHdr(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_StopsHdr(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_EdgeBehavior(This,value)	\
    ( (This)->lpVtbl -> get_EdgeBehavior(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_PreInterpolationSpace(This,value)	\
    ( (This)->lpVtbl -> get_PreInterpolationSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_PostInterpolationSpace(This,value)	\
    ( (This)->lpVtbl -> get_PostInterpolationSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_BufferPrecision(This,value)	\
    ( (This)->lpVtbl -> get_BufferPrecision(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0118 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasLinearGradientBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasLinearGradientBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasLinearGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Brushes {
class CanvasRadialGradientBrush;
} /*Brushes*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0118 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0118_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0118_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("7933A51F-A910-4548-849F-42DDEC466F41")
                        ICanvasRadialGradientBrushFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateSimple( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::UI::Color startColor,
                                /* [in] */ ABI::Windows::UI::Color endColor,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithStops( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop *gradientStops,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithEdgeBehaviorAndAlphaMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop *gradientStops,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithEdgeBehaviorAndInterpolationOptions( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop *gradientStops,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasRadialGradientBrushFactory = __uuidof(ICanvasRadialGradientBrushFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSimple )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CUI_CColor startColor,
            /* [in] */ __x_ABI_CWindows_CUI_CColor endColor,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithStops )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop *gradientStops,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithEdgeBehaviorAndAlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop *gradientStops,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithEdgeBehaviorAndInterpolationOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop *gradientStops,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace preInterpolationSpace,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace postInterpolationSpace,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_CreateSimple(This,resourceCreator,startColor,endColor,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateSimple(This,resourceCreator,startColor,endColor,canvasRadialGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_CreateWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasRadialGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_CreateWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasRadialGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_CreateWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasRadialGradientBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0119 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushStatics[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0119 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0119_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0119_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("3B0D4DAE-3E21-4818-99B4-779ACAAF18BE")
                        ICanvasRadialGradientBrushStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateHdrSimple( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 startColorHdr,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 endColorHdr,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateHdrWithStops( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr *gradientStops,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateHdrWithEdgeBehaviorAndAlphaMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr *gradientStops,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateHdrWithEdgeBehaviorAndInterpolationOptions( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr *gradientStops,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateRainbow( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ float eldritchness,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasRadialGradientBrushStatics = __uuidof(ICanvasRadialGradientBrushStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateHdrSimple )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 startColorHdr,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 endColorHdr,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateHdrWithStops )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr *gradientStops,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateHdrWithEdgeBehaviorAndAlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr *gradientStops,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateHdrWithEdgeBehaviorAndInterpolationOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr *gradientStops,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace preInterpolationSpace,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace postInterpolationSpace,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRainbow )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float eldritchness,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_CreateHdrSimple(This,resourceCreator,startColorHdr,endColorHdr,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateHdrSimple(This,resourceCreator,startColorHdr,endColorHdr,canvasRadialGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_CreateHdrWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateHdrWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasRadialGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_CreateHdrWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateHdrWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasRadialGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_CreateHdrWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateHdrWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasRadialGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_CreateRainbow(This,resourceCreator,eldritchness,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateRainbow(This,resourceCreator,eldritchness,canvasRadialGradientBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0120 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0120 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0120_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0120_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("4D27D756-14A9-4EB7-973F-E6614D4F89E7")
                        ICanvasRadialGradientBrush : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Center( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Center( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OriginOffset( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OriginOffset( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RadiusX( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RadiusX( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RadiusY( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RadiusY( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Stops( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop **valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StopsHdr( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr **valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EdgeBehavior( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PreInterpolationSpace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PostInterpolationSpace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BufferPrecision( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasRadialGradientBrush = __uuidof(ICanvasRadialGradientBrush);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Center )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Center )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OriginOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RadiusX )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RadiusX )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RadiusY )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RadiusY )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Stops )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop **valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StopsHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr **valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EdgeBehavior )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreInterpolationSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PostInterpolationSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BufferPrecision )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_Center(This,value)	\
    ( (This)->lpVtbl -> get_Center(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_put_Center(This,value)	\
    ( (This)->lpVtbl -> put_Center(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_OriginOffset(This,value)	\
    ( (This)->lpVtbl -> get_OriginOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_put_OriginOffset(This,value)	\
    ( (This)->lpVtbl -> put_OriginOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_RadiusX(This,value)	\
    ( (This)->lpVtbl -> get_RadiusX(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_put_RadiusX(This,value)	\
    ( (This)->lpVtbl -> put_RadiusX(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_RadiusY(This,value)	\
    ( (This)->lpVtbl -> get_RadiusY(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_put_RadiusY(This,value)	\
    ( (This)->lpVtbl -> put_RadiusY(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_Stops(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_Stops(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_StopsHdr(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_StopsHdr(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_EdgeBehavior(This,value)	\
    ( (This)->lpVtbl -> get_EdgeBehavior(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_PreInterpolationSpace(This,value)	\
    ( (This)->lpVtbl -> get_PreInterpolationSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_PostInterpolationSpace(This,value)	\
    ( (This)->lpVtbl -> get_PostInterpolationSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_BufferPrecision(This,value)	\
    ( (This)->lpVtbl -> get_BufferPrecision(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0121 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasRadialGradientBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasRadialGradientBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasRadialGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush";
#endif
#if !defined(__cplusplus)
typedef __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize;

#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasBitmapFactory[] = L"Microsoft.Graphics.Canvas.ICanvasBitmapFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0121 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef ABI::Windows::Graphics::Imaging::BitmapSize BitmapSize;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0121_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0121_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasBitmapFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("F2D0EB0E-16F3-4BCF-B1D1-04834AB97DE4")
                    ICanvasBitmapFactory : public IInspectable
                    {
                    public:
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasBitmapFactory = __uuidof(ICanvasBitmapFactory);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0122 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasBitmap[] = L"Microsoft.Graphics.Canvas.ICanvasBitmap";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0122 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0122_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0122_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasBitmap */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("C57532ED-709E-4AC2-86BE-A1EC3A7FA8FE")
                    ICanvasBitmap : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SizeInPixels( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::BitmapSize *size) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                            /* [out][retval] */ ABI::Windows::Foundation::Size *size) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Bounds( 
                            /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Format( 
                            /* [out][retval] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SaveToFileAsync( 
                            /* [in] */ HSTRING fileName,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SaveToFileWithBitmapFileFormatAsync( 
                            /* [in] */ HSTRING fileName,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SaveToFileWithBitmapFileFormatAndQualityAsync( 
                            /* [in] */ HSTRING fileName,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                            /* [in] */ float quality,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SaveToStreamAsync( 
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SaveToStreamWithQualityAsync( 
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                            /* [in] */ float quality,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetPixelBytes( 
                            /* [out] */ UINT32 *valueCount,
                            /* [out][size_is][size_is][retval] */ BYTE **valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetPixelBytesWithSubrectangle( 
                            /* [in] */ INT32 left,
                            /* [in] */ INT32 top,
                            /* [in] */ INT32 width,
                            /* [in] */ INT32 height,
                            /* [out] */ UINT32 *valueCount,
                            /* [out][size_is][size_is][retval] */ BYTE **valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetPixelBytesWithBuffer( 
                            /* [in] */ ABI::Windows::Storage::Streams::IBuffer *buffer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetPixelBytesWithBufferAndSubrectangle( 
                            /* [in] */ ABI::Windows::Storage::Streams::IBuffer *buffer,
                            /* [in] */ INT32 left,
                            /* [in] */ INT32 top,
                            /* [in] */ INT32 width,
                            /* [in] */ INT32 height) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetPixelColors( 
                            /* [out] */ UINT32 *valueCount,
                            /* [out][size_is][size_is][retval] */ ABI::Windows::UI::Color **valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetPixelColorsWithSubrectangle( 
                            /* [in] */ INT32 left,
                            /* [in] */ INT32 top,
                            /* [in] */ INT32 width,
                            /* [in] */ INT32 height,
                            /* [out] */ UINT32 *valueCount,
                            /* [out][size_is][size_is][retval] */ ABI::Windows::UI::Color **valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SetPixelBytes( 
                            /* [in] */ UINT32 valueCount,
                            /* [in][size_is] */ BYTE *valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SetPixelBytesWithSubrectangle( 
                            /* [in] */ UINT32 valueCount,
                            /* [in][size_is] */ BYTE *valueElements,
                            /* [in] */ INT32 left,
                            /* [in] */ INT32 top,
                            /* [in] */ INT32 width,
                            /* [in] */ INT32 height) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SetPixelBytesWithBuffer( 
                            /* [in] */ ABI::Windows::Storage::Streams::IBuffer *buffer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SetPixelBytesWithBufferAndSubrectangle( 
                            /* [in] */ ABI::Windows::Storage::Streams::IBuffer *buffer,
                            /* [in] */ INT32 left,
                            /* [in] */ INT32 top,
                            /* [in] */ INT32 width,
                            /* [in] */ INT32 height) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SetPixelColors( 
                            /* [in] */ UINT32 valueCount,
                            /* [in][size_is] */ ABI::Windows::UI::Color *valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SetPixelColorsWithSubrectangle( 
                            /* [in] */ UINT32 valueCount,
                            /* [in][size_is] */ ABI::Windows::UI::Color *valueElements,
                            /* [in] */ INT32 left,
                            /* [in] */ INT32 top,
                            /* [in] */ INT32 width,
                            /* [in] */ INT32 height) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CopyPixelsFromBitmap( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *otherBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CopyPixelsFromBitmapWithDestPoint( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *otherBitmap,
                            /* [in] */ INT32 destX,
                            /* [in] */ INT32 destY) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CopyPixelsFromBitmapWithDestPointAndSourceRect( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *otherBitmap,
                            /* [in] */ INT32 destX,
                            /* [in] */ INT32 destY,
                            /* [in] */ INT32 sourceRectLeft,
                            /* [in] */ INT32 sourceRectTop,
                            /* [in] */ INT32 sourceRectWidth,
                            /* [in] */ INT32 sourceRectHeight) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasBitmap = __uuidof(ICanvasBitmap);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        HRESULT ( STDMETHODCALLTYPE *SaveToFileAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ HSTRING fileName,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        HRESULT ( STDMETHODCALLTYPE *SaveToFileWithBitmapFileFormatAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ HSTRING fileName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        HRESULT ( STDMETHODCALLTYPE *SaveToFileWithBitmapFileFormatAndQualityAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ HSTRING fileName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
            /* [in] */ float quality,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        HRESULT ( STDMETHODCALLTYPE *SaveToStreamAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        HRESULT ( STDMETHODCALLTYPE *SaveToStreamWithQualityAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
            /* [in] */ float quality,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        HRESULT ( STDMETHODCALLTYPE *GetPixelBytes )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ BYTE **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetPixelBytesWithSubrectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ INT32 left,
            /* [in] */ INT32 top,
            /* [in] */ INT32 width,
            /* [in] */ INT32 height,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ BYTE **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetPixelBytesWithBuffer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIBuffer *buffer);
        
        HRESULT ( STDMETHODCALLTYPE *GetPixelBytesWithBufferAndSubrectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIBuffer *buffer,
            /* [in] */ INT32 left,
            /* [in] */ INT32 top,
            /* [in] */ INT32 width,
            /* [in] */ INT32 height);
        
        HRESULT ( STDMETHODCALLTYPE *GetPixelColors )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CWindows_CUI_CColor **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetPixelColorsWithSubrectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ INT32 left,
            /* [in] */ INT32 top,
            /* [in] */ INT32 width,
            /* [in] */ INT32 height,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CWindows_CUI_CColor **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *SetPixelBytes )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ BYTE *valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *SetPixelBytesWithSubrectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ BYTE *valueElements,
            /* [in] */ INT32 left,
            /* [in] */ INT32 top,
            /* [in] */ INT32 width,
            /* [in] */ INT32 height);
        
        HRESULT ( STDMETHODCALLTYPE *SetPixelBytesWithBuffer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIBuffer *buffer);
        
        HRESULT ( STDMETHODCALLTYPE *SetPixelBytesWithBufferAndSubrectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIBuffer *buffer,
            /* [in] */ INT32 left,
            /* [in] */ INT32 top,
            /* [in] */ INT32 width,
            /* [in] */ INT32 height);
        
        HRESULT ( STDMETHODCALLTYPE *SetPixelColors )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ __x_ABI_CWindows_CUI_CColor *valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *SetPixelColorsWithSubrectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ __x_ABI_CWindows_CUI_CColor *valueElements,
            /* [in] */ INT32 left,
            /* [in] */ INT32 top,
            /* [in] */ INT32 width,
            /* [in] */ INT32 height);
        
        HRESULT ( STDMETHODCALLTYPE *CopyPixelsFromBitmap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *otherBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CopyPixelsFromBitmapWithDestPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *otherBitmap,
            /* [in] */ INT32 destX,
            /* [in] */ INT32 destY);
        
        HRESULT ( STDMETHODCALLTYPE *CopyPixelsFromBitmapWithDestPointAndSourceRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *otherBitmap,
            /* [in] */ INT32 destX,
            /* [in] */ INT32 destY,
            /* [in] */ INT32 sourceRectLeft,
            /* [in] */ INT32 sourceRectTop,
            /* [in] */ INT32 sourceRectWidth,
            /* [in] */ INT32 sourceRectHeight);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_SizeInPixels(This,size)	\
    ( (This)->lpVtbl -> get_SizeInPixels(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_Bounds(This,bounds)	\
    ( (This)->lpVtbl -> get_Bounds(This,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_Format(This,value)	\
    ( (This)->lpVtbl -> get_Format(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToFileAsync(This,fileName,asyncAction)	\
    ( (This)->lpVtbl -> SaveToFileAsync(This,fileName,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToFileWithBitmapFileFormatAsync(This,fileName,fileFormat,asyncAction)	\
    ( (This)->lpVtbl -> SaveToFileWithBitmapFileFormatAsync(This,fileName,fileFormat,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToFileWithBitmapFileFormatAndQualityAsync(This,fileName,fileFormat,quality,asyncAction)	\
    ( (This)->lpVtbl -> SaveToFileWithBitmapFileFormatAndQualityAsync(This,fileName,fileFormat,quality,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToStreamAsync(This,stream,fileFormat,asyncAction)	\
    ( (This)->lpVtbl -> SaveToStreamAsync(This,stream,fileFormat,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToStreamWithQualityAsync(This,stream,fileFormat,quality,asyncAction)	\
    ( (This)->lpVtbl -> SaveToStreamWithQualityAsync(This,stream,fileFormat,quality,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelBytes(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetPixelBytes(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelBytesWithSubrectangle(This,left,top,width,height,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetPixelBytesWithSubrectangle(This,left,top,width,height,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelBytesWithBuffer(This,buffer)	\
    ( (This)->lpVtbl -> GetPixelBytesWithBuffer(This,buffer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelBytesWithBufferAndSubrectangle(This,buffer,left,top,width,height)	\
    ( (This)->lpVtbl -> GetPixelBytesWithBufferAndSubrectangle(This,buffer,left,top,width,height) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelColors(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetPixelColors(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelColorsWithSubrectangle(This,left,top,width,height,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetPixelColorsWithSubrectangle(This,left,top,width,height,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelBytes(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> SetPixelBytes(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelBytesWithSubrectangle(This,valueCount,valueElements,left,top,width,height)	\
    ( (This)->lpVtbl -> SetPixelBytesWithSubrectangle(This,valueCount,valueElements,left,top,width,height) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelBytesWithBuffer(This,buffer)	\
    ( (This)->lpVtbl -> SetPixelBytesWithBuffer(This,buffer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelBytesWithBufferAndSubrectangle(This,buffer,left,top,width,height)	\
    ( (This)->lpVtbl -> SetPixelBytesWithBufferAndSubrectangle(This,buffer,left,top,width,height) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelColors(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> SetPixelColors(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelColorsWithSubrectangle(This,valueCount,valueElements,left,top,width,height)	\
    ( (This)->lpVtbl -> SetPixelColorsWithSubrectangle(This,valueCount,valueElements,left,top,width,height) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_CopyPixelsFromBitmap(This,otherBitmap)	\
    ( (This)->lpVtbl -> CopyPixelsFromBitmap(This,otherBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_CopyPixelsFromBitmapWithDestPoint(This,otherBitmap,destX,destY)	\
    ( (This)->lpVtbl -> CopyPixelsFromBitmapWithDestPoint(This,otherBitmap,destX,destY) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_CopyPixelsFromBitmapWithDestPointAndSourceRect(This,otherBitmap,destX,destY,sourceRectLeft,sourceRectTop,sourceRectWidth,sourceRectHeight)	\
    ( (This)->lpVtbl -> CopyPixelsFromBitmapWithDestPointAndSourceRect(This,otherBitmap,destX,destY,sourceRectLeft,sourceRectTop,sourceRectWidth,sourceRectHeight) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5594 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5594 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5594_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5594_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0124 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)



/* interface __MIDL_itf_Canvas2Eabi_0000_0124 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0124_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0124_v0_0_s_ifspec;

#ifndef ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__

/* interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01f4b012-b7d5-5e02-8caa-2c460f35c947")
    __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap *asyncInfo,
            /* [in] */ AsyncStatus status) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [in] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap *asyncInfo,
            /* [in] */ AsyncStatus status);
        
        END_INTERFACE
    } __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl;

    interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
    {
        CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0125 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap */


/* interface __MIDL_itf_Canvas2Eabi_0000_0125 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0125_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0125_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5595 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5595 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5595_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5595_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0126 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0126 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0126_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0126_v0_0_s_ifspec;

#ifndef ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__

/* interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0391e8ef-719a-5c80-b87a-7d902b154e3e")
    __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap : public IInspectable
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Completed( 
            /* [in] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap *handler) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Completed( 
            /* [retval][out] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **handler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResults( 
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **results) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [in] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap *handler);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [retval][out] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **handler);
        
        HRESULT ( STDMETHODCALLTYPE *GetResults )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **results);
        
        END_INTERFACE
    } __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl;

    interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
    {
        CONST_VTBL struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0127 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasBitmapStatics[] = L"Microsoft.Graphics.Canvas.ICanvasBitmapStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0127 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0127_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0127_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasBitmapStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("C8948DEA-A41D-4CC2-AF9A-FDDE01B606DC")
                    ICanvasBitmapStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11Surface( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface *surface,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11SurfaceWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface *surface,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11SurfaceWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface *surface,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromBytes( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ UINT32 byteCount,
                            /* [in][size_is] */ BYTE *bytes,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromBytesWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ UINT32 byteCount,
                            /* [in][size_is] */ BYTE *bytes,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromBytesWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ UINT32 byteCount,
                            /* [in][size_is] */ BYTE *bytes,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromBytesWithBuffer( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IBuffer *buffer,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromBytesWithBufferAndDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IBuffer *buffer,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromBytesWithBufferAndDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IBuffer *buffer,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromColors( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ UINT32 colorCount,
                            /* [in][size_is] */ ABI::Windows::UI::Color *colors,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromColorsWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ UINT32 colorCount,
                            /* [in][size_is] */ ABI::Windows::UI::Color *colors,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromColorsWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ UINT32 colorCount,
                            /* [in][size_is] */ ABI::Windows::UI::Color *colors,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromSoftwareBitmap( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Graphics::Imaging::ISoftwareBitmap *sourceBitmap,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromHstring( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ HSTRING fileName,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromHstringWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ HSTRING fileName,
                            /* [in] */ float dpi,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromHstringWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ HSTRING fileName,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUri( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::IUriRuntimeClass *uri,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUriWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::IUriRuntimeClass *uri,
                            /* [in] */ float dpi,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUriWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::IUriRuntimeClass *uri,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStream( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStreamWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ float dpi,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStreamWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasBitmapStatics = __uuidof(ICanvasBitmapStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11Surface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface *surface,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11SurfaceWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface *surface,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11SurfaceWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface *surface,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromBytes )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 byteCount,
            /* [in][size_is] */ BYTE *bytes,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromBytesWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 byteCount,
            /* [in][size_is] */ BYTE *bytes,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromBytesWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 byteCount,
            /* [in][size_is] */ BYTE *bytes,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromBytesWithBuffer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIBuffer *buffer,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromBytesWithBufferAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIBuffer *buffer,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromBytesWithBufferAndDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIBuffer *buffer,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromColors )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 colorCount,
            /* [in][size_is] */ __x_ABI_CWindows_CUI_CColor *colors,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromColorsWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 colorCount,
            /* [in][size_is] */ __x_ABI_CWindows_CUI_CColor *colors,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromColorsWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 colorCount,
            /* [in][size_is] */ __x_ABI_CWindows_CUI_CColor *colors,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromSoftwareBitmap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap *sourceBitmap,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromHstring )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ HSTRING fileName,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromHstringWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ HSTRING fileName,
            /* [in] */ float dpi,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromHstringWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ HSTRING fileName,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUri )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CIUriRuntimeClass *uri,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUriWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CIUriRuntimeClass *uri,
            /* [in] */ float dpi,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUriWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CIUriRuntimeClass *uri,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStream )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStreamWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ float dpi,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStreamWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromDirect3D11Surface(This,resourceCreator,surface,bitmap)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11Surface(This,resourceCreator,surface,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromDirect3D11SurfaceWithDpi(This,resourceCreator,surface,dpi,bitmap)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11SurfaceWithDpi(This,resourceCreator,surface,dpi,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromDirect3D11SurfaceWithDpiAndAlpha(This,resourceCreator,surface,dpi,alpha,bitmap)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11SurfaceWithDpiAndAlpha(This,resourceCreator,surface,dpi,alpha,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytes(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,bitmap)	\
    ( (This)->lpVtbl -> CreateFromBytes(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytesWithDpi(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,dpi,bitmap)	\
    ( (This)->lpVtbl -> CreateFromBytesWithDpi(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,dpi,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytesWithDpiAndAlpha(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,dpi,alpha,bitmap)	\
    ( (This)->lpVtbl -> CreateFromBytesWithDpiAndAlpha(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,dpi,alpha,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytesWithBuffer(This,resourceCreator,buffer,widthInPixels,heightInPixels,format,bitmap)	\
    ( (This)->lpVtbl -> CreateFromBytesWithBuffer(This,resourceCreator,buffer,widthInPixels,heightInPixels,format,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytesWithBufferAndDpi(This,resourceCreator,buffer,widthInPixels,heightInPixels,format,dpi,bitmap)	\
    ( (This)->lpVtbl -> CreateFromBytesWithBufferAndDpi(This,resourceCreator,buffer,widthInPixels,heightInPixels,format,dpi,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytesWithBufferAndDpiAndAlpha(This,resourceCreator,buffer,widthInPixels,heightInPixels,format,dpi,alpha,bitmap)	\
    ( (This)->lpVtbl -> CreateFromBytesWithBufferAndDpiAndAlpha(This,resourceCreator,buffer,widthInPixels,heightInPixels,format,dpi,alpha,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromColors(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,bitmap)	\
    ( (This)->lpVtbl -> CreateFromColors(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromColorsWithDpi(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,dpi,bitmap)	\
    ( (This)->lpVtbl -> CreateFromColorsWithDpi(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,dpi,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromColorsWithDpiAndAlpha(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,dpi,alpha,bitmap)	\
    ( (This)->lpVtbl -> CreateFromColorsWithDpiAndAlpha(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,dpi,alpha,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromSoftwareBitmap(This,resourceCreator,sourceBitmap,bitmap)	\
    ( (This)->lpVtbl -> CreateFromSoftwareBitmap(This,resourceCreator,sourceBitmap,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromHstring(This,resourceCreator,fileName,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromHstring(This,resourceCreator,fileName,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromHstringWithDpi(This,resourceCreator,fileName,dpi,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromHstringWithDpi(This,resourceCreator,fileName,dpi,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromHstringWithDpiAndAlpha(This,resourceCreator,fileName,dpi,alpha,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromHstringWithDpiAndAlpha(This,resourceCreator,fileName,dpi,alpha,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromUri(This,resourceCreator,uri,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromUri(This,resourceCreator,uri,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromUriWithDpi(This,resourceCreator,uri,dpi,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromUriWithDpi(This,resourceCreator,uri,dpi,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromUriWithDpiAndAlpha(This,resourceCreator,uri,dpi,alpha,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromUriWithDpiAndAlpha(This,resourceCreator,uri,dpi,alpha,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromStream(This,resourceCreator,stream,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromStream(This,resourceCreator,stream,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromStreamWithDpi(This,resourceCreator,stream,dpi,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromStreamWithDpi(This,resourceCreator,stream,dpi,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromStreamWithDpiAndAlpha(This,resourceCreator,stream,dpi,alpha,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromStreamWithDpiAndAlpha(This,resourceCreator,stream,dpi,alpha,canvasBitmap) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0128 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasBitmap_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasBitmap_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasBitmap[] = L"Microsoft.Graphics.Canvas.CanvasBitmap";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasRenderTarget;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasRenderTargetFactory[] = L"Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0128 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0128_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0128_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("620DFDBB-9D08-406C-BFE6-D9B81E6DF8E7")
                    ICanvasRenderTargetFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateWithSize( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::Size size,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **renderTarget) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeight( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **renderTarget) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **renderTarget) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpiAndFormatAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **renderTarget) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasRenderTargetFactory = __uuidof(ICanvasRenderTargetFactory);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize size,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **renderTarget);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **renderTarget);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **renderTarget);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpiAndFormatAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **renderTarget);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_CreateWithSize(This,resourceCreator,size,renderTarget)	\
    ( (This)->lpVtbl -> CreateWithSize(This,resourceCreator,size,renderTarget) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_CreateWithWidthAndHeight(This,resourceCreator,width,height,renderTarget)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeight(This,resourceCreator,width,height,renderTarget) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,renderTarget)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,renderTarget) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(This,resourceCreator,width,height,dpi,format,alpha,renderTarget)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(This,resourceCreator,width,height,dpi,format,alpha,renderTarget) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0129 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasRenderTargetStatics[] = L"Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0129 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0129_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0129_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("C7D1FE37-DD57-45D7-BCC1-15625A21E8D5")
                    ICanvasRenderTargetStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11Surface( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface *surface,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11SurfaceWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface *surface,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11SurfaceWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface *surface,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **bitmap) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasRenderTargetStatics = __uuidof(ICanvasRenderTargetStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11Surface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface *surface,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11SurfaceWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface *surface,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11SurfaceWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface *surface,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **bitmap);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_CreateFromDirect3D11Surface(This,resourceCreator,surface,bitmap)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11Surface(This,resourceCreator,surface,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_CreateFromDirect3D11SurfaceWithDpi(This,resourceCreator,surface,dpi,bitmap)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11SurfaceWithDpi(This,resourceCreator,surface,dpi,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_CreateFromDirect3D11SurfaceWithDpiAndAlpha(This,resourceCreator,surface,dpi,alpha,bitmap)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11SurfaceWithDpiAndAlpha(This,resourceCreator,surface,dpi,alpha,bitmap) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0130 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasRenderTarget[] = L"Microsoft.Graphics.Canvas.ICanvasRenderTarget";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0130 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0130_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0130_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("2D4C7349-9A32-41B9-B3CC-CAF1B7E1099B")
                    ICanvasRenderTarget : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasRenderTarget = __uuidof(ICanvasRenderTarget);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_CreateDrawingSession(This,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,drawingSession) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0131 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasRenderTarget_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasRenderTarget_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasRenderTarget[] = L"Microsoft.Graphics.Canvas.CanvasRenderTarget";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions
    {
        CanvasVirtualBitmapOptions_None	= 0,
        CanvasVirtualBitmapOptions_ReleaseSource	= ( CanvasVirtualBitmapOptions_None + 1 ) ,
        CanvasVirtualBitmapOptions_CacheOnDemand	= ( CanvasVirtualBitmapOptions_ReleaseSource + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions;


#endif /* end if !defined(__cplusplus) */


#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0131 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasVirtualBitmapOptions
                    {
                        None	= 0,
                        ReleaseSource	= ( None + 1 ) ,
                        CacheOnDemand	= ( ReleaseSource + 1 ) 
                    } ;

                const MIDL_ENUM CanvasVirtualBitmapOptions CanvasVirtualBitmapOptions_None = CanvasVirtualBitmapOptions::None;
                const MIDL_ENUM CanvasVirtualBitmapOptions CanvasVirtualBitmapOptions_ReleaseSource = CanvasVirtualBitmapOptions::ReleaseSource;
                const MIDL_ENUM CanvasVirtualBitmapOptions CanvasVirtualBitmapOptions_CacheOnDemand = CanvasVirtualBitmapOptions::CacheOnDemand;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasVirtualBitmapOptions CanvasVirtualBitmapOptions;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0131_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0131_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5596 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5596 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5596_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5596_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0132 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)



/* interface __MIDL_itf_Canvas2Eabi_0000_0132 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0132_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0132_v0_0_s_ifspec;

#ifndef ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__

/* interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6fec4e18-7336-5236-8748-9a4b669b98f6")
    __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap *asyncInfo,
            /* [in] */ AsyncStatus status) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,
            /* [in] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap *asyncInfo,
            /* [in] */ AsyncStatus status);
        
        END_INTERFACE
    } __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl;

    interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap
    {
        CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0133 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap */


/* interface __MIDL_itf_Canvas2Eabi_0000_0133 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0133_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0133_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5597 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5597 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5597_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5597_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0134 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0134 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0134_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0134_v0_0_s_ifspec;

#ifndef ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__

/* interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d47cfc52-5abc-550b-ad7c-63b5aec8ca3a")
    __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap : public IInspectable
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Completed( 
            /* [in] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap *handler) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Completed( 
            /* [retval][out] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **handler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResults( 
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap **results) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,
            /* [in] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap *handler);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,
            /* [retval][out] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **handler);
        
        HRESULT ( STDMETHODCALLTYPE *GetResults )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap **results);
        
        END_INTERFACE
    } __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl;

    interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap
    {
        CONST_VTBL struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0135 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics[] = L"Microsoft.Graphics.Canvas.ICanvasVirtualBitmapStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0135 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0135_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0135_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("B2F1F8E9-0770-4DD4-956D-78D911390957")
                    ICanvasVirtualBitmapStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromFileName( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ HSTRING fileName,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromFileNameWithOptions( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ HSTRING fileName,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromFileNameWithOptionsAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ HSTRING fileName,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUri( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::IUriRuntimeClass *uri,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUriWithOptions( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::IUriRuntimeClass *uri,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUriWithOptionsAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::IUriRuntimeClass *uri,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStream( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStreamWithOptions( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStreamWithOptionsAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasVirtualBitmapStatics = __uuidof(ICanvasVirtualBitmapStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromFileName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ HSTRING fileName,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromFileNameWithOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ HSTRING fileName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromFileNameWithOptionsAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ HSTRING fileName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUri )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CIUriRuntimeClass *uri,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUriWithOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CIUriRuntimeClass *uri,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUriWithOptionsAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CIUriRuntimeClass *uri,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStream )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStreamWithOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStreamWithOptionsAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromFileName(This,resourceCreator,fileName,value)	\
    ( (This)->lpVtbl -> LoadAsyncFromFileName(This,resourceCreator,fileName,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromFileNameWithOptions(This,resourceCreator,fileName,options,value)	\
    ( (This)->lpVtbl -> LoadAsyncFromFileNameWithOptions(This,resourceCreator,fileName,options,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromFileNameWithOptionsAndAlpha(This,resourceCreator,fileName,options,alpha,value)	\
    ( (This)->lpVtbl -> LoadAsyncFromFileNameWithOptionsAndAlpha(This,resourceCreator,fileName,options,alpha,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromUri(This,resourceCreator,uri,value)	\
    ( (This)->lpVtbl -> LoadAsyncFromUri(This,resourceCreator,uri,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromUriWithOptions(This,resourceCreator,uri,options,value)	\
    ( (This)->lpVtbl -> LoadAsyncFromUriWithOptions(This,resourceCreator,uri,options,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromUriWithOptionsAndAlpha(This,resourceCreator,uri,options,alpha,value)	\
    ( (This)->lpVtbl -> LoadAsyncFromUriWithOptionsAndAlpha(This,resourceCreator,uri,options,alpha,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromStream(This,resourceCreator,stream,value)	\
    ( (This)->lpVtbl -> LoadAsyncFromStream(This,resourceCreator,stream,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromStreamWithOptions(This,resourceCreator,stream,options,value)	\
    ( (This)->lpVtbl -> LoadAsyncFromStreamWithOptions(This,resourceCreator,stream,options,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromStreamWithOptionsAndAlpha(This,resourceCreator,stream,options,alpha,value)	\
    ( (This)->lpVtbl -> LoadAsyncFromStreamWithOptionsAndAlpha(This,resourceCreator,stream,options,alpha,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0136 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasVirtualBitmap[] = L"Microsoft.Graphics.Canvas.ICanvasVirtualBitmap";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0136 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0136_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0136_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("707D8BB0-05F9-484C-9EE2-179E0681C8A7")
                    ICanvasVirtualBitmap : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsCachedOnDemand( 
                            /* [out][retval] */ boolean *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SizeInPixels( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::BitmapSize *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                            /* [out][retval] */ ABI::Windows::Foundation::Size *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Bounds( 
                            /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasVirtualBitmap = __uuidof(ICanvasVirtualBitmap);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsCachedOnDemand )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
            /* [out][retval] */ boolean *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_get_IsCachedOnDemand(This,value)	\
    ( (This)->lpVtbl -> get_IsCachedOnDemand(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_get_SizeInPixels(This,value)	\
    ( (This)->lpVtbl -> get_SizeInPixels(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_get_Size(This,value)	\
    ( (This)->lpVtbl -> get_Size(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_get_Bounds(This,value)	\
    ( (This)->lpVtbl -> get_Bounds(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0137 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasVirtualBitmap_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasVirtualBitmap_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasVirtualBitmap[] = L"Microsoft.Graphics.Canvas.CanvasVirtualBitmap";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Geometry {
class CanvasStrokeStyle;
} /*Geometry*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasStrokeStyle[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0137 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0137_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0137_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("FD3E1CD2-6019-40A1-B315-267EEF6C2AEB")
                        ICanvasStrokeStyle : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StartCap( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StartCap( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndCap( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_EndCap( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DashCap( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DashCap( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineJoin( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineJoin( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MiterLimit( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MiterLimit( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DashStyle( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasDashStyle *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DashStyle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasDashStyle value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DashOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DashOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CustomDashStyle( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CustomDashStyle( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransformBehavior( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasStrokeTransformBehavior *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TransformBehavior( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasStrokeTransformBehavior value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasStrokeStyle = __uuidof(ICanvasStrokeStyle);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartCap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartCap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndCap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_EndCap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashCap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DashCap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineJoin )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineJoin )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MiterLimit )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MiterLimit )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DashStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DashOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDashStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomDashStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransformBehavior )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TransformBehavior )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_StartCap(This,value)	\
    ( (This)->lpVtbl -> get_StartCap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_StartCap(This,value)	\
    ( (This)->lpVtbl -> put_StartCap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_EndCap(This,value)	\
    ( (This)->lpVtbl -> get_EndCap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_EndCap(This,value)	\
    ( (This)->lpVtbl -> put_EndCap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_DashCap(This,value)	\
    ( (This)->lpVtbl -> get_DashCap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_DashCap(This,value)	\
    ( (This)->lpVtbl -> put_DashCap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_LineJoin(This,value)	\
    ( (This)->lpVtbl -> get_LineJoin(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_LineJoin(This,value)	\
    ( (This)->lpVtbl -> put_LineJoin(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_MiterLimit(This,value)	\
    ( (This)->lpVtbl -> get_MiterLimit(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_MiterLimit(This,value)	\
    ( (This)->lpVtbl -> put_MiterLimit(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_DashStyle(This,value)	\
    ( (This)->lpVtbl -> get_DashStyle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_DashStyle(This,value)	\
    ( (This)->lpVtbl -> put_DashStyle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_DashOffset(This,value)	\
    ( (This)->lpVtbl -> get_DashOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_DashOffset(This,value)	\
    ( (This)->lpVtbl -> put_DashOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_CustomDashStyle(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_CustomDashStyle(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_CustomDashStyle(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_CustomDashStyle(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_TransformBehavior(This,value)	\
    ( (This)->lpVtbl -> get_TransformBehavior(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_TransformBehavior(This,value)	\
    ( (This)->lpVtbl -> put_TransformBehavior(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0138 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition
    {
        CanvasLineBreakCondition_Neutral	= 0,
        CanvasLineBreakCondition_CanBreak	= ( CanvasLineBreakCondition_Neutral + 1 ) ,
        CanvasLineBreakCondition_CannotBreak	= ( CanvasLineBreakCondition_CanBreak + 1 ) ,
        CanvasLineBreakCondition_MustBreak	= ( CanvasLineBreakCondition_CannotBreak + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition;


#endif /* end if !defined(__cplusplus) */


#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextInlineObject[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0138 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasLineBreakCondition
                        {
                            Neutral	= 0,
                            CanBreak	= ( Neutral + 1 ) ,
                            CannotBreak	= ( CanBreak + 1 ) ,
                            MustBreak	= ( CannotBreak + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasLineBreakCondition CanvasLineBreakCondition_Neutral = CanvasLineBreakCondition::Neutral;
                    const MIDL_ENUM CanvasLineBreakCondition CanvasLineBreakCondition_CanBreak = CanvasLineBreakCondition::CanBreak;
                    const MIDL_ENUM CanvasLineBreakCondition CanvasLineBreakCondition_CannotBreak = CanvasLineBreakCondition::CannotBreak;
                    const MIDL_ENUM CanvasLineBreakCondition CanvasLineBreakCondition_MustBreak = CanvasLineBreakCondition::MustBreak;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasLineBreakCondition CanvasLineBreakCondition;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0138_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0138_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("7A89EE99-CE2A-47FA-9DD2-0A6825F6053F")
                        ICanvasTextInlineObject : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Draw( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer *textRenderer,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [in] */ boolean isSideways,
                                /* [in] */ boolean isRightToLeft,
                                /* [in] */ IInspectable *brush) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                /* [out][retval] */ ABI::Windows::Foundation::Size *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Baseline( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SupportsSideways( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DrawBounds( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BreakBefore( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BreakAfter( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextInlineObject = __uuidof(ICanvasTextInlineObject);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Draw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer *textRenderer,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ boolean isSideways,
            /* [in] */ boolean isRightToLeft,
            /* [in] */ IInspectable *brush);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Baseline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SupportsSideways )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
            /* [out][retval] */ boolean *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DrawBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BreakBefore )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BreakAfter )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_Draw(This,textRenderer,point,isSideways,isRightToLeft,brush)	\
    ( (This)->lpVtbl -> Draw(This,textRenderer,point,isSideways,isRightToLeft,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_get_Size(This,value)	\
    ( (This)->lpVtbl -> get_Size(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_get_Baseline(This,value)	\
    ( (This)->lpVtbl -> get_Baseline(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_get_SupportsSideways(This,value)	\
    ( (This)->lpVtbl -> get_SupportsSideways(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_get_DrawBounds(This,bounds)	\
    ( (This)->lpVtbl -> get_DrawBounds(This,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_get_BreakBefore(This,value)	\
    ( (This)->lpVtbl -> get_BreakBefore(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_get_BreakAfter(This,value)	\
    ( (This)->lpVtbl -> get_BreakAfter(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0139 */
/* [local] */ 

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
class CanvasTextFormat;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection
    {
        CanvasTextDirection_LeftToRightThenTopToBottom	= 0,
        CanvasTextDirection_RightToLeftThenTopToBottom	= ( CanvasTextDirection_LeftToRightThenTopToBottom + 1 ) ,
        CanvasTextDirection_LeftToRightThenBottomToTop	= ( CanvasTextDirection_RightToLeftThenTopToBottom + 1 ) ,
        CanvasTextDirection_RightToLeftThenBottomToTop	= ( CanvasTextDirection_LeftToRightThenBottomToTop + 1 ) ,
        CanvasTextDirection_TopToBottomThenLeftToRight	= ( CanvasTextDirection_RightToLeftThenBottomToTop + 1 ) ,
        CanvasTextDirection_BottomToTopThenLeftToRight	= ( CanvasTextDirection_TopToBottomThenLeftToRight + 1 ) ,
        CanvasTextDirection_TopToBottomThenRightToLeft	= ( CanvasTextDirection_BottomToTopThenLeftToRight + 1 ) ,
        CanvasTextDirection_BottomToTopThenRightToLeft	= ( CanvasTextDirection_TopToBottomThenRightToLeft + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment
    {
        CanvasHorizontalAlignment_Left	= 0,
        CanvasHorizontalAlignment_Right	= ( CanvasHorizontalAlignment_Left + 1 ) ,
        CanvasHorizontalAlignment_Center	= ( CanvasHorizontalAlignment_Right + 1 ) ,
        CanvasHorizontalAlignment_Justified	= ( CanvasHorizontalAlignment_Center + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment
    {
        CanvasVerticalAlignment_Top	= 0,
        CanvasVerticalAlignment_Bottom	= ( CanvasVerticalAlignment_Top + 1 ) ,
        CanvasVerticalAlignment_Center	= ( CanvasVerticalAlignment_Bottom + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity
    {
        CanvasTextTrimmingGranularity_None	= 0,
        CanvasTextTrimmingGranularity_Character	= ( CanvasTextTrimmingGranularity_None + 1 ) ,
        CanvasTextTrimmingGranularity_Word	= ( CanvasTextTrimmingGranularity_Character + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping
    {
        CanvasWordWrapping_Wrap	= 0,
        CanvasWordWrapping_NoWrap	= ( CanvasWordWrapping_Wrap + 1 ) ,
        CanvasWordWrapping_EmergencyBreak	= ( CanvasWordWrapping_NoWrap + 1 ) ,
        CanvasWordWrapping_WholeWord	= ( CanvasWordWrapping_EmergencyBreak + 1 ) ,
        CanvasWordWrapping_Character	= ( CanvasWordWrapping_WholeWord + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode
    {
        CanvasLineSpacingMode_Default	= 0,
        CanvasLineSpacingMode_Uniform	= ( CanvasLineSpacingMode_Default + 1 ) ,
        CanvasLineSpacingMode_Proportional	= ( CanvasLineSpacingMode_Uniform + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment
    {
        CanvasOpticalAlignment_Default	= 0,
        CanvasOpticalAlignment_NoSideBearings	= ( CanvasOpticalAlignment_Default + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation
    {
        CanvasVerticalGlyphOrientation_Default	= 0,
        CanvasVerticalGlyphOrientation_Stacked	= ( CanvasVerticalGlyphOrientation_Default + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign
    {
        CanvasTrimmingSign_None	= 0,
        CanvasTrimmingSign_Ellipsis	= ( CanvasTrimmingSign_None + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextFormat";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0139 */
/* [local] */ 


#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasTextDirection
                        {
                            LeftToRightThenTopToBottom	= 0,
                            RightToLeftThenTopToBottom	= ( LeftToRightThenTopToBottom + 1 ) ,
                            LeftToRightThenBottomToTop	= ( RightToLeftThenTopToBottom + 1 ) ,
                            RightToLeftThenBottomToTop	= ( LeftToRightThenBottomToTop + 1 ) ,
                            TopToBottomThenLeftToRight	= ( RightToLeftThenBottomToTop + 1 ) ,
                            BottomToTopThenLeftToRight	= ( TopToBottomThenLeftToRight + 1 ) ,
                            TopToBottomThenRightToLeft	= ( BottomToTopThenLeftToRight + 1 ) ,
                            BottomToTopThenRightToLeft	= ( TopToBottomThenRightToLeft + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasTextDirection CanvasTextDirection_LeftToRightThenTopToBottom = CanvasTextDirection::LeftToRightThenTopToBottom;
                    const MIDL_ENUM CanvasTextDirection CanvasTextDirection_RightToLeftThenTopToBottom = CanvasTextDirection::RightToLeftThenTopToBottom;
                    const MIDL_ENUM CanvasTextDirection CanvasTextDirection_LeftToRightThenBottomToTop = CanvasTextDirection::LeftToRightThenBottomToTop;
                    const MIDL_ENUM CanvasTextDirection CanvasTextDirection_RightToLeftThenBottomToTop = CanvasTextDirection::RightToLeftThenBottomToTop;
                    const MIDL_ENUM CanvasTextDirection CanvasTextDirection_TopToBottomThenLeftToRight = CanvasTextDirection::TopToBottomThenLeftToRight;
                    const MIDL_ENUM CanvasTextDirection CanvasTextDirection_BottomToTopThenLeftToRight = CanvasTextDirection::BottomToTopThenLeftToRight;
                    const MIDL_ENUM CanvasTextDirection CanvasTextDirection_TopToBottomThenRightToLeft = CanvasTextDirection::TopToBottomThenRightToLeft;
                    const MIDL_ENUM CanvasTextDirection CanvasTextDirection_BottomToTopThenRightToLeft = CanvasTextDirection::BottomToTopThenRightToLeft;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasTextDirection CanvasTextDirection;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasHorizontalAlignment
                        {
                            Left	= 0,
                            Right	= ( Left + 1 ) ,
                            Center	= ( Right + 1 ) ,
                            Justified	= ( Center + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasHorizontalAlignment CanvasHorizontalAlignment_Left = CanvasHorizontalAlignment::Left;
                    const MIDL_ENUM CanvasHorizontalAlignment CanvasHorizontalAlignment_Right = CanvasHorizontalAlignment::Right;
                    const MIDL_ENUM CanvasHorizontalAlignment CanvasHorizontalAlignment_Center = CanvasHorizontalAlignment::Center;
                    const MIDL_ENUM CanvasHorizontalAlignment CanvasHorizontalAlignment_Justified = CanvasHorizontalAlignment::Justified;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasHorizontalAlignment CanvasHorizontalAlignment;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasVerticalAlignment
                        {
                            Top	= 0,
                            Bottom	= ( Top + 1 ) ,
                            Center	= ( Bottom + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasVerticalAlignment CanvasVerticalAlignment_Top = CanvasVerticalAlignment::Top;
                    const MIDL_ENUM CanvasVerticalAlignment CanvasVerticalAlignment_Bottom = CanvasVerticalAlignment::Bottom;
                    const MIDL_ENUM CanvasVerticalAlignment CanvasVerticalAlignment_Center = CanvasVerticalAlignment::Center;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasVerticalAlignment CanvasVerticalAlignment;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasTextTrimmingGranularity
                        {
                            None	= 0,
                            Character	= ( None + 1 ) ,
                            Word	= ( Character + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasTextTrimmingGranularity CanvasTextTrimmingGranularity_None = CanvasTextTrimmingGranularity::None;
                    const MIDL_ENUM CanvasTextTrimmingGranularity CanvasTextTrimmingGranularity_Character = CanvasTextTrimmingGranularity::Character;
                    const MIDL_ENUM CanvasTextTrimmingGranularity CanvasTextTrimmingGranularity_Word = CanvasTextTrimmingGranularity::Word;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasTextTrimmingGranularity CanvasTextTrimmingGranularity;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasWordWrapping
                        {
                            Wrap	= 0,
                            NoWrap	= ( Wrap + 1 ) ,
                            EmergencyBreak	= ( NoWrap + 1 ) ,
                            WholeWord	= ( EmergencyBreak + 1 ) ,
                            Character	= ( WholeWord + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasWordWrapping CanvasWordWrapping_Wrap = CanvasWordWrapping::Wrap;
                    const MIDL_ENUM CanvasWordWrapping CanvasWordWrapping_NoWrap = CanvasWordWrapping::NoWrap;
                    const MIDL_ENUM CanvasWordWrapping CanvasWordWrapping_EmergencyBreak = CanvasWordWrapping::EmergencyBreak;
                    const MIDL_ENUM CanvasWordWrapping CanvasWordWrapping_WholeWord = CanvasWordWrapping::WholeWord;
                    const MIDL_ENUM CanvasWordWrapping CanvasWordWrapping_Character = CanvasWordWrapping::Character;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasWordWrapping CanvasWordWrapping;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasLineSpacingMode
                        {
                            Default	= 0,
                            Uniform	= ( Default + 1 ) ,
                            Proportional	= ( Uniform + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasLineSpacingMode CanvasLineSpacingMode_Default = CanvasLineSpacingMode::Default;
                    const MIDL_ENUM CanvasLineSpacingMode CanvasLineSpacingMode_Uniform = CanvasLineSpacingMode::Uniform;
                    const MIDL_ENUM CanvasLineSpacingMode CanvasLineSpacingMode_Proportional = CanvasLineSpacingMode::Proportional;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasLineSpacingMode CanvasLineSpacingMode;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasOpticalAlignment
                        {
                            Default	= 0,
                            NoSideBearings	= ( Default + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasOpticalAlignment CanvasOpticalAlignment_Default = CanvasOpticalAlignment::Default;
                    const MIDL_ENUM CanvasOpticalAlignment CanvasOpticalAlignment_NoSideBearings = CanvasOpticalAlignment::NoSideBearings;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasOpticalAlignment CanvasOpticalAlignment;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasVerticalGlyphOrientation
                        {
                            Default	= 0,
                            Stacked	= ( Default + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasVerticalGlyphOrientation CanvasVerticalGlyphOrientation_Default = CanvasVerticalGlyphOrientation::Default;
                    const MIDL_ENUM CanvasVerticalGlyphOrientation CanvasVerticalGlyphOrientation_Stacked = CanvasVerticalGlyphOrientation::Stacked;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasVerticalGlyphOrientation CanvasVerticalGlyphOrientation;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasTrimmingSign
                        {
                            None	= 0,
                            Ellipsis	= ( None + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasTrimmingSign CanvasTrimmingSign_None = CanvasTrimmingSign::None;
                    const MIDL_ENUM CanvasTrimmingSign CanvasTrimmingSign_Ellipsis = CanvasTrimmingSign::Ellipsis;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasTrimmingSign CanvasTrimmingSign;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0139_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0139_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("AF61BFDC-EABB-4D38-BA1B-AFB340612D33")
                        ICanvasTextFormat : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Direction( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Direction( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FontFamily( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FontFamily( 
                                /* [in] */ HSTRING value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FontSize( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FontSize( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FontStretch( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStretch *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FontStretch( 
                                /* [in] */ ABI::Windows::UI::Text::FontStretch value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FontStyle( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStyle *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FontStyle( 
                                /* [in] */ ABI::Windows::UI::Text::FontStyle value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FontWeight( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontWeight *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FontWeight( 
                                /* [in] */ ABI::Windows::UI::Text::FontWeight value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IncrementalTabStop( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IncrementalTabStop( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineSpacing( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineSpacing( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineSpacingBaseline( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineSpacingBaseline( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LocaleName( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LocaleName( 
                                /* [in] */ HSTRING value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HorizontalAlignment( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HorizontalAlignment( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingGranularity( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingGranularity( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingDelimiter( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingDelimiter( 
                                /* [in] */ HSTRING value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingDelimiterCount( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingDelimiterCount( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WordWrapping( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasWordWrapping *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_WordWrapping( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasWordWrapping value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Options( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Options( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VerticalGlyphOrientation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VerticalGlyphOrientation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OpticalAlignment( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OpticalAlignment( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LastLineWrapping( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LastLineWrapping( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineSpacingMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineSpacingMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingSign( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingSign( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CustomTrimmingSign( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject **value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CustomTrimmingSign( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextFormat = __uuidof(ICanvasTextFormat);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Direction )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Direction )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontFamily )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontFamily )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontStretch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStretch *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontStretch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontStretch value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStyle *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontStyle value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontWeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontWeight *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontWeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontWeight value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncrementalTabStop )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncrementalTabStop )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacingBaseline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacingBaseline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocaleName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LocaleName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingGranularity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingGranularity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingDelimiter )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingDelimiter )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingDelimiterCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingDelimiterCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Options )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Options )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalGlyphOrientation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalGlyphOrientation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OpticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastLineWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LastLineWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacingMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacingMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingSign )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingSign )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomTrimmingSign )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomTrimmingSign )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_Direction(This,value)	\
    ( (This)->lpVtbl -> get_Direction(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_Direction(This,value)	\
    ( (This)->lpVtbl -> put_Direction(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontFamily(This,value)	\
    ( (This)->lpVtbl -> get_FontFamily(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontFamily(This,value)	\
    ( (This)->lpVtbl -> put_FontFamily(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontSize(This,value)	\
    ( (This)->lpVtbl -> get_FontSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontSize(This,value)	\
    ( (This)->lpVtbl -> put_FontSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontStretch(This,value)	\
    ( (This)->lpVtbl -> get_FontStretch(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontStretch(This,value)	\
    ( (This)->lpVtbl -> put_FontStretch(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontStyle(This,value)	\
    ( (This)->lpVtbl -> get_FontStyle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontStyle(This,value)	\
    ( (This)->lpVtbl -> put_FontStyle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontWeight(This,value)	\
    ( (This)->lpVtbl -> get_FontWeight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontWeight(This,value)	\
    ( (This)->lpVtbl -> put_FontWeight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_IncrementalTabStop(This,value)	\
    ( (This)->lpVtbl -> get_IncrementalTabStop(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_IncrementalTabStop(This,value)	\
    ( (This)->lpVtbl -> put_IncrementalTabStop(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LineSpacing(This,value)	\
    ( (This)->lpVtbl -> get_LineSpacing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LineSpacing(This,value)	\
    ( (This)->lpVtbl -> put_LineSpacing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LineSpacingBaseline(This,value)	\
    ( (This)->lpVtbl -> get_LineSpacingBaseline(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LineSpacingBaseline(This,value)	\
    ( (This)->lpVtbl -> put_LineSpacingBaseline(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LocaleName(This,value)	\
    ( (This)->lpVtbl -> get_LocaleName(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LocaleName(This,value)	\
    ( (This)->lpVtbl -> put_LocaleName(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_VerticalAlignment(This,value)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_VerticalAlignment(This,value)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_HorizontalAlignment(This,value)	\
    ( (This)->lpVtbl -> get_HorizontalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_HorizontalAlignment(This,value)	\
    ( (This)->lpVtbl -> put_HorizontalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_TrimmingGranularity(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingGranularity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_TrimmingGranularity(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingGranularity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_TrimmingDelimiter(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingDelimiter(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_TrimmingDelimiter(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingDelimiter(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_TrimmingDelimiterCount(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingDelimiterCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_TrimmingDelimiterCount(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingDelimiterCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_WordWrapping(This,value)	\
    ( (This)->lpVtbl -> get_WordWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_WordWrapping(This,value)	\
    ( (This)->lpVtbl -> put_WordWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_Options(This,value)	\
    ( (This)->lpVtbl -> get_Options(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_Options(This,value)	\
    ( (This)->lpVtbl -> put_Options(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_VerticalGlyphOrientation(This,value)	\
    ( (This)->lpVtbl -> get_VerticalGlyphOrientation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_VerticalGlyphOrientation(This,value)	\
    ( (This)->lpVtbl -> put_VerticalGlyphOrientation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_OpticalAlignment(This,value)	\
    ( (This)->lpVtbl -> get_OpticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_OpticalAlignment(This,value)	\
    ( (This)->lpVtbl -> put_OpticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LastLineWrapping(This,value)	\
    ( (This)->lpVtbl -> get_LastLineWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LastLineWrapping(This,value)	\
    ( (This)->lpVtbl -> put_LastLineWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LineSpacingMode(This,value)	\
    ( (This)->lpVtbl -> get_LineSpacingMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LineSpacingMode(This,value)	\
    ( (This)->lpVtbl -> put_LineSpacingMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_TrimmingSign(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingSign(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_TrimmingSign(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingSign(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_CustomTrimmingSign(This,value)	\
    ( (This)->lpVtbl -> get_CustomTrimmingSign(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_CustomTrimmingSign(This,value)	\
    ( (This)->lpVtbl -> put_CustomTrimmingSign(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0140 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextFormatStatics[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0140 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0140_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0140_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormatStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("8A927515-33FC-4C92-A6AA-94A8F29C140B")
                        ICanvasTextFormatStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE GetSystemFontFamilies( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ HSTRING **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetSystemFontFamiliesFromLocaleList( 
                                /* [in] */ __FIVectorView_1_HSTRING *localeList,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ HSTRING **valueElements) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextFormatStatics = __uuidof(ICanvasTextFormatStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemFontFamilies )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ HSTRING **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemFontFamiliesFromLocaleList )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
            /* [in] */ __FIVectorView_1_HSTRING *localeList,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ HSTRING **valueElements);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetSystemFontFamilies(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetSystemFontFamilies(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetSystemFontFamiliesFromLocaleList(This,localeList,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetSystemFontFamiliesFromLocaleList(This,localeList,valueCount,valueElements) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0141 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextFormat_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextFormat_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextFormat[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextFormat";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName
    {
        CanvasTypographyFeatureName_None	= 0,
        CanvasTypographyFeatureName_Default	= 0x746c6664,
        CanvasTypographyFeatureName_VerticalWriting	= 0x74726576,
        CanvasTypographyFeatureName_VerticalAlternatesAndRotation	= 0x32747276,
        CanvasTypographyFeatureName_AlternativeFractions	= 0x63726661,
        CanvasTypographyFeatureName_PetiteCapitalsFromCapitals	= 0x63703263,
        CanvasTypographyFeatureName_SmallCapitalsFromCapitals	= 0x63733263,
        CanvasTypographyFeatureName_ContextualAlternates	= 0x746c6163,
        CanvasTypographyFeatureName_CaseSensitiveForms	= 0x65736163,
        CanvasTypographyFeatureName_GlyphCompositionDecomposition	= 0x706d6363,
        CanvasTypographyFeatureName_ContextualLigatures	= 0x67696c63,
        CanvasTypographyFeatureName_CapitalSpacing	= 0x70737063,
        CanvasTypographyFeatureName_ContextualSwash	= 0x68777363,
        CanvasTypographyFeatureName_CursivePositioning	= 0x73727563,
        CanvasTypographyFeatureName_DiscretionaryLigatures	= 0x67696c64,
        CanvasTypographyFeatureName_ExpertForms	= 0x74707865,
        CanvasTypographyFeatureName_Fractions	= 0x63617266,
        CanvasTypographyFeatureName_FullWidth	= 0x64697766,
        CanvasTypographyFeatureName_HalfForms	= 0x666c6168,
        CanvasTypographyFeatureName_HalantForms	= 0x6e6c6168,
        CanvasTypographyFeatureName_AlternateHalfWidth	= 0x746c6168,
        CanvasTypographyFeatureName_HistoricalForms	= 0x74736968,
        CanvasTypographyFeatureName_HorizontalKanaAlternates	= 0x616e6b68,
        CanvasTypographyFeatureName_HistoricalLigatures	= 0x67696c68,
        CanvasTypographyFeatureName_HalfWidth	= 0x64697768,
        CanvasTypographyFeatureName_HojoKanjiForms	= 0x6f6a6f68,
        CanvasTypographyFeatureName_Jis04Forms	= 0x3430706a,
        CanvasTypographyFeatureName_Jis78Forms	= 0x3837706a,
        CanvasTypographyFeatureName_Jis83Forms	= 0x3338706a,
        CanvasTypographyFeatureName_Jis90Forms	= 0x3039706a,
        CanvasTypographyFeatureName_Kerning	= 0x6e72656b,
        CanvasTypographyFeatureName_StandardLigatures	= 0x6167696c,
        CanvasTypographyFeatureName_LiningFigures	= 0x6d756e6c,
        CanvasTypographyFeatureName_LocalizedForms	= 0x6c636f6c,
        CanvasTypographyFeatureName_MarkPositioning	= 0x6b72616d,
        CanvasTypographyFeatureName_MathematicalGreek	= 0x6b72676d,
        CanvasTypographyFeatureName_MarkToMarkPositioning	= 0x6b6d6b6d,
        CanvasTypographyFeatureName_AlternateAnnotationForms	= 0x746c616e,
        CanvasTypographyFeatureName_NlcKanjiForms	= 0x6b636c6e,
        CanvasTypographyFeatureName_OldStyleFigures	= 0x6d756e6f,
        CanvasTypographyFeatureName_Ordinals	= 0x6e64726f,
        CanvasTypographyFeatureName_ProportionalAlternateWidth	= 0x746c6170,
        CanvasTypographyFeatureName_PetiteCapitals	= 0x70616370,
        CanvasTypographyFeatureName_ProportionalFigures	= 0x6d756e70,
        CanvasTypographyFeatureName_ProportionalWidths	= 0x64697770,
        CanvasTypographyFeatureName_QuarterWidths	= 0x64697771,
        CanvasTypographyFeatureName_RequiredLigatures	= 0x67696c72,
        CanvasTypographyFeatureName_RubyNotationForms	= 0x79627572,
        CanvasTypographyFeatureName_StylisticAlternates	= 0x746c6173,
        CanvasTypographyFeatureName_ScientificInferiors	= 0x666e6973,
        CanvasTypographyFeatureName_SmallCapitals	= 0x70636d73,
        CanvasTypographyFeatureName_SimplifiedForms	= 0x6c706d73,
        CanvasTypographyFeatureName_StylisticSet1	= 0x31307373,
        CanvasTypographyFeatureName_StylisticSet2	= 0x32307373,
        CanvasTypographyFeatureName_StylisticSet3	= 0x33307373,
        CanvasTypographyFeatureName_StylisticSet4	= 0x34307373,
        CanvasTypographyFeatureName_StylisticSet5	= 0x35307373,
        CanvasTypographyFeatureName_StylisticSet6	= 0x36307373,
        CanvasTypographyFeatureName_StylisticSet7	= 0x37307373,
        CanvasTypographyFeatureName_StylisticSet8	= 0x38307373,
        CanvasTypographyFeatureName_StylisticSet9	= 0x39307373,
        CanvasTypographyFeatureName_StylisticSet10	= 0x30317373,
        CanvasTypographyFeatureName_StylisticSet11	= 0x31317373,
        CanvasTypographyFeatureName_StylisticSet12	= 0x32317373,
        CanvasTypographyFeatureName_StylisticSet13	= 0x33317373,
        CanvasTypographyFeatureName_StylisticSet14	= 0x34317373,
        CanvasTypographyFeatureName_StylisticSet15	= 0x35317373,
        CanvasTypographyFeatureName_StylisticSet16	= 0x36317373,
        CanvasTypographyFeatureName_StylisticSet17	= 0x37317373,
        CanvasTypographyFeatureName_StylisticSet18	= 0x38317373,
        CanvasTypographyFeatureName_StylisticSet19	= 0x39317373,
        CanvasTypographyFeatureName_StylisticSet20	= 0x30327373,
        CanvasTypographyFeatureName_Subscript	= 0x73627573,
        CanvasTypographyFeatureName_Superscript	= 0x73707573,
        CanvasTypographyFeatureName_Swash	= 0x68737773,
        CanvasTypographyFeatureName_Titling	= 0x6c746974,
        CanvasTypographyFeatureName_TraditionalNameForms	= 0x6d616e74,
        CanvasTypographyFeatureName_TabularFigures	= 0x6d756e74,
        CanvasTypographyFeatureName_TraditionalForms	= 0x64617274,
        CanvasTypographyFeatureName_ThirdWidths	= 0x64697774,
        CanvasTypographyFeatureName_Unicase	= 0x63696e75,
        CanvasTypographyFeatureName_SlashedZero	= 0x6f72657a
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature
    {
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName Name;
    UINT32 Parameter;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature;

#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTypography[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTypography";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0141 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasTypographyFeatureName
                        {
                            None	= 0,
                            Default	= 0x746c6664,
                            VerticalWriting	= 0x74726576,
                            VerticalAlternatesAndRotation	= 0x32747276,
                            AlternativeFractions	= 0x63726661,
                            PetiteCapitalsFromCapitals	= 0x63703263,
                            SmallCapitalsFromCapitals	= 0x63733263,
                            ContextualAlternates	= 0x746c6163,
                            CaseSensitiveForms	= 0x65736163,
                            GlyphCompositionDecomposition	= 0x706d6363,
                            ContextualLigatures	= 0x67696c63,
                            CapitalSpacing	= 0x70737063,
                            ContextualSwash	= 0x68777363,
                            CursivePositioning	= 0x73727563,
                            DiscretionaryLigatures	= 0x67696c64,
                            ExpertForms	= 0x74707865,
                            Fractions	= 0x63617266,
                            FullWidth	= 0x64697766,
                            HalfForms	= 0x666c6168,
                            HalantForms	= 0x6e6c6168,
                            AlternateHalfWidth	= 0x746c6168,
                            HistoricalForms	= 0x74736968,
                            HorizontalKanaAlternates	= 0x616e6b68,
                            HistoricalLigatures	= 0x67696c68,
                            HalfWidth	= 0x64697768,
                            HojoKanjiForms	= 0x6f6a6f68,
                            Jis04Forms	= 0x3430706a,
                            Jis78Forms	= 0x3837706a,
                            Jis83Forms	= 0x3338706a,
                            Jis90Forms	= 0x3039706a,
                            Kerning	= 0x6e72656b,
                            StandardLigatures	= 0x6167696c,
                            LiningFigures	= 0x6d756e6c,
                            LocalizedForms	= 0x6c636f6c,
                            MarkPositioning	= 0x6b72616d,
                            MathematicalGreek	= 0x6b72676d,
                            MarkToMarkPositioning	= 0x6b6d6b6d,
                            AlternateAnnotationForms	= 0x746c616e,
                            NlcKanjiForms	= 0x6b636c6e,
                            OldStyleFigures	= 0x6d756e6f,
                            Ordinals	= 0x6e64726f,
                            ProportionalAlternateWidth	= 0x746c6170,
                            PetiteCapitals	= 0x70616370,
                            ProportionalFigures	= 0x6d756e70,
                            ProportionalWidths	= 0x64697770,
                            QuarterWidths	= 0x64697771,
                            RequiredLigatures	= 0x67696c72,
                            RubyNotationForms	= 0x79627572,
                            StylisticAlternates	= 0x746c6173,
                            ScientificInferiors	= 0x666e6973,
                            SmallCapitals	= 0x70636d73,
                            SimplifiedForms	= 0x6c706d73,
                            StylisticSet1	= 0x31307373,
                            StylisticSet2	= 0x32307373,
                            StylisticSet3	= 0x33307373,
                            StylisticSet4	= 0x34307373,
                            StylisticSet5	= 0x35307373,
                            StylisticSet6	= 0x36307373,
                            StylisticSet7	= 0x37307373,
                            StylisticSet8	= 0x38307373,
                            StylisticSet9	= 0x39307373,
                            StylisticSet10	= 0x30317373,
                            StylisticSet11	= 0x31317373,
                            StylisticSet12	= 0x32317373,
                            StylisticSet13	= 0x33317373,
                            StylisticSet14	= 0x34317373,
                            StylisticSet15	= 0x35317373,
                            StylisticSet16	= 0x36317373,
                            StylisticSet17	= 0x37317373,
                            StylisticSet18	= 0x38317373,
                            StylisticSet19	= 0x39317373,
                            StylisticSet20	= 0x30327373,
                            Subscript	= 0x73627573,
                            Superscript	= 0x73707573,
                            Swash	= 0x68737773,
                            Titling	= 0x6c746974,
                            TraditionalNameForms	= 0x6d616e74,
                            TabularFigures	= 0x6d756e74,
                            TraditionalForms	= 0x64617274,
                            ThirdWidths	= 0x64697774,
                            Unicase	= 0x63696e75,
                            SlashedZero	= 0x6f72657a
                        } ;

                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_None = CanvasTypographyFeatureName::None;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Default = CanvasTypographyFeatureName::Default;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_VerticalWriting = CanvasTypographyFeatureName::VerticalWriting;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_VerticalAlternatesAndRotation = CanvasTypographyFeatureName::VerticalAlternatesAndRotation;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_AlternativeFractions = CanvasTypographyFeatureName::AlternativeFractions;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_PetiteCapitalsFromCapitals = CanvasTypographyFeatureName::PetiteCapitalsFromCapitals;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_SmallCapitalsFromCapitals = CanvasTypographyFeatureName::SmallCapitalsFromCapitals;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_ContextualAlternates = CanvasTypographyFeatureName::ContextualAlternates;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_CaseSensitiveForms = CanvasTypographyFeatureName::CaseSensitiveForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_GlyphCompositionDecomposition = CanvasTypographyFeatureName::GlyphCompositionDecomposition;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_ContextualLigatures = CanvasTypographyFeatureName::ContextualLigatures;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_CapitalSpacing = CanvasTypographyFeatureName::CapitalSpacing;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_ContextualSwash = CanvasTypographyFeatureName::ContextualSwash;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_CursivePositioning = CanvasTypographyFeatureName::CursivePositioning;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_DiscretionaryLigatures = CanvasTypographyFeatureName::DiscretionaryLigatures;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_ExpertForms = CanvasTypographyFeatureName::ExpertForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Fractions = CanvasTypographyFeatureName::Fractions;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_FullWidth = CanvasTypographyFeatureName::FullWidth;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_HalfForms = CanvasTypographyFeatureName::HalfForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_HalantForms = CanvasTypographyFeatureName::HalantForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_AlternateHalfWidth = CanvasTypographyFeatureName::AlternateHalfWidth;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_HistoricalForms = CanvasTypographyFeatureName::HistoricalForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_HorizontalKanaAlternates = CanvasTypographyFeatureName::HorizontalKanaAlternates;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_HistoricalLigatures = CanvasTypographyFeatureName::HistoricalLigatures;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_HalfWidth = CanvasTypographyFeatureName::HalfWidth;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_HojoKanjiForms = CanvasTypographyFeatureName::HojoKanjiForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Jis04Forms = CanvasTypographyFeatureName::Jis04Forms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Jis78Forms = CanvasTypographyFeatureName::Jis78Forms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Jis83Forms = CanvasTypographyFeatureName::Jis83Forms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Jis90Forms = CanvasTypographyFeatureName::Jis90Forms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Kerning = CanvasTypographyFeatureName::Kerning;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StandardLigatures = CanvasTypographyFeatureName::StandardLigatures;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_LiningFigures = CanvasTypographyFeatureName::LiningFigures;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_LocalizedForms = CanvasTypographyFeatureName::LocalizedForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_MarkPositioning = CanvasTypographyFeatureName::MarkPositioning;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_MathematicalGreek = CanvasTypographyFeatureName::MathematicalGreek;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_MarkToMarkPositioning = CanvasTypographyFeatureName::MarkToMarkPositioning;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_AlternateAnnotationForms = CanvasTypographyFeatureName::AlternateAnnotationForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_NlcKanjiForms = CanvasTypographyFeatureName::NlcKanjiForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_OldStyleFigures = CanvasTypographyFeatureName::OldStyleFigures;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Ordinals = CanvasTypographyFeatureName::Ordinals;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_ProportionalAlternateWidth = CanvasTypographyFeatureName::ProportionalAlternateWidth;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_PetiteCapitals = CanvasTypographyFeatureName::PetiteCapitals;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_ProportionalFigures = CanvasTypographyFeatureName::ProportionalFigures;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_ProportionalWidths = CanvasTypographyFeatureName::ProportionalWidths;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_QuarterWidths = CanvasTypographyFeatureName::QuarterWidths;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_RequiredLigatures = CanvasTypographyFeatureName::RequiredLigatures;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_RubyNotationForms = CanvasTypographyFeatureName::RubyNotationForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticAlternates = CanvasTypographyFeatureName::StylisticAlternates;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_ScientificInferiors = CanvasTypographyFeatureName::ScientificInferiors;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_SmallCapitals = CanvasTypographyFeatureName::SmallCapitals;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_SimplifiedForms = CanvasTypographyFeatureName::SimplifiedForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet1 = CanvasTypographyFeatureName::StylisticSet1;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet2 = CanvasTypographyFeatureName::StylisticSet2;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet3 = CanvasTypographyFeatureName::StylisticSet3;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet4 = CanvasTypographyFeatureName::StylisticSet4;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet5 = CanvasTypographyFeatureName::StylisticSet5;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet6 = CanvasTypographyFeatureName::StylisticSet6;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet7 = CanvasTypographyFeatureName::StylisticSet7;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet8 = CanvasTypographyFeatureName::StylisticSet8;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet9 = CanvasTypographyFeatureName::StylisticSet9;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet10 = CanvasTypographyFeatureName::StylisticSet10;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet11 = CanvasTypographyFeatureName::StylisticSet11;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet12 = CanvasTypographyFeatureName::StylisticSet12;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet13 = CanvasTypographyFeatureName::StylisticSet13;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet14 = CanvasTypographyFeatureName::StylisticSet14;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet15 = CanvasTypographyFeatureName::StylisticSet15;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet16 = CanvasTypographyFeatureName::StylisticSet16;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet17 = CanvasTypographyFeatureName::StylisticSet17;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet18 = CanvasTypographyFeatureName::StylisticSet18;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet19 = CanvasTypographyFeatureName::StylisticSet19;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet20 = CanvasTypographyFeatureName::StylisticSet20;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Subscript = CanvasTypographyFeatureName::Subscript;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Superscript = CanvasTypographyFeatureName::Superscript;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Swash = CanvasTypographyFeatureName::Swash;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Titling = CanvasTypographyFeatureName::Titling;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_TraditionalNameForms = CanvasTypographyFeatureName::TraditionalNameForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_TabularFigures = CanvasTypographyFeatureName::TabularFigures;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_TraditionalForms = CanvasTypographyFeatureName::TraditionalForms;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_ThirdWidths = CanvasTypographyFeatureName::ThirdWidths;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_Unicase = CanvasTypographyFeatureName::Unicase;
                    const MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName_SlashedZero = CanvasTypographyFeatureName::SlashedZero;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasTypographyFeatureName CanvasTypographyFeatureName;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasTypographyFeature
                        {
                        CanvasTypographyFeatureName Name;
                        UINT32 Parameter;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasTypographyFeature CanvasTypographyFeature;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0141_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0141_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("F15BC312-447F-44ED-8BEC-7E40F4A4DFC8")
                        ICanvasTypography : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE AddFeature( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeature feature) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddFeatureWithNameAndParameter( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName name,
                                /* [in] */ UINT32 parameter) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFeatures( 
                                /* [out] */ UINT32 *featureCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeature **features) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTypography = __uuidof(ICanvasTypography);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypographyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *AddFeature )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature feature);
        
        HRESULT ( STDMETHODCALLTYPE *AddFeatureWithNameAndParameter )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName name,
            /* [in] */ UINT32 parameter);
        
        HRESULT ( STDMETHODCALLTYPE *GetFeatures )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
            /* [out] */ UINT32 *featureCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature **features);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypographyVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypographyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_AddFeature(This,feature)	\
    ( (This)->lpVtbl -> AddFeature(This,feature) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_AddFeatureWithNameAndParameter(This,name,parameter)	\
    ( (This)->lpVtbl -> AddFeatureWithNameAndParameter(This,name,parameter) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_GetFeatures(This,featureCount,features)	\
    ( (This)->lpVtbl -> GetFeatures(This,featureCount,features) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0142 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTypography_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTypography_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTypography[] = L"Microsoft.Graphics.Canvas.Text.CanvasTypography";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
class CanvasTextLayout;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion
    {
    int CharacterIndex;
    int CharacterCount;
    __x_ABI_CWindows_CFoundation_CRect LayoutBounds;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion;

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties
    {
        CanvasClusterProperties_None	= 0,
        CanvasClusterProperties_CanWrapLineAfter	= 0x1,
        CanvasClusterProperties_Whitespace	= 0x2,
        CanvasClusterProperties_Newline	= 0x4,
        CanvasClusterProperties_SoftHyphen	= 0x8,
        CanvasClusterProperties_RightToLeft	= 0x10
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties;


#endif /* end if !defined(__cplusplus) */


#else
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
#if defined(MIDL_ENUM)
typedef MIDL_ENUM CanvasClusterProperties CanvasClusterProperties;
#else
typedef enum class CanvasClusterProperties CanvasClusterProperties;
#endif
DEFINE_ENUM_FLAG_OPERATORS(CanvasClusterProperties)
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics
    {
    int CharacterCount;
    float Width;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties Properties;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics;

#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics
    {
    int CharacterCount;
    int TrailingWhitespaceCount;
    int TerminalNewlineCount;
    float Height;
    float Baseline;
    boolean IsTrimmed;
    float LeadingWhitespaceBefore;
    float LeadingWhitespaceAfter;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics;

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation
    {
        CanvasGlyphOrientation_Upright	= 0,
        CanvasGlyphOrientation_Clockwise90Degrees	= ( CanvasGlyphOrientation_Upright + 1 ) ,
        CanvasGlyphOrientation_Clockwise180Degrees	= ( CanvasGlyphOrientation_Clockwise90Degrees + 1 ) ,
        CanvasGlyphOrientation_Clockwise270Degrees	= ( CanvasGlyphOrientation_Clockwise180Degrees + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextLayout";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0142 */
/* [local] */ 


#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasTextLayoutRegion
                        {
                        int CharacterIndex;
                        int CharacterCount;
                        ABI::Windows::Foundation::Rect LayoutBounds;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasTextLayoutRegion CanvasTextLayoutRegion;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasClusterProperties
                        {
                            None	= 0,
                            CanWrapLineAfter	= 0x1,
                            Whitespace	= 0x2,
                            Newline	= 0x4,
                            SoftHyphen	= 0x8,
                            RightToLeft	= 0x10
                        } ;

                    const MIDL_ENUM CanvasClusterProperties CanvasClusterProperties_None = CanvasClusterProperties::None;
                    const MIDL_ENUM CanvasClusterProperties CanvasClusterProperties_CanWrapLineAfter = CanvasClusterProperties::CanWrapLineAfter;
                    const MIDL_ENUM CanvasClusterProperties CanvasClusterProperties_Whitespace = CanvasClusterProperties::Whitespace;
                    const MIDL_ENUM CanvasClusterProperties CanvasClusterProperties_Newline = CanvasClusterProperties::Newline;
                    const MIDL_ENUM CanvasClusterProperties CanvasClusterProperties_SoftHyphen = CanvasClusterProperties::SoftHyphen;
                    const MIDL_ENUM CanvasClusterProperties CanvasClusterProperties_RightToLeft = CanvasClusterProperties::RightToLeft;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasClusterProperties CanvasClusterProperties;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasClusterMetrics
                        {
                        int CharacterCount;
                        float Width;
                        CanvasClusterProperties Properties;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasClusterMetrics CanvasClusterMetrics;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasLineMetrics
                        {
                        int CharacterCount;
                        int TrailingWhitespaceCount;
                        int TerminalNewlineCount;
                        float Height;
                        float Baseline;
                        boolean IsTrimmed;
                        float LeadingWhitespaceBefore;
                        float LeadingWhitespaceAfter;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasLineMetrics CanvasLineMetrics;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasGlyphOrientation
                        {
                            Upright	= 0,
                            Clockwise90Degrees	= ( Upright + 1 ) ,
                            Clockwise180Degrees	= ( Clockwise90Degrees + 1 ) ,
                            Clockwise270Degrees	= ( Clockwise180Degrees + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasGlyphOrientation CanvasGlyphOrientation_Upright = CanvasGlyphOrientation::Upright;
                    const MIDL_ENUM CanvasGlyphOrientation CanvasGlyphOrientation_Clockwise90Degrees = CanvasGlyphOrientation::Clockwise90Degrees;
                    const MIDL_ENUM CanvasGlyphOrientation CanvasGlyphOrientation_Clockwise180Degrees = CanvasGlyphOrientation::Clockwise180Degrees;
                    const MIDL_ENUM CanvasGlyphOrientation CanvasGlyphOrientation_Clockwise270Degrees = CanvasGlyphOrientation::Clockwise270Degrees;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasGlyphOrientation CanvasGlyphOrientation;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0142_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0142_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("BAE63E54-48AE-4446-A2C7-B6EF93806C20")
                        ICanvasTextLayout : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE GetFormatChangeIndices( 
                                /* [out] */ UINT32 *stopCount,
                                /* [out][size_is][size_is][retval] */ INT32 **stops) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Direction( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Direction( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFontFamily( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFontSize( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFontStretch( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStretch *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFontStyle( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStyle *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFontWeight( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontWeight *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IncrementalTabStop( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IncrementalTabStop( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineSpacing( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineSpacing( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineSpacingBaseline( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineSpacingBaseline( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultLocaleName( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HorizontalAlignment( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HorizontalAlignment( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingGranularity( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingGranularity( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingDelimiter( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingDelimiter( 
                                /* [in] */ HSTRING value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingDelimiterCount( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingDelimiterCount( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WordWrapping( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasWordWrapping *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_WordWrapping( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasWordWrapping value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Options( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Options( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineSpacingMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineSpacingMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingSign( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingSign( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CustomTrimmingSign( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject **value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CustomTrimmingSign( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RequestedSize( 
                                /* [out][retval] */ ABI::Windows::Foundation::Size *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RequestedSize( 
                                /* [in] */ ABI::Windows::Foundation::Size value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetMinimumLineLength( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetBrush( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush **brush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetCustomBrush( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ IInspectable **brush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFontFamily( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ HSTRING *fontFamily) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFontSize( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ float *fontSize) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFontStretch( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStretch *fontStretch) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFontStyle( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStyle *fontStyle) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFontWeight( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ ABI::Windows::UI::Text::FontWeight *fontWeight) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetLocaleName( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ HSTRING *localeName) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetStrikethrough( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ boolean *hasStrikethrough) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetUnderline( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ boolean *hasUnderline) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetInlineObject( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject **inlineObject) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetColor( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ ABI::Windows::UI::Color color) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetBrush( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetCustomBrush( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ IInspectable *brush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFontFamily( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ HSTRING fontFamily) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFontSize( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ float fontSize) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFontStretch( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ ABI::Windows::UI::Text::FontStretch fontStretch) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFontStyle( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ ABI::Windows::UI::Text::FontStyle fontStyle) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFontWeight( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ ABI::Windows::UI::Text::FontWeight fontWeight) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetLocaleName( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ HSTRING name) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetStrikethrough( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ boolean hasStrikethrough) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetUnderline( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ boolean hasUnderline) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetInlineObject( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject *inlineObject) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE DrawToTextRenderer( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer *textRenderer,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 position) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE DrawToTextRendererWithCoords( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer *textRenderer,
                                /* [in] */ float x,
                                /* [in] */ float y) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineMetrics( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasLineMetrics **valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClusterMetrics( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasClusterMetrics **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetTypography( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography *typography) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetTypography( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography **typography) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LayoutBounds( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LayoutBoundsIncludingTrailingWhitespace( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineCount( 
                                /* [out][retval] */ INT32 *lineCount) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MaximumBidiReorderingDepth( 
                                /* [out][retval] */ int *depth) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DrawBounds( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HitTest( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [out][retval] */ boolean *isHit) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HitTestWithCoords( 
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [out][retval] */ boolean *isHit) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HitTestWithDescription( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion *textLayoutRegion,
                                /* [out][retval] */ boolean *isHit) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HitTestWithDescriptionAndCoords( 
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion *textLayoutRegion,
                                /* [out][retval] */ boolean *isHit) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HitTestWithDescriptionAndTrailingSide( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion *textLayoutRegion,
                                /* [out] */ boolean *trailingSideOfCharacter,
                                /* [out][retval] */ boolean *isHit) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HitTestWithDescriptionAndCoordsAndTrailingSide( 
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion *textLayoutRegion,
                                /* [out] */ boolean *trailingSideOfCharacter,
                                /* [out][retval] */ boolean *isHit) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetCaretPosition( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ boolean trailingSideOfCharacter,
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *location) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetCaretPositionWithDescription( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ boolean trailingSideOfCharacter,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion *textLayoutRegion,
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *location) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetCharacterRegions( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [out] */ UINT32 *hitTestDescriptionCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion **hitTestDescriptions) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetPairKerning( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ boolean *hasPairKerning) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetPairKerning( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ boolean hasPairKerning) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetLeadingCharacterSpacing( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ float *leadingSpacing) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetTrailingCharacterSpacing( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ float *trailingSpacing) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetMinimumCharacterAdvance( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ float *minimumAdvance) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetCharacterSpacing( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ float leadingSpacing,
                                /* [in] */ float trailingSpacing,
                                /* [in] */ float minimumAdvance) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VerticalGlyphOrientation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VerticalGlyphOrientation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OpticalAlignment( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OpticalAlignment( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LastLineWrapping( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LastLineWrapping( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextLayout = __uuidof(ICanvasTextLayout);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatChangeIndices )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out] */ UINT32 *stopCount,
            /* [out][size_is][size_is][retval] */ INT32 **stops);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Direction )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Direction )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFontFamily )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFontSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFontStretch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStretch *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFontStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStyle *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFontWeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontWeight *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncrementalTabStop )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncrementalTabStop )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacingBaseline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacingBaseline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultLocaleName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingGranularity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingGranularity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingDelimiter )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingDelimiter )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingDelimiterCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingDelimiterCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Options )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Options )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacingMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacingMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingSign )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingSign )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomTrimmingSign )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomTrimmingSign )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RequestedSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RequestedSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize value);
        
        HRESULT ( STDMETHODCALLTYPE *GetMinimumLineLength )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ float *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush **brush);
        
        HRESULT ( STDMETHODCALLTYPE *GetCustomBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ IInspectable **brush);
        
        HRESULT ( STDMETHODCALLTYPE *GetFontFamily )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ HSTRING *fontFamily);
        
        HRESULT ( STDMETHODCALLTYPE *GetFontSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ float *fontSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetFontStretch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStretch *fontStretch);
        
        HRESULT ( STDMETHODCALLTYPE *GetFontStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStyle *fontStyle);
        
        HRESULT ( STDMETHODCALLTYPE *GetFontWeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontWeight *fontWeight);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocaleName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ HSTRING *localeName);
        
        HRESULT ( STDMETHODCALLTYPE *GetStrikethrough )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ boolean *hasStrikethrough);
        
        HRESULT ( STDMETHODCALLTYPE *GetUnderline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ boolean *hasUnderline);
        
        HRESULT ( STDMETHODCALLTYPE *GetInlineObject )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject **inlineObject);
        
        HRESULT ( STDMETHODCALLTYPE *SetColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *SetBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *SetCustomBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ IInspectable *brush);
        
        HRESULT ( STDMETHODCALLTYPE *SetFontFamily )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ HSTRING fontFamily);
        
        HRESULT ( STDMETHODCALLTYPE *SetFontSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ float fontSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetFontStretch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontStretch fontStretch);
        
        HRESULT ( STDMETHODCALLTYPE *SetFontStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontStyle fontStyle);
        
        HRESULT ( STDMETHODCALLTYPE *SetFontWeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontWeight fontWeight);
        
        HRESULT ( STDMETHODCALLTYPE *SetLocaleName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ HSTRING name);
        
        HRESULT ( STDMETHODCALLTYPE *SetStrikethrough )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ boolean hasStrikethrough);
        
        HRESULT ( STDMETHODCALLTYPE *SetUnderline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ boolean hasUnderline);
        
        HRESULT ( STDMETHODCALLTYPE *SetInlineObject )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject *inlineObject);
        
        HRESULT ( STDMETHODCALLTYPE *DrawToTextRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer *textRenderer,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 position);
        
        HRESULT ( STDMETHODCALLTYPE *DrawToTextRendererWithCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer *textRenderer,
            /* [in] */ float x,
            /* [in] */ float y);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineMetrics )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics **valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClusterMetrics )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *SetTypography )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography *typography);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypography )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography **typography);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LayoutBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LayoutBoundsIncludingTrailingWhitespace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ INT32 *lineCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaximumBidiReorderingDepth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ int *depth);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DrawBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *HitTest )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [out][retval] */ boolean *isHit);
        
        HRESULT ( STDMETHODCALLTYPE *HitTestWithCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [out][retval] */ boolean *isHit);
        
        HRESULT ( STDMETHODCALLTYPE *HitTestWithDescription )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion *textLayoutRegion,
            /* [out][retval] */ boolean *isHit);
        
        HRESULT ( STDMETHODCALLTYPE *HitTestWithDescriptionAndCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion *textLayoutRegion,
            /* [out][retval] */ boolean *isHit);
        
        HRESULT ( STDMETHODCALLTYPE *HitTestWithDescriptionAndTrailingSide )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion *textLayoutRegion,
            /* [out] */ boolean *trailingSideOfCharacter,
            /* [out][retval] */ boolean *isHit);
        
        HRESULT ( STDMETHODCALLTYPE *HitTestWithDescriptionAndCoordsAndTrailingSide )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion *textLayoutRegion,
            /* [out] */ boolean *trailingSideOfCharacter,
            /* [out][retval] */ boolean *isHit);
        
        HRESULT ( STDMETHODCALLTYPE *GetCaretPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ boolean trailingSideOfCharacter,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *location);
        
        HRESULT ( STDMETHODCALLTYPE *GetCaretPositionWithDescription )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ boolean trailingSideOfCharacter,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion *textLayoutRegion,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *location);
        
        HRESULT ( STDMETHODCALLTYPE *GetCharacterRegions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [out] */ UINT32 *hitTestDescriptionCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion **hitTestDescriptions);
        
        HRESULT ( STDMETHODCALLTYPE *GetPairKerning )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ boolean *hasPairKerning);
        
        HRESULT ( STDMETHODCALLTYPE *SetPairKerning )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ boolean hasPairKerning);
        
        HRESULT ( STDMETHODCALLTYPE *GetLeadingCharacterSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ float *leadingSpacing);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrailingCharacterSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ float *trailingSpacing);
        
        HRESULT ( STDMETHODCALLTYPE *GetMinimumCharacterAdvance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ float *minimumAdvance);
        
        HRESULT ( STDMETHODCALLTYPE *SetCharacterSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ float leadingSpacing,
            /* [in] */ float trailingSpacing,
            /* [in] */ float minimumAdvance);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalGlyphOrientation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalGlyphOrientation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OpticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastLineWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LastLineWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFormatChangeIndices(This,stopCount,stops)	\
    ( (This)->lpVtbl -> GetFormatChangeIndices(This,stopCount,stops) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_Direction(This,value)	\
    ( (This)->lpVtbl -> get_Direction(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_Direction(This,value)	\
    ( (This)->lpVtbl -> put_Direction(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontFamily(This,value)	\
    ( (This)->lpVtbl -> get_DefaultFontFamily(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontSize(This,value)	\
    ( (This)->lpVtbl -> get_DefaultFontSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontStretch(This,value)	\
    ( (This)->lpVtbl -> get_DefaultFontStretch(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontStyle(This,value)	\
    ( (This)->lpVtbl -> get_DefaultFontStyle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontWeight(This,value)	\
    ( (This)->lpVtbl -> get_DefaultFontWeight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_IncrementalTabStop(This,value)	\
    ( (This)->lpVtbl -> get_IncrementalTabStop(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_IncrementalTabStop(This,value)	\
    ( (This)->lpVtbl -> put_IncrementalTabStop(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineSpacing(This,value)	\
    ( (This)->lpVtbl -> get_LineSpacing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_LineSpacing(This,value)	\
    ( (This)->lpVtbl -> put_LineSpacing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineSpacingBaseline(This,value)	\
    ( (This)->lpVtbl -> get_LineSpacingBaseline(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_LineSpacingBaseline(This,value)	\
    ( (This)->lpVtbl -> put_LineSpacingBaseline(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultLocaleName(This,value)	\
    ( (This)->lpVtbl -> get_DefaultLocaleName(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_VerticalAlignment(This,value)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_VerticalAlignment(This,value)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_HorizontalAlignment(This,value)	\
    ( (This)->lpVtbl -> get_HorizontalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_HorizontalAlignment(This,value)	\
    ( (This)->lpVtbl -> put_HorizontalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_TrimmingGranularity(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingGranularity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_TrimmingGranularity(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingGranularity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_TrimmingDelimiter(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingDelimiter(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_TrimmingDelimiter(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingDelimiter(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_TrimmingDelimiterCount(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingDelimiterCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_TrimmingDelimiterCount(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingDelimiterCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_WordWrapping(This,value)	\
    ( (This)->lpVtbl -> get_WordWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_WordWrapping(This,value)	\
    ( (This)->lpVtbl -> put_WordWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_Options(This,value)	\
    ( (This)->lpVtbl -> get_Options(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_Options(This,value)	\
    ( (This)->lpVtbl -> put_Options(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineSpacingMode(This,value)	\
    ( (This)->lpVtbl -> get_LineSpacingMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_LineSpacingMode(This,value)	\
    ( (This)->lpVtbl -> put_LineSpacingMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_TrimmingSign(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingSign(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_TrimmingSign(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingSign(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_CustomTrimmingSign(This,value)	\
    ( (This)->lpVtbl -> get_CustomTrimmingSign(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_CustomTrimmingSign(This,value)	\
    ( (This)->lpVtbl -> put_CustomTrimmingSign(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_RequestedSize(This,value)	\
    ( (This)->lpVtbl -> get_RequestedSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_RequestedSize(This,value)	\
    ( (This)->lpVtbl -> put_RequestedSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetMinimumLineLength(This,value)	\
    ( (This)->lpVtbl -> GetMinimumLineLength(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetBrush(This,characterIndex,brush)	\
    ( (This)->lpVtbl -> GetBrush(This,characterIndex,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetCustomBrush(This,characterIndex,brush)	\
    ( (This)->lpVtbl -> GetCustomBrush(This,characterIndex,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontFamily(This,characterIndex,fontFamily)	\
    ( (This)->lpVtbl -> GetFontFamily(This,characterIndex,fontFamily) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontSize(This,characterIndex,fontSize)	\
    ( (This)->lpVtbl -> GetFontSize(This,characterIndex,fontSize) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontStretch(This,characterIndex,fontStretch)	\
    ( (This)->lpVtbl -> GetFontStretch(This,characterIndex,fontStretch) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontStyle(This,characterIndex,fontStyle)	\
    ( (This)->lpVtbl -> GetFontStyle(This,characterIndex,fontStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontWeight(This,characterIndex,fontWeight)	\
    ( (This)->lpVtbl -> GetFontWeight(This,characterIndex,fontWeight) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetLocaleName(This,characterIndex,localeName)	\
    ( (This)->lpVtbl -> GetLocaleName(This,characterIndex,localeName) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetStrikethrough(This,characterIndex,hasStrikethrough)	\
    ( (This)->lpVtbl -> GetStrikethrough(This,characterIndex,hasStrikethrough) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetUnderline(This,characterIndex,hasUnderline)	\
    ( (This)->lpVtbl -> GetUnderline(This,characterIndex,hasUnderline) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetInlineObject(This,characterIndex,inlineObject)	\
    ( (This)->lpVtbl -> GetInlineObject(This,characterIndex,inlineObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetColor(This,characterIndex,characterCount,color)	\
    ( (This)->lpVtbl -> SetColor(This,characterIndex,characterCount,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetBrush(This,characterIndex,characterCount,brush)	\
    ( (This)->lpVtbl -> SetBrush(This,characterIndex,characterCount,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetCustomBrush(This,characterIndex,characterCount,brush)	\
    ( (This)->lpVtbl -> SetCustomBrush(This,characterIndex,characterCount,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontFamily(This,characterIndex,characterCount,fontFamily)	\
    ( (This)->lpVtbl -> SetFontFamily(This,characterIndex,characterCount,fontFamily) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontSize(This,characterIndex,characterCount,fontSize)	\
    ( (This)->lpVtbl -> SetFontSize(This,characterIndex,characterCount,fontSize) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontStretch(This,characterIndex,characterCount,fontStretch)	\
    ( (This)->lpVtbl -> SetFontStretch(This,characterIndex,characterCount,fontStretch) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontStyle(This,characterIndex,characterCount,fontStyle)	\
    ( (This)->lpVtbl -> SetFontStyle(This,characterIndex,characterCount,fontStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontWeight(This,characterIndex,characterCount,fontWeight)	\
    ( (This)->lpVtbl -> SetFontWeight(This,characterIndex,characterCount,fontWeight) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetLocaleName(This,characterIndex,characterCount,name)	\
    ( (This)->lpVtbl -> SetLocaleName(This,characterIndex,characterCount,name) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetStrikethrough(This,characterIndex,characterCount,hasStrikethrough)	\
    ( (This)->lpVtbl -> SetStrikethrough(This,characterIndex,characterCount,hasStrikethrough) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetUnderline(This,characterIndex,characterCount,hasUnderline)	\
    ( (This)->lpVtbl -> SetUnderline(This,characterIndex,characterCount,hasUnderline) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetInlineObject(This,characterIndex,characterCount,inlineObject)	\
    ( (This)->lpVtbl -> SetInlineObject(This,characterIndex,characterCount,inlineObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_DrawToTextRenderer(This,textRenderer,position)	\
    ( (This)->lpVtbl -> DrawToTextRenderer(This,textRenderer,position) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_DrawToTextRendererWithCoords(This,textRenderer,x,y)	\
    ( (This)->lpVtbl -> DrawToTextRendererWithCoords(This,textRenderer,x,y) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineMetrics(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_LineMetrics(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_ClusterMetrics(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_ClusterMetrics(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetTypography(This,characterIndex,characterCount,typography)	\
    ( (This)->lpVtbl -> SetTypography(This,characterIndex,characterCount,typography) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetTypography(This,characterIndex,typography)	\
    ( (This)->lpVtbl -> GetTypography(This,characterIndex,typography) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LayoutBounds(This,bounds)	\
    ( (This)->lpVtbl -> get_LayoutBounds(This,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LayoutBoundsIncludingTrailingWhitespace(This,bounds)	\
    ( (This)->lpVtbl -> get_LayoutBoundsIncludingTrailingWhitespace(This,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineCount(This,lineCount)	\
    ( (This)->lpVtbl -> get_LineCount(This,lineCount) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_MaximumBidiReorderingDepth(This,depth)	\
    ( (This)->lpVtbl -> get_MaximumBidiReorderingDepth(This,depth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DrawBounds(This,bounds)	\
    ( (This)->lpVtbl -> get_DrawBounds(This,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTest(This,point,isHit)	\
    ( (This)->lpVtbl -> HitTest(This,point,isHit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithCoords(This,x,y,isHit)	\
    ( (This)->lpVtbl -> HitTestWithCoords(This,x,y,isHit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithDescription(This,point,textLayoutRegion,isHit)	\
    ( (This)->lpVtbl -> HitTestWithDescription(This,point,textLayoutRegion,isHit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithDescriptionAndCoords(This,x,y,textLayoutRegion,isHit)	\
    ( (This)->lpVtbl -> HitTestWithDescriptionAndCoords(This,x,y,textLayoutRegion,isHit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithDescriptionAndTrailingSide(This,point,textLayoutRegion,trailingSideOfCharacter,isHit)	\
    ( (This)->lpVtbl -> HitTestWithDescriptionAndTrailingSide(This,point,textLayoutRegion,trailingSideOfCharacter,isHit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithDescriptionAndCoordsAndTrailingSide(This,x,y,textLayoutRegion,trailingSideOfCharacter,isHit)	\
    ( (This)->lpVtbl -> HitTestWithDescriptionAndCoordsAndTrailingSide(This,x,y,textLayoutRegion,trailingSideOfCharacter,isHit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetCaretPosition(This,characterIndex,trailingSideOfCharacter,location)	\
    ( (This)->lpVtbl -> GetCaretPosition(This,characterIndex,trailingSideOfCharacter,location) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetCaretPositionWithDescription(This,characterIndex,trailingSideOfCharacter,textLayoutRegion,location)	\
    ( (This)->lpVtbl -> GetCaretPositionWithDescription(This,characterIndex,trailingSideOfCharacter,textLayoutRegion,location) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetCharacterRegions(This,characterIndex,characterCount,hitTestDescriptionCount,hitTestDescriptions)	\
    ( (This)->lpVtbl -> GetCharacterRegions(This,characterIndex,characterCount,hitTestDescriptionCount,hitTestDescriptions) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetPairKerning(This,characterIndex,hasPairKerning)	\
    ( (This)->lpVtbl -> GetPairKerning(This,characterIndex,hasPairKerning) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetPairKerning(This,characterIndex,characterCount,hasPairKerning)	\
    ( (This)->lpVtbl -> SetPairKerning(This,characterIndex,characterCount,hasPairKerning) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetLeadingCharacterSpacing(This,characterIndex,leadingSpacing)	\
    ( (This)->lpVtbl -> GetLeadingCharacterSpacing(This,characterIndex,leadingSpacing) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetTrailingCharacterSpacing(This,characterIndex,trailingSpacing)	\
    ( (This)->lpVtbl -> GetTrailingCharacterSpacing(This,characterIndex,trailingSpacing) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetMinimumCharacterAdvance(This,characterIndex,minimumAdvance)	\
    ( (This)->lpVtbl -> GetMinimumCharacterAdvance(This,characterIndex,minimumAdvance) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetCharacterSpacing(This,characterIndex,characterCount,leadingSpacing,trailingSpacing,minimumAdvance)	\
    ( (This)->lpVtbl -> SetCharacterSpacing(This,characterIndex,characterCount,leadingSpacing,trailingSpacing,minimumAdvance) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_VerticalGlyphOrientation(This,value)	\
    ( (This)->lpVtbl -> get_VerticalGlyphOrientation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_VerticalGlyphOrientation(This,value)	\
    ( (This)->lpVtbl -> put_VerticalGlyphOrientation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_OpticalAlignment(This,value)	\
    ( (This)->lpVtbl -> get_OpticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_OpticalAlignment(This,value)	\
    ( (This)->lpVtbl -> put_OpticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LastLineWrapping(This,value)	\
    ( (This)->lpVtbl -> get_LastLineWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_LastLineWrapping(This,value)	\
    ( (This)->lpVtbl -> put_LastLineWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0143 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0143 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0143_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0143_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("9C1F7179-ACD0-4680-93D5-95A6247E8F6B")
                        ICanvasTextLayoutFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ HSTRING textString,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *textFormat,
                                /* [in] */ float requestedWidth,
                                /* [in] */ float requestedHeight,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout **canvasTextLayout) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextLayoutFactory = __uuidof(ICanvasTextLayoutFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ HSTRING textString,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *textFormat,
            /* [in] */ float requestedWidth,
            /* [in] */ float requestedHeight,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout **canvasTextLayout);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_Create(This,resourceCreator,textString,textFormat,requestedWidth,requestedHeight,canvasTextLayout)	\
    ( (This)->lpVtbl -> Create(This,resourceCreator,textString,textFormat,requestedWidth,requestedHeight,canvasTextLayout) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0144 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutStatics[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0144 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0144_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0144_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("7F2B8FFD-6935-4F60-B409-6394A19C5EBC")
                        ICanvasTextLayoutStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE GetGlyphOrientationTransform( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation,
                                /* [in] */ boolean isSideways,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 position,
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Matrix3x2 *transform) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextLayoutStatics = __uuidof(ICanvasTextLayoutStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlyphOrientationTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation glyphOrientation,
            /* [in] */ boolean isSideways,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 position,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 *transform);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_GetGlyphOrientationTransform(This,glyphOrientation,isSideways,position,transform)	\
    ( (This)->lpVtbl -> GetGlyphOrientationTransform(This,glyphOrientation,isSideways,position,transform) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0145 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextLayout_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextLayout_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextLayout[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextLayout";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Geometry {
class CanvasPathBuilder;
} /*Geometry*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Geometry {
class CanvasGeometry;
} /*Geometry*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilder[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0145 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0145_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0145_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathBuilder */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("BCF5822F-8127-4E5C-96B8-29983B915541")
                        ICanvasPathBuilder : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE BeginFigureWithFigureFill( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 startPoint,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureFill figureFill) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE BeginFigure( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 startPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE BeginFigureAtCoordsWithFigureFill( 
                                /* [in] */ float startX,
                                /* [in] */ float startY,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureFill figureFill) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE BeginFigureAtCoords( 
                                /* [in] */ float startX,
                                /* [in] */ float startY) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddArcToPoint( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 endPoint,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [in] */ float rotationAngle,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasSweepDirection sweepDirection,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasArcSize arcSize) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddArcAroundEllipse( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [in] */ float startAngle,
                                /* [in] */ float sweepAngle) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddCubicBezier( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 controlPoint1,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 controlPoint2,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 endPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddLine( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 endPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddLineWithCoords( 
                                /* [in] */ float x,
                                /* [in] */ float y) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddQuadraticBezier( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 controlPoint,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 endPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFilledRegionDetermination( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination filledRegionDetermination) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetSegmentOptions( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureSegmentOptions figureSegmentOptions) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE EndFigure( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureLoop figureLoop) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddGeometry( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasPathBuilder = __uuidof(ICanvasPathBuilder);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *BeginFigureWithFigureFill )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 startPoint,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill figureFill);
        
        HRESULT ( STDMETHODCALLTYPE *BeginFigure )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 startPoint);
        
        HRESULT ( STDMETHODCALLTYPE *BeginFigureAtCoordsWithFigureFill )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ float startX,
            /* [in] */ float startY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill figureFill);
        
        HRESULT ( STDMETHODCALLTYPE *BeginFigureAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ float startX,
            /* [in] */ float startY);
        
        HRESULT ( STDMETHODCALLTYPE *AddArcToPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ float rotationAngle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection sweepDirection,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize arcSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddArcAroundEllipse )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ float startAngle,
            /* [in] */ float sweepAngle);
        
        HRESULT ( STDMETHODCALLTYPE *AddCubicBezier )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 controlPoint1,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 controlPoint2,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint);
        
        HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint);
        
        HRESULT ( STDMETHODCALLTYPE *AddLineWithCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ float x,
            /* [in] */ float y);
        
        HRESULT ( STDMETHODCALLTYPE *AddQuadraticBezier )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 controlPoint,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint);
        
        HRESULT ( STDMETHODCALLTYPE *SetFilledRegionDetermination )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination filledRegionDetermination);
        
        HRESULT ( STDMETHODCALLTYPE *SetSegmentOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions figureSegmentOptions);
        
        HRESULT ( STDMETHODCALLTYPE *EndFigure )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop figureLoop);
        
        HRESULT ( STDMETHODCALLTYPE *AddGeometry )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_BeginFigureWithFigureFill(This,startPoint,figureFill)	\
    ( (This)->lpVtbl -> BeginFigureWithFigureFill(This,startPoint,figureFill) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_BeginFigure(This,startPoint)	\
    ( (This)->lpVtbl -> BeginFigure(This,startPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_BeginFigureAtCoordsWithFigureFill(This,startX,startY,figureFill)	\
    ( (This)->lpVtbl -> BeginFigureAtCoordsWithFigureFill(This,startX,startY,figureFill) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_BeginFigureAtCoords(This,startX,startY)	\
    ( (This)->lpVtbl -> BeginFigureAtCoords(This,startX,startY) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddArcToPoint(This,endPoint,radiusX,radiusY,rotationAngle,sweepDirection,arcSize)	\
    ( (This)->lpVtbl -> AddArcToPoint(This,endPoint,radiusX,radiusY,rotationAngle,sweepDirection,arcSize) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddArcAroundEllipse(This,centerPoint,radiusX,radiusY,startAngle,sweepAngle)	\
    ( (This)->lpVtbl -> AddArcAroundEllipse(This,centerPoint,radiusX,radiusY,startAngle,sweepAngle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddCubicBezier(This,controlPoint1,controlPoint2,endPoint)	\
    ( (This)->lpVtbl -> AddCubicBezier(This,controlPoint1,controlPoint2,endPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddLine(This,endPoint)	\
    ( (This)->lpVtbl -> AddLine(This,endPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddLineWithCoords(This,x,y)	\
    ( (This)->lpVtbl -> AddLineWithCoords(This,x,y) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddQuadraticBezier(This,controlPoint,endPoint)	\
    ( (This)->lpVtbl -> AddQuadraticBezier(This,controlPoint,endPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_SetFilledRegionDetermination(This,filledRegionDetermination)	\
    ( (This)->lpVtbl -> SetFilledRegionDetermination(This,filledRegionDetermination) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_SetSegmentOptions(This,figureSegmentOptions)	\
    ( (This)->lpVtbl -> SetSegmentOptions(This,figureSegmentOptions) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_EndFigure(This,figureLoop)	\
    ( (This)->lpVtbl -> EndFigure(This,figureLoop) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddGeometry(This,geometry)	\
    ( (This)->lpVtbl -> AddGeometry(This,geometry) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0146 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilderFactory[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0146 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0146_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0146_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathBuilderFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("AC2BEE14-EFD1-4343-8E53-BA62153D8966")
                        ICanvasPathBuilderFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathBuilder **canvasPathBuilder) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasPathBuilderFactory = __uuidof(ICanvasPathBuilderFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder **canvasPathBuilder);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_Create(This,resourceCreator,canvasPathBuilder)	\
    ( (This)->lpVtbl -> Create(This,resourceCreator,canvasPathBuilder) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0147 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasPathBuilder_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasPathBuilder_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasPathBuilder[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasActiveLayer;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasActiveLayer[] = L"Microsoft.Graphics.Canvas.ICanvasActiveLayer";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0147 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0147_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0147_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("49ECFC58-5E1C-4EE3-8088-542F94E93C60")
                    ICanvasActiveLayer : public IInspectable
                    {
                    public:
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasActiveLayer = __uuidof(ICanvasActiveLayer);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This,
            /* [out] */ TrustLevel *trustLevel);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0148 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasActiveLayer_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasActiveLayer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasActiveLayer[] = L"Microsoft.Graphics.Canvas.CanvasActiveLayer";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge
    {
        CanvasGradientMeshPatchEdge_Aliased	= 0,
        CanvasGradientMeshPatchEdge_Antialiased	= 1,
        CanvasGradientMeshPatchEdge_AliasedAndInflated	= 2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch
    {
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point00;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point01;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point02;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point03;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point10;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point11;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point12;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point13;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point20;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point21;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point22;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point23;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point30;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point31;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point32;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point33;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector4 Color00;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector4 Color03;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector4 Color30;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector4 Color33;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge00To03;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge03To33;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge33To30;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge30To00;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch;

#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Geometry {
class CanvasGradientMesh;
} /*Geometry*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMesh[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0148 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasGradientMeshPatchEdge
                        {
                            Aliased	= 0,
                            Antialiased	= 1,
                            AliasedAndInflated	= 2
                        } ;

                    const MIDL_ENUM CanvasGradientMeshPatchEdge CanvasGradientMeshPatchEdge_Aliased = CanvasGradientMeshPatchEdge::Aliased;
                    const MIDL_ENUM CanvasGradientMeshPatchEdge CanvasGradientMeshPatchEdge_Antialiased = CanvasGradientMeshPatchEdge::Antialiased;
                    const MIDL_ENUM CanvasGradientMeshPatchEdge CanvasGradientMeshPatchEdge_AliasedAndInflated = CanvasGradientMeshPatchEdge::AliasedAndInflated;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef MIDL_ENUM CanvasGradientMeshPatchEdge CanvasGradientMeshPatchEdge;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    struct CanvasGradientMeshPatch
                        {
                        ABI::Windows::Foundation::Numerics::Vector2 Point00;
                        ABI::Windows::Foundation::Numerics::Vector2 Point01;
                        ABI::Windows::Foundation::Numerics::Vector2 Point02;
                        ABI::Windows::Foundation::Numerics::Vector2 Point03;
                        ABI::Windows::Foundation::Numerics::Vector2 Point10;
                        ABI::Windows::Foundation::Numerics::Vector2 Point11;
                        ABI::Windows::Foundation::Numerics::Vector2 Point12;
                        ABI::Windows::Foundation::Numerics::Vector2 Point13;
                        ABI::Windows::Foundation::Numerics::Vector2 Point20;
                        ABI::Windows::Foundation::Numerics::Vector2 Point21;
                        ABI::Windows::Foundation::Numerics::Vector2 Point22;
                        ABI::Windows::Foundation::Numerics::Vector2 Point23;
                        ABI::Windows::Foundation::Numerics::Vector2 Point30;
                        ABI::Windows::Foundation::Numerics::Vector2 Point31;
                        ABI::Windows::Foundation::Numerics::Vector2 Point32;
                        ABI::Windows::Foundation::Numerics::Vector2 Point33;
                        ABI::Windows::Foundation::Numerics::Vector4 Color00;
                        ABI::Windows::Foundation::Numerics::Vector4 Color03;
                        ABI::Windows::Foundation::Numerics::Vector4 Color30;
                        ABI::Windows::Foundation::Numerics::Vector4 Color33;
                        CanvasGradientMeshPatchEdge Edge00To03;
                        CanvasGradientMeshPatchEdge Edge03To33;
                        CanvasGradientMeshPatchEdge Edge33To30;
                        CanvasGradientMeshPatchEdge Edge30To00;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef struct CanvasGradientMeshPatch CanvasGradientMeshPatch;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0148_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0148_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMesh */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("6BFC2BF1-0A7A-449C-A7EF-6706321B0C1A")
                        ICanvasGradientMesh : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Patches( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatch **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetBounds( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetBoundsWithTransform( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasGradientMesh = __uuidof(ICanvasGradientMesh);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Patches )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *GetBoundsWithTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_get_Patches(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_Patches(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_GetBounds(This,resourceCreator,bounds)	\
    ( (This)->lpVtbl -> GetBounds(This,resourceCreator,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_GetBoundsWithTransform(This,resourceCreator,transform,bounds)	\
    ( (This)->lpVtbl -> GetBoundsWithTransform(This,resourceCreator,transform,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0149 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMeshFactory[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0149 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0149_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0149_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMeshFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("4756492D-251E-421D-834D-87EC260D5E4D")
                        ICanvasGradientMeshFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 patchCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatch *patchElements,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMesh **canvasGradientMesh) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasGradientMeshFactory = __uuidof(ICanvasGradientMeshFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 patchCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch *patchElements,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh **canvasGradientMesh);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_Create(This,resourceCreator,patchCount,patchElements,canvasGradientMesh)	\
    ( (This)->lpVtbl -> Create(This,resourceCreator,patchCount,patchElements,canvasGradientMesh) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0150 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMeshStatics[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0150 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0150_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0150_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMeshStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("44027640-3EAB-4199-AA3B-644890D0123D")
                        ICanvasGradientMeshStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateCoonsPatch( 
                                /* [in] */ UINT32 pointCount,
                                /* [in][size_is] */ ABI::Windows::Foundation::Numerics::Vector2 *points,
                                /* [in] */ UINT32 colorCount,
                                /* [in][size_is] */ ABI::Windows::Foundation::Numerics::Vector4 *colors,
                                /* [in] */ UINT32 edgeCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatchEdge *edges,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatch *gradientMeshPatch) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateTensorPatch( 
                                /* [in] */ UINT32 pointCount,
                                /* [in][size_is] */ ABI::Windows::Foundation::Numerics::Vector2 *points,
                                /* [in] */ UINT32 colorCount,
                                /* [in][size_is] */ ABI::Windows::Foundation::Numerics::Vector4 *colors,
                                /* [in] */ UINT32 edgeCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatchEdge *edges,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatch *gradientMeshPatch) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasGradientMeshStatics = __uuidof(ICanvasGradientMeshStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCoonsPatch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This,
            /* [in] */ UINT32 pointCount,
            /* [in][size_is] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *points,
            /* [in] */ UINT32 colorCount,
            /* [in][size_is] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *colors,
            /* [in] */ UINT32 edgeCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge *edges,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch *gradientMeshPatch);
        
        HRESULT ( STDMETHODCALLTYPE *CreateTensorPatch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This,
            /* [in] */ UINT32 pointCount,
            /* [in][size_is] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *points,
            /* [in] */ UINT32 colorCount,
            /* [in][size_is] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *colors,
            /* [in] */ UINT32 edgeCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge *edges,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch *gradientMeshPatch);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_CreateCoonsPatch(This,pointCount,points,colorCount,colors,edgeCount,edges,gradientMeshPatch)	\
    ( (This)->lpVtbl -> CreateCoonsPatch(This,pointCount,points,colorCount,colors,edgeCount,edges,gradientMeshPatch) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_CreateTensorPatch(This,pointCount,points,colorCount,colors,edgeCount,edges,gradientMeshPatch)	\
    ( (This)->lpVtbl -> CreateTensorPatch(This,pointCount,points,colorCount,colors,edgeCount,edges,gradientMeshPatch) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0151 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGradientMesh_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGradientMesh_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasGradientMesh[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode
    {
        CanvasTextRenderingMode_Default	= 0,
        CanvasTextRenderingMode_Aliased	= ( CanvasTextRenderingMode_Default + 1 ) ,
        CanvasTextRenderingMode_GdiClassic	= ( CanvasTextRenderingMode_Aliased + 1 ) ,
        CanvasTextRenderingMode_GdiNatural	= ( CanvasTextRenderingMode_GdiClassic + 1 ) ,
        CanvasTextRenderingMode_Natural	= ( CanvasTextRenderingMode_GdiNatural + 1 ) ,
        CanvasTextRenderingMode_NaturalSymmetric	= ( CanvasTextRenderingMode_Natural + 1 ) ,
        CanvasTextRenderingMode_Outline	= ( CanvasTextRenderingMode_NaturalSymmetric + 1 ) ,
        CanvasTextRenderingMode_NaturalSymmetricDownsampled	= ( CanvasTextRenderingMode_Outline + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit
    {
        CanvasTextGridFit_Default	= 0,
        CanvasTextGridFit_Disable	= ( CanvasTextGridFit_Default + 1 ) ,
        CanvasTextGridFit_Enable	= ( CanvasTextGridFit_Disable + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
class CanvasTextRenderingParameters;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParameters[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0151 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasTextRenderingMode
                        {
                            Default	= 0,
                            Aliased	= ( Default + 1 ) ,
                            GdiClassic	= ( Aliased + 1 ) ,
                            GdiNatural	= ( GdiClassic + 1 ) ,
                            Natural	= ( GdiNatural + 1 ) ,
                            NaturalSymmetric	= ( Natural + 1 ) ,
                            Outline	= ( NaturalSymmetric + 1 ) ,
                            NaturalSymmetricDownsampled	= ( Outline + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasTextRenderingMode CanvasTextRenderingMode_Default = CanvasTextRenderingMode::Default;
                    const MIDL_ENUM CanvasTextRenderingMode CanvasTextRenderingMode_Aliased = CanvasTextRenderingMode::Aliased;
                    const MIDL_ENUM CanvasTextRenderingMode CanvasTextRenderingMode_GdiClassic = CanvasTextRenderingMode::GdiClassic;
                    const MIDL_ENUM CanvasTextRenderingMode CanvasTextRenderingMode_GdiNatural = CanvasTextRenderingMode::GdiNatural;
                    const MIDL_ENUM CanvasTextRenderingMode CanvasTextRenderingMode_Natural = CanvasTextRenderingMode::Natural;
                    const MIDL_ENUM CanvasTextRenderingMode CanvasTextRenderingMode_NaturalSymmetric = CanvasTextRenderingMode::NaturalSymmetric;
                    const MIDL_ENUM CanvasTextRenderingMode CanvasTextRenderingMode_Outline = CanvasTextRenderingMode::Outline;
                    const MIDL_ENUM CanvasTextRenderingMode CanvasTextRenderingMode_NaturalSymmetricDownsampled = CanvasTextRenderingMode::NaturalSymmetricDownsampled;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasTextRenderingMode CanvasTextRenderingMode;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasTextGridFit
                        {
                            Default	= 0,
                            Disable	= ( Default + 1 ) ,
                            Enable	= ( Disable + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasTextGridFit CanvasTextGridFit_Default = CanvasTextGridFit::Default;
                    const MIDL_ENUM CanvasTextGridFit CanvasTextGridFit_Disable = CanvasTextGridFit::Disable;
                    const MIDL_ENUM CanvasTextGridFit CanvasTextGridFit_Enable = CanvasTextGridFit::Enable;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasTextGridFit CanvasTextGridFit;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0151_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0151_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("B20BF738-EDB9-4EEC-A12F-B6AE32E8ACE6")
                        ICanvasTextRenderingParameters : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RenderingMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GridFit( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextGridFit *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextRenderingParameters = __uuidof(ICanvasTextRenderingParameters);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RenderingMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GridFit )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_get_RenderingMode(This,value)	\
    ( (This)->lpVtbl -> get_RenderingMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_get_GridFit(This,value)	\
    ( (This)->lpVtbl -> get_GridFit(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0152 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParametersFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0152 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0152_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0152_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParametersFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("D240AC25-4D23-4964-9D9A-DB2FC8AF185D")
                        ICanvasTextRenderingParametersFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode textRenderingMode,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextGridFit gridFit,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters **textRenderingParameters) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextRenderingParametersFactory = __uuidof(ICanvasTextRenderingParametersFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode textRenderingMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit gridFit,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters **textRenderingParameters);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_Create(This,textRenderingMode,gridFit,textRenderingParameters)	\
    ( (This)->lpVtbl -> Create(This,textRenderingMode,gridFit,textRenderingParameters) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0153 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextRenderingParameters_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextRenderingParameters_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextRenderingParameters[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode
    {
        CanvasTextMeasuringMode_Natural	= 0,
        CanvasTextMeasuringMode_GdiClassic	= ( CanvasTextMeasuringMode_Natural + 1 ) ,
        CanvasTextMeasuringMode_GdiNatural	= ( CanvasTextMeasuringMode_GdiClassic + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType
    {
        CanvasFontFileFormatType_Cff	= 0,
        CanvasFontFileFormatType_TrueType	= ( CanvasFontFileFormatType_Cff + 1 ) ,
        CanvasFontFileFormatType_TrueTypeCollection	= ( CanvasFontFileFormatType_TrueType + 1 ) ,
        CanvasFontFileFormatType_Type1	= ( CanvasFontFileFormatType_TrueTypeCollection + 1 ) ,
        CanvasFontFileFormatType_Vector	= ( CanvasFontFileFormatType_Type1 + 1 ) ,
        CanvasFontFileFormatType_Bitmap	= ( CanvasFontFileFormatType_Vector + 1 ) ,
        CanvasFontFileFormatType_Unknown	= ( CanvasFontFileFormatType_Bitmap + 1 ) ,
        CanvasFontFileFormatType_RawCff	= ( CanvasFontFileFormatType_Unknown + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations
    {
        CanvasFontSimulations_None	= 0,
        CanvasFontSimulations_Bold	= 1,
        CanvasFontSimulations_Oblique	= 2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations;


#endif /* end if !defined(__cplusplus) */


#else
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
#if defined(MIDL_ENUM)
typedef MIDL_ENUM CanvasFontSimulations CanvasFontSimulations;
#else
typedef enum class CanvasFontSimulations CanvasFontSimulations;
#endif
DEFINE_ENUM_FLAG_OPERATORS(CanvasFontSimulations)
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation
    {
        CanvasFontInformation_None	= 0,
        CanvasFontInformation_CopyrightNotice	= ( CanvasFontInformation_None + 1 ) ,
        CanvasFontInformation_VersionStrings	= ( CanvasFontInformation_CopyrightNotice + 1 ) ,
        CanvasFontInformation_Trademark	= ( CanvasFontInformation_VersionStrings + 1 ) ,
        CanvasFontInformation_Manufacturer	= ( CanvasFontInformation_Trademark + 1 ) ,
        CanvasFontInformation_Designer	= ( CanvasFontInformation_Manufacturer + 1 ) ,
        CanvasFontInformation_DesignerUrl	= ( CanvasFontInformation_Designer + 1 ) ,
        CanvasFontInformation_Description	= ( CanvasFontInformation_DesignerUrl + 1 ) ,
        CanvasFontInformation_FontVendorUrl	= ( CanvasFontInformation_Description + 1 ) ,
        CanvasFontInformation_LicenseDescription	= ( CanvasFontInformation_FontVendorUrl + 1 ) ,
        CanvasFontInformation_LicenseInfoUrl	= ( CanvasFontInformation_LicenseDescription + 1 ) ,
        CanvasFontInformation_Win32FamilyNames	= ( CanvasFontInformation_LicenseInfoUrl + 1 ) ,
        CanvasFontInformation_Win32SubfamilyNames	= ( CanvasFontInformation_Win32FamilyNames + 1 ) ,
        CanvasFontInformation_PreferredFamilyNames	= ( CanvasFontInformation_Win32SubfamilyNames + 1 ) ,
        CanvasFontInformation_PreferredSubfamilyNames	= ( CanvasFontInformation_PreferredFamilyNames + 1 ) ,
        CanvasFontInformation_SampleText	= ( CanvasFontInformation_PreferredSubfamilyNames + 1 ) ,
        CanvasFontInformation_FullName	= ( CanvasFontInformation_SampleText + 1 ) ,
        CanvasFontInformation_PostscriptName	= ( CanvasFontInformation_FullName + 1 ) ,
        CanvasFontInformation_PostscriptCidName	= ( CanvasFontInformation_PostscriptName + 1 ) ,
        CanvasFontInformation_WwsFamilyName	= ( CanvasFontInformation_PostscriptCidName + 1 ) ,
        CanvasFontInformation_DesignScriptLanguageTag	= ( CanvasFontInformation_WwsFamilyName + 1 ) ,
        CanvasFontInformation_SupportedScriptLanguageTag	= ( CanvasFontInformation_DesignScriptLanguageTag + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange
    {
    UINT32 First;
    UINT32 Last;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange;

#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph
    {
    int Index;
    float Advance;
    float AdvanceOffset;
    float AscenderOffset;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph;

#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics
    {
    float LeftSideBearing;
    float AdvanceWidth;
    float RightSideBearing;
    float TopSideBearing;
    float AdvanceHeight;
    float BottomSideBearing;
    float VerticalOrigin;
    __x_ABI_CWindows_CFoundation_CRect DrawBounds;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics;

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape
    {
        CanvasScriptShape_Default	= 0,
        CanvasScriptShape_NoVisual	= ( CanvasScriptShape_Default + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript
    {
    INT32 ScriptIdentifier;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape Shape;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript;

#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasFontFace[] = L"Microsoft.Graphics.Canvas.Text.ICanvasFontFace";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0153 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasTextMeasuringMode
                        {
                            Natural	= 0,
                            GdiClassic	= ( Natural + 1 ) ,
                            GdiNatural	= ( GdiClassic + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasTextMeasuringMode CanvasTextMeasuringMode_Natural = CanvasTextMeasuringMode::Natural;
                    const MIDL_ENUM CanvasTextMeasuringMode CanvasTextMeasuringMode_GdiClassic = CanvasTextMeasuringMode::GdiClassic;
                    const MIDL_ENUM CanvasTextMeasuringMode CanvasTextMeasuringMode_GdiNatural = CanvasTextMeasuringMode::GdiNatural;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasTextMeasuringMode CanvasTextMeasuringMode;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasFontFileFormatType
                        {
                            Cff	= 0,
                            TrueType	= ( Cff + 1 ) ,
                            TrueTypeCollection	= ( TrueType + 1 ) ,
                            Type1	= ( TrueTypeCollection + 1 ) ,
                            Vector	= ( Type1 + 1 ) ,
                            Bitmap	= ( Vector + 1 ) ,
                            Unknown	= ( Bitmap + 1 ) ,
                            RawCff	= ( Unknown + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasFontFileFormatType CanvasFontFileFormatType_Cff = CanvasFontFileFormatType::Cff;
                    const MIDL_ENUM CanvasFontFileFormatType CanvasFontFileFormatType_TrueType = CanvasFontFileFormatType::TrueType;
                    const MIDL_ENUM CanvasFontFileFormatType CanvasFontFileFormatType_TrueTypeCollection = CanvasFontFileFormatType::TrueTypeCollection;
                    const MIDL_ENUM CanvasFontFileFormatType CanvasFontFileFormatType_Type1 = CanvasFontFileFormatType::Type1;
                    const MIDL_ENUM CanvasFontFileFormatType CanvasFontFileFormatType_Vector = CanvasFontFileFormatType::Vector;
                    const MIDL_ENUM CanvasFontFileFormatType CanvasFontFileFormatType_Bitmap = CanvasFontFileFormatType::Bitmap;
                    const MIDL_ENUM CanvasFontFileFormatType CanvasFontFileFormatType_Unknown = CanvasFontFileFormatType::Unknown;
                    const MIDL_ENUM CanvasFontFileFormatType CanvasFontFileFormatType_RawCff = CanvasFontFileFormatType::RawCff;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasFontFileFormatType CanvasFontFileFormatType;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasFontSimulations
                        {
                            None	= 0,
                            Bold	= 1,
                            Oblique	= 2
                        } ;

                    const MIDL_ENUM CanvasFontSimulations CanvasFontSimulations_None = CanvasFontSimulations::None;
                    const MIDL_ENUM CanvasFontSimulations CanvasFontSimulations_Bold = CanvasFontSimulations::Bold;
                    const MIDL_ENUM CanvasFontSimulations CanvasFontSimulations_Oblique = CanvasFontSimulations::Oblique;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasFontSimulations CanvasFontSimulations;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasFontInformation
                        {
                            None	= 0,
                            CopyrightNotice	= ( None + 1 ) ,
                            VersionStrings	= ( CopyrightNotice + 1 ) ,
                            Trademark	= ( VersionStrings + 1 ) ,
                            Manufacturer	= ( Trademark + 1 ) ,
                            Designer	= ( Manufacturer + 1 ) ,
                            DesignerUrl	= ( Designer + 1 ) ,
                            Description	= ( DesignerUrl + 1 ) ,
                            FontVendorUrl	= ( Description + 1 ) ,
                            LicenseDescription	= ( FontVendorUrl + 1 ) ,
                            LicenseInfoUrl	= ( LicenseDescription + 1 ) ,
                            Win32FamilyNames	= ( LicenseInfoUrl + 1 ) ,
                            Win32SubfamilyNames	= ( Win32FamilyNames + 1 ) ,
                            PreferredFamilyNames	= ( Win32SubfamilyNames + 1 ) ,
                            PreferredSubfamilyNames	= ( PreferredFamilyNames + 1 ) ,
                            SampleText	= ( PreferredSubfamilyNames + 1 ) ,
                            FullName	= ( SampleText + 1 ) ,
                            PostscriptName	= ( FullName + 1 ) ,
                            PostscriptCidName	= ( PostscriptName + 1 ) ,
                            WwsFamilyName	= ( PostscriptCidName + 1 ) ,
                            DesignScriptLanguageTag	= ( WwsFamilyName + 1 ) ,
                            SupportedScriptLanguageTag	= ( DesignScriptLanguageTag + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_None = CanvasFontInformation::None;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_CopyrightNotice = CanvasFontInformation::CopyrightNotice;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_VersionStrings = CanvasFontInformation::VersionStrings;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_Trademark = CanvasFontInformation::Trademark;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_Manufacturer = CanvasFontInformation::Manufacturer;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_Designer = CanvasFontInformation::Designer;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_DesignerUrl = CanvasFontInformation::DesignerUrl;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_Description = CanvasFontInformation::Description;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_FontVendorUrl = CanvasFontInformation::FontVendorUrl;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_LicenseDescription = CanvasFontInformation::LicenseDescription;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_LicenseInfoUrl = CanvasFontInformation::LicenseInfoUrl;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_Win32FamilyNames = CanvasFontInformation::Win32FamilyNames;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_Win32SubfamilyNames = CanvasFontInformation::Win32SubfamilyNames;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_PreferredFamilyNames = CanvasFontInformation::PreferredFamilyNames;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_PreferredSubfamilyNames = CanvasFontInformation::PreferredSubfamilyNames;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_SampleText = CanvasFontInformation::SampleText;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_FullName = CanvasFontInformation::FullName;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_PostscriptName = CanvasFontInformation::PostscriptName;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_PostscriptCidName = CanvasFontInformation::PostscriptCidName;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_WwsFamilyName = CanvasFontInformation::WwsFamilyName;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_DesignScriptLanguageTag = CanvasFontInformation::DesignScriptLanguageTag;
                    const MIDL_ENUM CanvasFontInformation CanvasFontInformation_SupportedScriptLanguageTag = CanvasFontInformation::SupportedScriptLanguageTag;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasFontInformation CanvasFontInformation;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasUnicodeRange
                        {
                        UINT32 First;
                        UINT32 Last;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasUnicodeRange CanvasUnicodeRange;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasGlyph
                        {
                        int Index;
                        float Advance;
                        float AdvanceOffset;
                        float AscenderOffset;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasGlyph CanvasGlyph;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasGlyphMetrics
                        {
                        float LeftSideBearing;
                        float AdvanceWidth;
                        float RightSideBearing;
                        float TopSideBearing;
                        float AdvanceHeight;
                        float BottomSideBearing;
                        float VerticalOrigin;
                        ABI::Windows::Foundation::Rect DrawBounds;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasGlyphMetrics CanvasGlyphMetrics;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasScriptShape
                        {
                            Default	= 0,
                            NoVisual	= ( Default + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasScriptShape CanvasScriptShape_Default = CanvasScriptShape::Default;
                    const MIDL_ENUM CanvasScriptShape CanvasScriptShape_NoVisual = CanvasScriptShape::NoVisual;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasScriptShape CanvasScriptShape;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasAnalyzedScript
                        {
                        INT32 ScriptIdentifier;
                        CanvasScriptShape Shape;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasAnalyzedScript CanvasAnalyzedScript;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0153_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0153_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("5199D129-4EF9-4DEE-B74C-4DC910201A7F")
                        ICanvasFontFace : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE GetRecommendedRenderingMode( 
                                /* [in] */ float fontSize,
                                /* [in] */ float dpi,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters *renderingParameters,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode *renderingMode) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetRecommendedRenderingModeWithAllOptions( 
                                /* [in] */ float fontSize,
                                /* [in] */ float dpi,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters *renderingParameters,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ boolean isSideways,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAntialiasing outlineThreshold,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode *renderingMode) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetRecommendedGridFit( 
                                /* [in] */ float fontSize,
                                /* [in] */ float dpi,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters *renderingParameters,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ boolean isSideways,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAntialiasing outlineThreshold,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextGridFit *gridFit) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GlyphBox( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SubscriptPosition( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SubscriptSize( 
                                /* [out][retval] */ ABI::Windows::Foundation::Size *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SuperscriptPosition( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SuperscriptSize( 
                                /* [out][retval] */ ABI::Windows::Foundation::Size *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasTypographicMetrics( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Ascent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Descent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineGap( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CapHeight( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LowercaseLetterHeight( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UnderlinePosition( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UnderlineThickness( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StrikethroughPosition( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StrikethroughThickness( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CaretSlopeRise( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CaretSlopeRun( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CaretOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UnicodeRanges( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasUnicodeRange **valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsMonospaced( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetVerticalGlyphVariants( 
                                /* [in] */ UINT32 inputCount,
                                /* [in][size_is] */ int *inputElements,
                                /* [out] */ UINT32 *outputCount,
                                /* [out][size_is][size_is][retval] */ int **outputElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasVerticalGlyphVariants( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FileFormatType( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFileFormatType *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Simulations( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasFontSimulations *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsSymbolFont( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GlyphCount( 
                                /* [out][retval] */ UINT32 *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetGlyphIndices( 
                                /* [in] */ UINT32 inputCount,
                                /* [in][size_is] */ UINT32 *inputElements,
                                /* [out] */ UINT32 *outputCount,
                                /* [out][size_is][size_is][retval] */ int **outputElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetGlyphMetrics( 
                                /* [in] */ UINT32 inputCount,
                                /* [in][size_is] */ int *inputElements,
                                /* [in] */ boolean isSideways,
                                /* [out] */ UINT32 *outputCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphMetrics **outputElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetGdiCompatibleGlyphMetrics( 
                                /* [in] */ float fontSize,
                                /* [in] */ float dpi,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ boolean useGdiNatural,
                                /* [in] */ UINT32 inputCount,
                                /* [in][size_is] */ int *inputElements,
                                /* [in] */ boolean isSideways,
                                /* [out] */ UINT32 *outputCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphMetrics **outputElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Weight( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontWeight *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Stretch( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStretch *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Style( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStyle *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FamilyNames( 
                                /* [out][retval] */ __FIMapView_2_HSTRING_HSTRING **values) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FaceNames( 
                                /* [out][retval] */ __FIMapView_2_HSTRING_HSTRING **values) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetInformationalStrings( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasFontInformation fontInformation,
                                /* [out][retval] */ __FIMapView_2_HSTRING_HSTRING **values) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HasCharacter( 
                                /* [in] */ UINT32 unicodeValue,
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetGlyphRunBounds( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *drawingSession,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [in] */ float fontSize,
                                /* [in] */ UINT32 glyphCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *glyphs,
                                /* [in] */ boolean isSideways,
                                /* [in] */ UINT32 bidiLevel,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetGlyphRunBoundsWithMeasuringMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *drawingSession,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [in] */ float fontSize,
                                /* [in] */ UINT32 glyphCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *glyphs,
                                /* [in] */ boolean isSideways,
                                /* [in] */ UINT32 bidiLevel,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Panose( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ BYTE **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetSupportedTypographicFeatureNames( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetSupportedTypographicFeatureNamesWithLocale( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                                /* [in] */ HSTRING locale,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetTypographicFeatureGlyphSupport( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName typographicFeatureName,
                                /* [in] */ UINT32 glyphsCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *glyphsElements,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ boolean **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetTypographicFeatureGlyphSupportWithLocale( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName typographicFeatureName,
                                /* [in] */ UINT32 glyphsCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *glyphsElements,
                                /* [in] */ HSTRING locale,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ boolean **valueElements) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasFontFace = __uuidof(ICanvasFontFace);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetRecommendedRenderingMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ float fontSize,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters *renderingParameters,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode *renderingMode);
        
        HRESULT ( STDMETHODCALLTYPE *GetRecommendedRenderingModeWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ float fontSize,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters *renderingParameters,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ boolean isSideways,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing outlineThreshold,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode *renderingMode);
        
        HRESULT ( STDMETHODCALLTYPE *GetRecommendedGridFit )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ float fontSize,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters *renderingParameters,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ boolean isSideways,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing outlineThreshold,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit *gridFit);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GlyphBox )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SubscriptPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SubscriptSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuperscriptPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuperscriptSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasTypographicMetrics )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ boolean *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Ascent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Descent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineGap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CapHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LowercaseLetterHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UnderlinePosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UnderlineThickness )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StrikethroughPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StrikethroughThickness )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CaretSlopeRise )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CaretSlopeRun )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CaretOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UnicodeRanges )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange **valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsMonospaced )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetVerticalGlyphVariants )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ UINT32 inputCount,
            /* [in][size_is] */ int *inputElements,
            /* [out] */ UINT32 *outputCount,
            /* [out][size_is][size_is][retval] */ int **outputElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasVerticalGlyphVariants )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ boolean *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileFormatType )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Simulations )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSymbolFont )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ boolean *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GlyphCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlyphIndices )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ UINT32 inputCount,
            /* [in][size_is] */ UINT32 *inputElements,
            /* [out] */ UINT32 *outputCount,
            /* [out][size_is][size_is][retval] */ int **outputElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlyphMetrics )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ UINT32 inputCount,
            /* [in][size_is] */ int *inputElements,
            /* [in] */ boolean isSideways,
            /* [out] */ UINT32 *outputCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics **outputElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetGdiCompatibleGlyphMetrics )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ float fontSize,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ boolean useGdiNatural,
            /* [in] */ UINT32 inputCount,
            /* [in][size_is] */ int *inputElements,
            /* [in] */ boolean isSideways,
            /* [out] */ UINT32 *outputCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics **outputElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Weight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontWeight *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Stretch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStretch *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStyle *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FamilyNames )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ __FIMapView_2_HSTRING_HSTRING **values);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FaceNames )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out][retval] */ __FIMapView_2_HSTRING_HSTRING **values);
        
        HRESULT ( STDMETHODCALLTYPE *GetInformationalStrings )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation fontInformation,
            /* [out][retval] */ __FIMapView_2_HSTRING_HSTRING **values);
        
        HRESULT ( STDMETHODCALLTYPE *HasCharacter )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ UINT32 unicodeValue,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlyphRunBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *drawingSession,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ float fontSize,
            /* [in] */ UINT32 glyphCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *glyphs,
            /* [in] */ boolean isSideways,
            /* [in] */ UINT32 bidiLevel,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlyphRunBoundsWithMeasuringMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *drawingSession,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ float fontSize,
            /* [in] */ UINT32 glyphCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *glyphs,
            /* [in] */ boolean isSideways,
            /* [in] */ UINT32 bidiLevel,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Panose )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ BYTE **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetSupportedTypographicFeatureNames )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetSupportedTypographicFeatureNamesWithLocale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
            /* [in] */ HSTRING locale,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypographicFeatureGlyphSupport )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName typographicFeatureName,
            /* [in] */ UINT32 glyphsCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *glyphsElements,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ boolean **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypographicFeatureGlyphSupportWithLocale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName typographicFeatureName,
            /* [in] */ UINT32 glyphsCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *glyphsElements,
            /* [in] */ HSTRING locale,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ boolean **valueElements);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFaceVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetRecommendedRenderingMode(This,fontSize,dpi,measuringMode,renderingParameters,renderingMode)	\
    ( (This)->lpVtbl -> GetRecommendedRenderingMode(This,fontSize,dpi,measuringMode,renderingParameters,renderingMode) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetRecommendedRenderingModeWithAllOptions(This,fontSize,dpi,measuringMode,renderingParameters,transform,isSideways,outlineThreshold,renderingMode)	\
    ( (This)->lpVtbl -> GetRecommendedRenderingModeWithAllOptions(This,fontSize,dpi,measuringMode,renderingParameters,transform,isSideways,outlineThreshold,renderingMode) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetRecommendedGridFit(This,fontSize,dpi,measuringMode,renderingParameters,transform,isSideways,outlineThreshold,gridFit)	\
    ( (This)->lpVtbl -> GetRecommendedGridFit(This,fontSize,dpi,measuringMode,renderingParameters,transform,isSideways,outlineThreshold,gridFit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_GlyphBox(This,value)	\
    ( (This)->lpVtbl -> get_GlyphBox(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_SubscriptPosition(This,value)	\
    ( (This)->lpVtbl -> get_SubscriptPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_SubscriptSize(This,value)	\
    ( (This)->lpVtbl -> get_SubscriptSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_SuperscriptPosition(This,value)	\
    ( (This)->lpVtbl -> get_SuperscriptPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_SuperscriptSize(This,value)	\
    ( (This)->lpVtbl -> get_SuperscriptSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_HasTypographicMetrics(This,value)	\
    ( (This)->lpVtbl -> get_HasTypographicMetrics(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Ascent(This,value)	\
    ( (This)->lpVtbl -> get_Ascent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Descent(This,value)	\
    ( (This)->lpVtbl -> get_Descent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_LineGap(This,value)	\
    ( (This)->lpVtbl -> get_LineGap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_CapHeight(This,value)	\
    ( (This)->lpVtbl -> get_CapHeight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_LowercaseLetterHeight(This,value)	\
    ( (This)->lpVtbl -> get_LowercaseLetterHeight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_UnderlinePosition(This,value)	\
    ( (This)->lpVtbl -> get_UnderlinePosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_UnderlineThickness(This,value)	\
    ( (This)->lpVtbl -> get_UnderlineThickness(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_StrikethroughPosition(This,value)	\
    ( (This)->lpVtbl -> get_StrikethroughPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_StrikethroughThickness(This,value)	\
    ( (This)->lpVtbl -> get_StrikethroughThickness(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_CaretSlopeRise(This,value)	\
    ( (This)->lpVtbl -> get_CaretSlopeRise(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_CaretSlopeRun(This,value)	\
    ( (This)->lpVtbl -> get_CaretSlopeRun(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_CaretOffset(This,value)	\
    ( (This)->lpVtbl -> get_CaretOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_UnicodeRanges(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_UnicodeRanges(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_IsMonospaced(This,value)	\
    ( (This)->lpVtbl -> get_IsMonospaced(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetVerticalGlyphVariants(This,inputCount,inputElements,outputCount,outputElements)	\
    ( (This)->lpVtbl -> GetVerticalGlyphVariants(This,inputCount,inputElements,outputCount,outputElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_HasVerticalGlyphVariants(This,value)	\
    ( (This)->lpVtbl -> get_HasVerticalGlyphVariants(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_FileFormatType(This,value)	\
    ( (This)->lpVtbl -> get_FileFormatType(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Simulations(This,value)	\
    ( (This)->lpVtbl -> get_Simulations(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_IsSymbolFont(This,value)	\
    ( (This)->lpVtbl -> get_IsSymbolFont(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_GlyphCount(This,value)	\
    ( (This)->lpVtbl -> get_GlyphCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetGlyphIndices(This,inputCount,inputElements,outputCount,outputElements)	\
    ( (This)->lpVtbl -> GetGlyphIndices(This,inputCount,inputElements,outputCount,outputElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetGlyphMetrics(This,inputCount,inputElements,isSideways,outputCount,outputElements)	\
    ( (This)->lpVtbl -> GetGlyphMetrics(This,inputCount,inputElements,isSideways,outputCount,outputElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetGdiCompatibleGlyphMetrics(This,fontSize,dpi,transform,useGdiNatural,inputCount,inputElements,isSideways,outputCount,outputElements)	\
    ( (This)->lpVtbl -> GetGdiCompatibleGlyphMetrics(This,fontSize,dpi,transform,useGdiNatural,inputCount,inputElements,isSideways,outputCount,outputElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Weight(This,value)	\
    ( (This)->lpVtbl -> get_Weight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Stretch(This,value)	\
    ( (This)->lpVtbl -> get_Stretch(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Style(This,value)	\
    ( (This)->lpVtbl -> get_Style(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_FamilyNames(This,values)	\
    ( (This)->lpVtbl -> get_FamilyNames(This,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_FaceNames(This,values)	\
    ( (This)->lpVtbl -> get_FaceNames(This,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetInformationalStrings(This,fontInformation,values)	\
    ( (This)->lpVtbl -> GetInformationalStrings(This,fontInformation,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_HasCharacter(This,unicodeValue,value)	\
    ( (This)->lpVtbl -> HasCharacter(This,unicodeValue,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetGlyphRunBounds(This,drawingSession,point,fontSize,glyphCount,glyphs,isSideways,bidiLevel,bounds)	\
    ( (This)->lpVtbl -> GetGlyphRunBounds(This,drawingSession,point,fontSize,glyphCount,glyphs,isSideways,bidiLevel,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetGlyphRunBoundsWithMeasuringMode(This,drawingSession,point,fontSize,glyphCount,glyphs,isSideways,bidiLevel,measuringMode,bounds)	\
    ( (This)->lpVtbl -> GetGlyphRunBoundsWithMeasuringMode(This,drawingSession,point,fontSize,glyphCount,glyphs,isSideways,bidiLevel,measuringMode,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Panose(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_Panose(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetSupportedTypographicFeatureNames(This,script,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetSupportedTypographicFeatureNames(This,script,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetSupportedTypographicFeatureNamesWithLocale(This,script,locale,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetSupportedTypographicFeatureNamesWithLocale(This,script,locale,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetTypographicFeatureGlyphSupport(This,script,typographicFeatureName,glyphsCount,glyphsElements,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetTypographicFeatureGlyphSupport(This,script,typographicFeatureName,glyphsCount,glyphsElements,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetTypographicFeatureGlyphSupportWithLocale(This,script,typographicFeatureName,glyphsCount,glyphsElements,locale,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetTypographicFeatureGlyphSupportWithLocale(This,script,typographicFeatureName,glyphsCount,glyphsElements,locale,valueCount,valueElements) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0154 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasFontFace_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasFontFace_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasFontFace[] = L"Microsoft.Graphics.Canvas.Text.CanvasFontFace";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0154 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0154_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0154_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5598 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5598 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5598_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5598_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0155 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING
#define DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0155 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0155_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0155_v0_0_s_ifspec;

#ifndef ____FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

/* interface __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d211d7c6-b231-5857-8ebe-5dcc576e3c94")
    __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_HSTRING_HSTRING **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_HSTRING_HSTRING *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_HSTRING_HSTRING **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_HSTRING_HSTRING **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ __FIKeyValuePair_2_HSTRING_HSTRING *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_HSTRING_HSTRING **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0156 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING */


/* interface __MIDL_itf_Canvas2Eabi_0000_0156 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0156_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0156_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5599 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5599 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5599_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5599_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0157 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING
#define DEF___FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0157 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0157_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0157_v0_0_s_ifspec;

#ifndef ____FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

/* interface __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING */
/* [unique][uuid][object] */ 



/* interface __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d3705344-38b6-5af6-83e5-3ced5c0f3d03")
    __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_HSTRING_HSTRING **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_HSTRING_HSTRING *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_HSTRING_HSTRING *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_HSTRING_HSTRING *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ __FIKeyValuePair_2_HSTRING_HSTRING *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_HSTRING_HSTRING **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_HSTRING_HSTRING **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_HSTRING_HSTRING **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ __FIKeyValuePair_2_HSTRING_HSTRING *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_HSTRING_HSTRING *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_HSTRING_HSTRING *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ __FIKeyValuePair_2_HSTRING_HSTRING *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_HSTRING_HSTRING **items,
            /* [retval][out] */ unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_HSTRING_HSTRING **value);
        
        END_INTERFACE
    } __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

    interface __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING
    {
        CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0158 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING */


/* interface __MIDL_itf_Canvas2Eabi_0000_0158 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0158_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0158_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5600 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5600 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5600_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5600_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0159 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
#define DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0159 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0159_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0159_v0_0_s_ifspec;

#ifndef ____FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__
#define ____FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__

/* interface __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ba9cfc0b-75d0-5455-9d9d-b88a73a806d0")
    __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl;

    interface __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
    {
        CONST_VTBL struct __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0160 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace */


/* interface __MIDL_itf_Canvas2Eabi_0000_0160 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0160_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0160_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5601 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5601 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5601_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5601_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0161 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
#define DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0161 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0161_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0161_v0_0_s_ifspec;

#ifndef ____FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__
#define ____FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__

/* interface __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("dadc03be-adec-5e2b-8056-e620ebd250a6")
    __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [retval][out] */ __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace **first);
        
        END_INTERFACE
    } __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl;

    interface __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
    {
        CONST_VTBL struct __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0162 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace */


/* interface __MIDL_itf_Canvas2Eabi_0000_0162 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0162_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0162_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5602 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5602 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5602_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5602_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0163 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
#define DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0163 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0163_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0163_v0_0_s_ifspec;

#ifndef ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__
#define ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__

/* interface __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f90149d7-8a7e-5e74-a251-9e92f5a8084d")
    __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl;

    interface __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
    {
        CONST_VTBL struct __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0164 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace */


/* interface __MIDL_itf_Canvas2Eabi_0000_0164 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0164_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0164_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5603 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5603 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5603_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5603_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0165 */
/* [local] */ 

#ifndef DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
#define DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0165 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0165_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0165_v0_0_s_ifspec;

#ifndef ____FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__
#define ____FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__

/* interface __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace */
/* [unique][uuid][object] */ 



/* interface __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("488e8b62-7d1c-5a28-ba1b-d30062a9462c")
    __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [retval][out] */ __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ unsigned int index,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ unsigned int index,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace **items,
            /* [retval][out] */ unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace **value);
        
        END_INTERFACE
    } __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl;

    interface __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
    {
        CONST_VTBL struct __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0166 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderer[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0166 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0166_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0166_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("9AAEECE5-8D09-4A64-B322-AF030421B2E4")
                        ICanvasTextRenderer : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE DrawGlyphRun( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *fontFace,
                                /* [in] */ float fontSize,
                                /* [in] */ UINT32 glyphCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *glyphs,
                                /* [in] */ boolean isSideways,
                                /* [in] */ UINT32 bidiLevel,
                                /* [in] */ IInspectable *brush,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                                /* [in] */ HSTRING localeName,
                                /* [in] */ HSTRING textString,
                                /* [in] */ UINT32 clusterMapIndicesCount,
                                /* [in][size_is] */ int *clusterMapIndices,
                                /* [in] */ UINT32 characterIndex,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE DrawStrikethrough( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [in] */ float strikethroughWidth,
                                /* [in] */ float strikethroughThickness,
                                /* [in] */ float strikethroughOffset,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection,
                                /* [in] */ IInspectable *brush,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode textMeasuringMode,
                                /* [in] */ HSTRING localeName,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE DrawUnderline( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [in] */ float underlineWidth,
                                /* [in] */ float underlineThickness,
                                /* [in] */ float underlineOffset,
                                /* [in] */ float runHeight,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection,
                                /* [in] */ IInspectable *brush,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode textMeasuringMode,
                                /* [in] */ HSTRING localeName,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE DrawInlineObject( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject *inlineObject,
                                /* [in] */ boolean isSideways,
                                /* [in] */ boolean isRightToLeft,
                                /* [in] */ IInspectable *brush,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PixelSnappingDisabled( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Transform( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Matrix3x2 *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Dpi( 
                                /* [out][retval] */ float *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextRenderer = __uuidof(ICanvasTextRenderer);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRendererVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGlyphRun )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *fontFace,
            /* [in] */ float fontSize,
            /* [in] */ UINT32 glyphCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *glyphs,
            /* [in] */ boolean isSideways,
            /* [in] */ UINT32 bidiLevel,
            /* [in] */ IInspectable *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
            /* [in] */ HSTRING localeName,
            /* [in] */ HSTRING textString,
            /* [in] */ UINT32 clusterMapIndicesCount,
            /* [in][size_is] */ int *clusterMapIndices,
            /* [in] */ UINT32 characterIndex,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation glyphOrientation);
        
        HRESULT ( STDMETHODCALLTYPE *DrawStrikethrough )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ float strikethroughWidth,
            /* [in] */ float strikethroughThickness,
            /* [in] */ float strikethroughOffset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection textDirection,
            /* [in] */ IInspectable *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode textMeasuringMode,
            /* [in] */ HSTRING localeName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation glyphOrientation);
        
        HRESULT ( STDMETHODCALLTYPE *DrawUnderline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ float underlineWidth,
            /* [in] */ float underlineThickness,
            /* [in] */ float underlineOffset,
            /* [in] */ float runHeight,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection textDirection,
            /* [in] */ IInspectable *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode textMeasuringMode,
            /* [in] */ HSTRING localeName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation glyphOrientation);
        
        HRESULT ( STDMETHODCALLTYPE *DrawInlineObject )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject *inlineObject,
            /* [in] */ boolean isSideways,
            /* [in] */ boolean isRightToLeft,
            /* [in] */ IInspectable *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation glyphOrientation);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelSnappingDisabled )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
            /* [out][retval] */ boolean *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Transform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
            /* [out][retval] */ float *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRendererVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRendererVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_DrawGlyphRun(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush,measuringMode,localeName,textString,clusterMapIndicesCount,clusterMapIndices,characterIndex,glyphOrientation)	\
    ( (This)->lpVtbl -> DrawGlyphRun(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush,measuringMode,localeName,textString,clusterMapIndicesCount,clusterMapIndices,characterIndex,glyphOrientation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_DrawStrikethrough(This,point,strikethroughWidth,strikethroughThickness,strikethroughOffset,textDirection,brush,textMeasuringMode,localeName,glyphOrientation)	\
    ( (This)->lpVtbl -> DrawStrikethrough(This,point,strikethroughWidth,strikethroughThickness,strikethroughOffset,textDirection,brush,textMeasuringMode,localeName,glyphOrientation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_DrawUnderline(This,point,underlineWidth,underlineThickness,underlineOffset,runHeight,textDirection,brush,textMeasuringMode,localeName,glyphOrientation)	\
    ( (This)->lpVtbl -> DrawUnderline(This,point,underlineWidth,underlineThickness,underlineOffset,runHeight,textDirection,brush,textMeasuringMode,localeName,glyphOrientation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_DrawInlineObject(This,point,inlineObject,isSideways,isRightToLeft,brush,glyphOrientation)	\
    ( (This)->lpVtbl -> DrawInlineObject(This,point,inlineObject,isSideways,isRightToLeft,brush,glyphOrientation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_get_PixelSnappingDisabled(This,value)	\
    ( (This)->lpVtbl -> get_PixelSnappingDisabled(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_get_Transform(This,value)	\
    ( (This)->lpVtbl -> get_Transform(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_get_Dpi(This,value)	\
    ( (This)->lpVtbl -> get_Dpi(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0167 */
/* [local] */ 

#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices
    {
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Vertex1;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Vertex2;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Vertex3;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices;

#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasPathReceiver[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0167 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    struct CanvasTriangleVertices
                        {
                        ABI::Windows::Foundation::Numerics::Vector2 Vertex1;
                        ABI::Windows::Foundation::Numerics::Vector2 Vertex2;
                        ABI::Windows::Foundation::Numerics::Vector2 Vertex3;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef struct CanvasTriangleVertices CanvasTriangleVertices;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0167_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0167_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathReceiver */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("70E65373-7FB3-4645-8B6D-F616D1B9A9D7")
                        ICanvasPathReceiver : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE BeginFigure( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 startPoint,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureFill figureFill) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddArc( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 endPoint,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [in] */ float rotationAngle,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasSweepDirection sweepDirection,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasArcSize arcSize) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddCubicBezier( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 controlPoint1,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 controlPoint2,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 endPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddLine( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 endPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddQuadraticBezier( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 controlPoint,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 endPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFilledRegionDetermination( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination filledRegionDetermination) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetSegmentOptions( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureSegmentOptions figureSegmentOptions) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE EndFigure( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureLoop figureLoop) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasPathReceiver = __uuidof(ICanvasPathReceiver);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiverVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *BeginFigure )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 startPoint,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill figureFill);
        
        HRESULT ( STDMETHODCALLTYPE *AddArc )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ float rotationAngle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection sweepDirection,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize arcSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddCubicBezier )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 controlPoint1,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 controlPoint2,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint);
        
        HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint);
        
        HRESULT ( STDMETHODCALLTYPE *AddQuadraticBezier )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 controlPoint,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint);
        
        HRESULT ( STDMETHODCALLTYPE *SetFilledRegionDetermination )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination filledRegionDetermination);
        
        HRESULT ( STDMETHODCALLTYPE *SetSegmentOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions figureSegmentOptions);
        
        HRESULT ( STDMETHODCALLTYPE *EndFigure )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop figureLoop);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiverVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiverVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_BeginFigure(This,startPoint,figureFill)	\
    ( (This)->lpVtbl -> BeginFigure(This,startPoint,figureFill) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddArc(This,endPoint,radiusX,radiusY,rotationAngle,sweepDirection,arcSize)	\
    ( (This)->lpVtbl -> AddArc(This,endPoint,radiusX,radiusY,rotationAngle,sweepDirection,arcSize) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddCubicBezier(This,controlPoint1,controlPoint2,endPoint)	\
    ( (This)->lpVtbl -> AddCubicBezier(This,controlPoint1,controlPoint2,endPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddLine(This,endPoint)	\
    ( (This)->lpVtbl -> AddLine(This,endPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddQuadraticBezier(This,controlPoint,endPoint)	\
    ( (This)->lpVtbl -> AddQuadraticBezier(This,controlPoint,endPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_SetFilledRegionDetermination(This,filledRegionDetermination)	\
    ( (This)->lpVtbl -> SetFilledRegionDetermination(This,filledRegionDetermination) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_SetSegmentOptions(This,figureSegmentOptions)	\
    ( (This)->lpVtbl -> SetSegmentOptions(This,figureSegmentOptions) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_EndFigure(This,figureLoop)	\
    ( (This)->lpVtbl -> EndFigure(This,figureLoop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0168 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0168 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0168_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0168_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("74EA89FA-C87C-4D0D-9057-2743B8DB67EE")
                        ICanvasGeometry : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CombineWith( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *otherGeometry,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 otherGeometryTransform,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometryCombine combine,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CombineWithUsingFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *otherGeometry,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 otherGeometryTransform,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometryCombine combine,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE Stroke( 
                                /* [in] */ float strokeWidth,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE StrokeWithStrokeStyle( 
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE StrokeWithAllOptions( 
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE Outline( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE OutlineWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE Simplify( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometrySimplification simplification,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SimplifyWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometrySimplification simplification,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE Transform( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CompareWith( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *otherGeometry,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometryRelation *relation) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CompareWithUsingTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *otherGeometry,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 otherGeometryTransform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometryRelation *relation) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeArea( 
                                /* [out][retval] */ float *area) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeAreaWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ float *area) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputePathLength( 
                                /* [out][retval] */ float *length) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputePathLengthWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ float *length) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputePointOnPath( 
                                /* [in] */ float distance,
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *point) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputePointOnPathWithTangent( 
                                /* [in] */ float distance,
                                /* [out] */ ABI::Windows::Foundation::Numerics::Vector2 *tangent,
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *point) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent( 
                                /* [in] */ float length,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out] */ ABI::Windows::Foundation::Numerics::Vector2 *tangent,
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *point) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE FillContainsPoint( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [out][retval] */ boolean *containsPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE FillContainsPointWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ boolean *containsPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeBounds( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeBoundsWithTransform( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeStrokeBounds( 
                                /* [in] */ float strokeWidth,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeStrokeBoundsWithStrokeStyle( 
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeStrokeBoundsWithAllOptions( 
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE StrokeContainsPoint( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [in] */ float strokeWidth,
                                /* [out][retval] */ boolean *containsPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE StrokeContainsPointWithStrokeStyle( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [out][retval] */ boolean *containsPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE StrokeContainsPointWithAllOptions( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ boolean *containsPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE Tessellate( 
                                /* [out] */ UINT32 *trianglesCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasTriangleVertices **triangles) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE TessellateWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out] */ UINT32 *trianglesCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasTriangleVertices **triangles) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SendPathTo( 
                                ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathReceiver *streamReader) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasGeometry = __uuidof(ICanvasGeometry);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CombineWith )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *otherGeometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 otherGeometryTransform,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine combine,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CombineWithUsingFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *otherGeometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 otherGeometryTransform,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine combine,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *Stroke )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float strokeWidth,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *StrokeWithStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *StrokeWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *Outline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *OutlineWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *Simplify )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification simplification,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *SimplifyWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification simplification,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CompareWith )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *otherGeometry,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation *relation);
        
        HRESULT ( STDMETHODCALLTYPE *CompareWithUsingTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *otherGeometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 otherGeometryTransform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation *relation);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeArea )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out][retval] */ float *area);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeAreaWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ float *area);
        
        HRESULT ( STDMETHODCALLTYPE *ComputePathLength )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out][retval] */ float *length);
        
        HRESULT ( STDMETHODCALLTYPE *ComputePathLengthWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ float *length);
        
        HRESULT ( STDMETHODCALLTYPE *ComputePointOnPath )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float distance,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *point);
        
        HRESULT ( STDMETHODCALLTYPE *ComputePointOnPathWithTangent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float distance,
            /* [out] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *tangent,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *point);
        
        HRESULT ( STDMETHODCALLTYPE *ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float length,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *tangent,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *point);
        
        HRESULT ( STDMETHODCALLTYPE *FillContainsPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [out][retval] */ boolean *containsPoint);
        
        HRESULT ( STDMETHODCALLTYPE *FillContainsPointWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ boolean *containsPoint);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeBoundsWithTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeStrokeBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float strokeWidth,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeStrokeBoundsWithStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeStrokeBoundsWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *StrokeContainsPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ float strokeWidth,
            /* [out][retval] */ boolean *containsPoint);
        
        HRESULT ( STDMETHODCALLTYPE *StrokeContainsPointWithStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [out][retval] */ boolean *containsPoint);
        
        HRESULT ( STDMETHODCALLTYPE *StrokeContainsPointWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ boolean *containsPoint);
        
        HRESULT ( STDMETHODCALLTYPE *Tessellate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out] */ UINT32 *trianglesCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices **triangles);
        
        HRESULT ( STDMETHODCALLTYPE *TessellateWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out] */ UINT32 *trianglesCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices **triangles);
        
        HRESULT ( STDMETHODCALLTYPE *SendPathTo )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver *streamReader);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_CombineWith(This,otherGeometry,otherGeometryTransform,combine,geometry)	\
    ( (This)->lpVtbl -> CombineWith(This,otherGeometry,otherGeometryTransform,combine,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_CombineWithUsingFlatteningTolerance(This,otherGeometry,otherGeometryTransform,combine,flatteningTolerance,geometry)	\
    ( (This)->lpVtbl -> CombineWithUsingFlatteningTolerance(This,otherGeometry,otherGeometryTransform,combine,flatteningTolerance,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Stroke(This,strokeWidth,geometry)	\
    ( (This)->lpVtbl -> Stroke(This,strokeWidth,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeWithStrokeStyle(This,strokeWidth,strokeStyle,geometry)	\
    ( (This)->lpVtbl -> StrokeWithStrokeStyle(This,strokeWidth,strokeStyle,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeWithAllOptions(This,strokeWidth,strokeStyle,transform,flatteningTolerance,geometry)	\
    ( (This)->lpVtbl -> StrokeWithAllOptions(This,strokeWidth,strokeStyle,transform,flatteningTolerance,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Outline(This,geometry)	\
    ( (This)->lpVtbl -> Outline(This,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_OutlineWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,geometry)	\
    ( (This)->lpVtbl -> OutlineWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Simplify(This,simplification,geometry)	\
    ( (This)->lpVtbl -> Simplify(This,simplification,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_SimplifyWithTransformAndFlatteningTolerance(This,simplification,transform,flatteningTolerance,geometry)	\
    ( (This)->lpVtbl -> SimplifyWithTransformAndFlatteningTolerance(This,simplification,transform,flatteningTolerance,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Transform(This,transform,geometry)	\
    ( (This)->lpVtbl -> Transform(This,transform,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_CompareWith(This,otherGeometry,relation)	\
    ( (This)->lpVtbl -> CompareWith(This,otherGeometry,relation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_CompareWithUsingTransformAndFlatteningTolerance(This,otherGeometry,otherGeometryTransform,flatteningTolerance,relation)	\
    ( (This)->lpVtbl -> CompareWithUsingTransformAndFlatteningTolerance(This,otherGeometry,otherGeometryTransform,flatteningTolerance,relation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeArea(This,area)	\
    ( (This)->lpVtbl -> ComputeArea(This,area) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeAreaWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,area)	\
    ( (This)->lpVtbl -> ComputeAreaWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,area) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePathLength(This,length)	\
    ( (This)->lpVtbl -> ComputePathLength(This,length) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePathLengthWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,length)	\
    ( (This)->lpVtbl -> ComputePathLengthWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,length) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePointOnPath(This,distance,point)	\
    ( (This)->lpVtbl -> ComputePointOnPath(This,distance,point) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePointOnPathWithTangent(This,distance,tangent,point)	\
    ( (This)->lpVtbl -> ComputePointOnPathWithTangent(This,distance,tangent,point) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent(This,length,transform,flatteningTolerance,tangent,point)	\
    ( (This)->lpVtbl -> ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent(This,length,transform,flatteningTolerance,tangent,point) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FillContainsPoint(This,point,containsPoint)	\
    ( (This)->lpVtbl -> FillContainsPoint(This,point,containsPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FillContainsPointWithTransformAndFlatteningTolerance(This,point,transform,flatteningTolerance,containsPoint)	\
    ( (This)->lpVtbl -> FillContainsPointWithTransformAndFlatteningTolerance(This,point,transform,flatteningTolerance,containsPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeBounds(This,bounds)	\
    ( (This)->lpVtbl -> ComputeBounds(This,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeBoundsWithTransform(This,transform,bounds)	\
    ( (This)->lpVtbl -> ComputeBoundsWithTransform(This,transform,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeStrokeBounds(This,strokeWidth,bounds)	\
    ( (This)->lpVtbl -> ComputeStrokeBounds(This,strokeWidth,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeStrokeBoundsWithStrokeStyle(This,strokeWidth,strokeStyle,bounds)	\
    ( (This)->lpVtbl -> ComputeStrokeBoundsWithStrokeStyle(This,strokeWidth,strokeStyle,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeStrokeBoundsWithAllOptions(This,strokeWidth,strokeStyle,transform,flatteningTolerance,bounds)	\
    ( (This)->lpVtbl -> ComputeStrokeBoundsWithAllOptions(This,strokeWidth,strokeStyle,transform,flatteningTolerance,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeContainsPoint(This,point,strokeWidth,containsPoint)	\
    ( (This)->lpVtbl -> StrokeContainsPoint(This,point,strokeWidth,containsPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeContainsPointWithStrokeStyle(This,point,strokeWidth,strokeStyle,containsPoint)	\
    ( (This)->lpVtbl -> StrokeContainsPointWithStrokeStyle(This,point,strokeWidth,strokeStyle,containsPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeContainsPointWithAllOptions(This,point,strokeWidth,strokeStyle,transform,flatteningTolerance,containsPoint)	\
    ( (This)->lpVtbl -> StrokeContainsPointWithAllOptions(This,point,strokeWidth,strokeStyle,transform,flatteningTolerance,containsPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Tessellate(This,trianglesCount,triangles)	\
    ( (This)->lpVtbl -> Tessellate(This,trianglesCount,triangles) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_TessellateWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,trianglesCount,triangles)	\
    ( (This)->lpVtbl -> TessellateWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,trianglesCount,triangles) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_SendPathTo(This,streamReader)	\
    ( (This)->lpVtbl -> SendPathTo(This,streamReader) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0169 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGeometryStatics[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0169 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0169_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0169_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometryStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("D94E33CF-CD59-46F2-8DF4-55066AABFD56")
                        ICanvasGeometryStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateRectangle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Rect rect,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateRectangleAtCoords( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [in] */ float w,
                                /* [in] */ float h,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateRoundedRectangle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Rect rect,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateRoundedRectangleAtCoords( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [in] */ float w,
                                /* [in] */ float h,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateEllipse( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateEllipseAtCoords( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateCircle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                                /* [in] */ float radius,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateCircleAtCoords( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [in] */ float radius,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreatePath( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathBuilder *pathBuilder,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreatePolygon( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 pointCount,
                                /* [in][size_is] */ ABI::Windows::Foundation::Numerics::Vector2 *points,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateGroup( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 geometriesCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometries,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateGroupWithFilledRegionDetermination( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 geometriesCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometries,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination filledRegionDetermination,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateText( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout *textLayout,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateGlyphRun( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *fontFace,
                                /* [in] */ float fontSize,
                                /* [in] */ UINT32 glyphCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *glyphs,
                                /* [in] */ boolean isSideways,
                                /* [in] */ UINT32 bidiLevel,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateInk( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke *inkStrokes,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateInkWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke *inkStrokes,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeFlatteningTolerance( 
                                /* [in] */ float dpi,
                                /* [in] */ float maximumZoomFactor,
                                /* [out][retval] */ float *flatteningTolerance) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeFlatteningToleranceWithTransform( 
                                /* [in] */ float dpi,
                                /* [in] */ float maximumZoomFactor,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 expectedGeometryTransform,
                                /* [out][retval] */ float *flatteningTolerance) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFlatteningTolerance( 
                                /* [out][retval] */ float *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasGeometryStatics = __uuidof(ICanvasGeometryStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRectangleAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRoundedRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRoundedRectangleAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateEllipse )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateEllipseAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCircle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCircleAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePath )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder *pathBuilder,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePolygon )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 pointCount,
            /* [in][size_is] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *points,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateGroup )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 geometriesCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometries,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateGroupWithFilledRegionDetermination )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 geometriesCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometries,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination filledRegionDetermination,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateText )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout *textLayout,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateGlyphRun )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *fontFace,
            /* [in] */ float fontSize,
            /* [in] */ UINT32 glyphCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *glyphs,
            /* [in] */ boolean isSideways,
            /* [in] */ UINT32 bidiLevel,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation glyphOrientation,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInk )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke *inkStrokes,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInkWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke *inkStrokes,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ float dpi,
            /* [in] */ float maximumZoomFactor,
            /* [out][retval] */ float *flatteningTolerance);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeFlatteningToleranceWithTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ float dpi,
            /* [in] */ float maximumZoomFactor,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 expectedGeometryTransform,
            /* [out][retval] */ float *flatteningTolerance);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [out][retval] */ float *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateRectangle(This,resourceCreator,rect,geometry)	\
    ( (This)->lpVtbl -> CreateRectangle(This,resourceCreator,rect,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateRectangleAtCoords(This,resourceCreator,x,y,w,h,geometry)	\
    ( (This)->lpVtbl -> CreateRectangleAtCoords(This,resourceCreator,x,y,w,h,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateRoundedRectangle(This,resourceCreator,rect,radiusX,radiusY,geometry)	\
    ( (This)->lpVtbl -> CreateRoundedRectangle(This,resourceCreator,rect,radiusX,radiusY,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateRoundedRectangleAtCoords(This,resourceCreator,x,y,w,h,radiusX,radiusY,geometry)	\
    ( (This)->lpVtbl -> CreateRoundedRectangleAtCoords(This,resourceCreator,x,y,w,h,radiusX,radiusY,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateEllipse(This,resourceCreator,centerPoint,radiusX,radiusY,geometry)	\
    ( (This)->lpVtbl -> CreateEllipse(This,resourceCreator,centerPoint,radiusX,radiusY,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateEllipseAtCoords(This,resourceCreator,x,y,radiusX,radiusY,geometry)	\
    ( (This)->lpVtbl -> CreateEllipseAtCoords(This,resourceCreator,x,y,radiusX,radiusY,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateCircle(This,resourceCreator,centerPoint,radius,geometry)	\
    ( (This)->lpVtbl -> CreateCircle(This,resourceCreator,centerPoint,radius,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateCircleAtCoords(This,resourceCreator,x,y,radius,geometry)	\
    ( (This)->lpVtbl -> CreateCircleAtCoords(This,resourceCreator,x,y,radius,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreatePath(This,pathBuilder,geometry)	\
    ( (This)->lpVtbl -> CreatePath(This,pathBuilder,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreatePolygon(This,resourceCreator,pointCount,points,geometry)	\
    ( (This)->lpVtbl -> CreatePolygon(This,resourceCreator,pointCount,points,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateGroup(This,resourceCreator,geometriesCount,geometries,geometry)	\
    ( (This)->lpVtbl -> CreateGroup(This,resourceCreator,geometriesCount,geometries,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateGroupWithFilledRegionDetermination(This,resourceCreator,geometriesCount,geometries,filledRegionDetermination,geometry)	\
    ( (This)->lpVtbl -> CreateGroupWithFilledRegionDetermination(This,resourceCreator,geometriesCount,geometries,filledRegionDetermination,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateText(This,textLayout,geometry)	\
    ( (This)->lpVtbl -> CreateText(This,textLayout,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateGlyphRun(This,resourceCreator,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,measuringMode,glyphOrientation,geometry)	\
    ( (This)->lpVtbl -> CreateGlyphRun(This,resourceCreator,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,measuringMode,glyphOrientation,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateInk(This,resourceCreator,inkStrokes,geometry)	\
    ( (This)->lpVtbl -> CreateInk(This,resourceCreator,inkStrokes,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateInkWithTransformAndFlatteningTolerance(This,resourceCreator,inkStrokes,transform,flatteningTolerance,geometry)	\
    ( (This)->lpVtbl -> CreateInkWithTransformAndFlatteningTolerance(This,resourceCreator,inkStrokes,transform,flatteningTolerance,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_ComputeFlatteningTolerance(This,dpi,maximumZoomFactor,flatteningTolerance)	\
    ( (This)->lpVtbl -> ComputeFlatteningTolerance(This,dpi,maximumZoomFactor,flatteningTolerance) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_ComputeFlatteningToleranceWithTransform(This,dpi,maximumZoomFactor,expectedGeometryTransform,flatteningTolerance)	\
    ( (This)->lpVtbl -> ComputeFlatteningToleranceWithTransform(This,dpi,maximumZoomFactor,expectedGeometryTransform,flatteningTolerance) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_get_DefaultFlatteningTolerance(This,value)	\
    ( (This)->lpVtbl -> get_DefaultFlatteningTolerance(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0170 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGeometry_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGeometry_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Geometry {
class CanvasCachedGeometry;
} /*Geometry*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0170 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0170_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0170_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("BA6CB114-E1A1-448D-AB7C-8D2B92674119")
                        ICanvasCachedGeometry : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasCachedGeometry = __uuidof(ICanvasCachedGeometry);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0171 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometryStatics[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0171 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0171_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0171_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometryStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("80BA1060-A9D7-41BA-9372-EC3FC1744E5D")
                        ICanvasCachedGeometryStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateFill( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry **cachedGeometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateFillWithFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry **cachedGeometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateStroke( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                                /* [in] */ float strokeWidth,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry **cachedGeometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateStrokeWithStrokeStyle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry **cachedGeometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateStrokeWithStrokeStyleAndFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry **cachedGeometry) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasCachedGeometryStatics = __uuidof(ICanvasCachedGeometryStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFill )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry **cachedGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFillWithFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry **cachedGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStroke )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float strokeWidth,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry **cachedGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStrokeWithStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry **cachedGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStrokeWithStrokeStyleAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry **cachedGeometry);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateFill(This,geometry,cachedGeometry)	\
    ( (This)->lpVtbl -> CreateFill(This,geometry,cachedGeometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateFillWithFlatteningTolerance(This,geometry,flatteningTolerance,cachedGeometry)	\
    ( (This)->lpVtbl -> CreateFillWithFlatteningTolerance(This,geometry,flatteningTolerance,cachedGeometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateStroke(This,geometry,strokeWidth,cachedGeometry)	\
    ( (This)->lpVtbl -> CreateStroke(This,geometry,strokeWidth,cachedGeometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateStrokeWithStrokeStyle(This,geometry,strokeWidth,strokeStyle,cachedGeometry)	\
    ( (This)->lpVtbl -> CreateStrokeWithStrokeStyle(This,geometry,strokeWidth,strokeStyle,cachedGeometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateStrokeWithStrokeStyleAndFlatteningTolerance(This,geometry,strokeWidth,strokeStyle,flatteningTolerance,cachedGeometry)	\
    ( (This)->lpVtbl -> CreateStrokeWithStrokeStyleAndFlatteningTolerance(This,geometry,strokeWidth,strokeStyle,flatteningTolerance,cachedGeometry) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0172 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasCachedGeometry_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasCachedGeometry_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasCachedGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
class CanvasFontSet;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier
    {
        CanvasFontPropertyIdentifier_None	= 0,
        CanvasFontPropertyIdentifier_FamilyName	= ( CanvasFontPropertyIdentifier_None + 1 ) ,
        CanvasFontPropertyIdentifier_PreferredFamilyName	= ( CanvasFontPropertyIdentifier_FamilyName + 1 ) ,
        CanvasFontPropertyIdentifier_FaceName	= ( CanvasFontPropertyIdentifier_PreferredFamilyName + 1 ) ,
        CanvasFontPropertyIdentifier_FullName	= ( CanvasFontPropertyIdentifier_FaceName + 1 ) ,
        CanvasFontPropertyIdentifier_Win32FamilyName	= ( CanvasFontPropertyIdentifier_FullName + 1 ) ,
        CanvasFontPropertyIdentifier_PostscriptName	= ( CanvasFontPropertyIdentifier_Win32FamilyName + 1 ) ,
        CanvasFontPropertyIdentifier_DesignScriptLanguageTag	= ( CanvasFontPropertyIdentifier_PostscriptName + 1 ) ,
        CanvasFontPropertyIdentifier_SupportedScriptLanguageTag	= ( CanvasFontPropertyIdentifier_DesignScriptLanguageTag + 1 ) ,
        CanvasFontPropertyIdentifier_SemanticTag	= ( CanvasFontPropertyIdentifier_SupportedScriptLanguageTag + 1 ) ,
        CanvasFontPropertyIdentifier_Weight	= ( CanvasFontPropertyIdentifier_SemanticTag + 1 ) ,
        CanvasFontPropertyIdentifier_Stretch	= ( CanvasFontPropertyIdentifier_Weight + 1 ) ,
        CanvasFontPropertyIdentifier_Style	= ( CanvasFontPropertyIdentifier_Stretch + 1 ) ,
        CanvasFontPropertyIdentifier_Total	= ( CanvasFontPropertyIdentifier_Style + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty
    {
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier Identifier;
    HSTRING Value;
    HSTRING Locale;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty;

#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasFontSet[] = L"Microsoft.Graphics.Canvas.Text.ICanvasFontSet";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0172 */
/* [local] */ 


#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasFontPropertyIdentifier
                        {
                            None	= 0,
                            FamilyName	= ( None + 1 ) ,
                            PreferredFamilyName	= ( FamilyName + 1 ) ,
                            FaceName	= ( PreferredFamilyName + 1 ) ,
                            FullName	= ( FaceName + 1 ) ,
                            Win32FamilyName	= ( FullName + 1 ) ,
                            PostscriptName	= ( Win32FamilyName + 1 ) ,
                            DesignScriptLanguageTag	= ( PostscriptName + 1 ) ,
                            SupportedScriptLanguageTag	= ( DesignScriptLanguageTag + 1 ) ,
                            SemanticTag	= ( SupportedScriptLanguageTag + 1 ) ,
                            Weight	= ( SemanticTag + 1 ) ,
                            Stretch	= ( Weight + 1 ) ,
                            Style	= ( Stretch + 1 ) ,
                            Total	= ( Style + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_None = CanvasFontPropertyIdentifier::None;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_FamilyName = CanvasFontPropertyIdentifier::FamilyName;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_PreferredFamilyName = CanvasFontPropertyIdentifier::PreferredFamilyName;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_FaceName = CanvasFontPropertyIdentifier::FaceName;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_FullName = CanvasFontPropertyIdentifier::FullName;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_Win32FamilyName = CanvasFontPropertyIdentifier::Win32FamilyName;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_PostscriptName = CanvasFontPropertyIdentifier::PostscriptName;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_DesignScriptLanguageTag = CanvasFontPropertyIdentifier::DesignScriptLanguageTag;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_SupportedScriptLanguageTag = CanvasFontPropertyIdentifier::SupportedScriptLanguageTag;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_SemanticTag = CanvasFontPropertyIdentifier::SemanticTag;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_Weight = CanvasFontPropertyIdentifier::Weight;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_Stretch = CanvasFontPropertyIdentifier::Stretch;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_Style = CanvasFontPropertyIdentifier::Style;
                    const MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_Total = CanvasFontPropertyIdentifier::Total;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasFontProperty
                        {
                        CanvasFontPropertyIdentifier Identifier;
                        HSTRING Value;
                        HSTRING Locale;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasFontProperty CanvasFontProperty;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0172_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0172_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSet */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("0A5BFB92-1F3C-459F-9D7E-A6289DD093C0")
                        ICanvasFontSet : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Fonts( 
                                /* [out][retval] */ __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace **value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE TryFindFontFace( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *fontFace,
                                /* [out] */ int *index,
                                /* [out][retval] */ boolean *succeeded) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetMatchingFontsFromProperties( 
                                /* [in] */ UINT32 propertyCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasFontProperty *propertyElements,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSet **matchingFonts) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetMatchingFontsFromWwsFamily( 
                                /* [in] */ HSTRING familyName,
                                /* [in] */ ABI::Windows::UI::Text::FontWeight weight,
                                /* [in] */ ABI::Windows::UI::Text::FontStretch stretch,
                                /* [in] */ ABI::Windows::UI::Text::FontStyle style,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSet **matchingFonts) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CountFontsMatchingProperty( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasFontProperty property,
                                /* [out][retval] */ UINT32 *count) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetPropertyValuesFromIndex( 
                                /* [in] */ UINT32 fontIndex,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier propertyIdentifier,
                                /* [out][retval] */ __FIMapView_2_HSTRING_HSTRING **values) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetPropertyValuesFromIdentifier( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier propertyIdentifier,
                                /* [in] */ HSTRING preferredLocaleNames,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasFontProperty **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetPropertyValues( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier propertyIdentifier,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasFontProperty **valueElements) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasFontSet = __uuidof(ICanvasFontSet);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Fonts )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
            /* [out][retval] */ __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace **value);
        
        HRESULT ( STDMETHODCALLTYPE *TryFindFontFace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *fontFace,
            /* [out] */ int *index,
            /* [out][retval] */ boolean *succeeded);
        
        HRESULT ( STDMETHODCALLTYPE *GetMatchingFontsFromProperties )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
            /* [in] */ UINT32 propertyCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty *propertyElements,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet **matchingFonts);
        
        HRESULT ( STDMETHODCALLTYPE *GetMatchingFontsFromWwsFamily )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
            /* [in] */ HSTRING familyName,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontWeight weight,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontStretch stretch,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontStyle style,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet **matchingFonts);
        
        HRESULT ( STDMETHODCALLTYPE *CountFontsMatchingProperty )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty property,
            /* [out][retval] */ UINT32 *count);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyValuesFromIndex )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
            /* [in] */ UINT32 fontIndex,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier propertyIdentifier,
            /* [out][retval] */ __FIMapView_2_HSTRING_HSTRING **values);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyValuesFromIdentifier )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier propertyIdentifier,
            /* [in] */ HSTRING preferredLocaleNames,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyValues )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier propertyIdentifier,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty **valueElements);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_get_Fonts(This,value)	\
    ( (This)->lpVtbl -> get_Fonts(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_TryFindFontFace(This,fontFace,index,succeeded)	\
    ( (This)->lpVtbl -> TryFindFontFace(This,fontFace,index,succeeded) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetMatchingFontsFromProperties(This,propertyCount,propertyElements,matchingFonts)	\
    ( (This)->lpVtbl -> GetMatchingFontsFromProperties(This,propertyCount,propertyElements,matchingFonts) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetMatchingFontsFromWwsFamily(This,familyName,weight,stretch,style,matchingFonts)	\
    ( (This)->lpVtbl -> GetMatchingFontsFromWwsFamily(This,familyName,weight,stretch,style,matchingFonts) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_CountFontsMatchingProperty(This,property,count)	\
    ( (This)->lpVtbl -> CountFontsMatchingProperty(This,property,count) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetPropertyValuesFromIndex(This,fontIndex,propertyIdentifier,values)	\
    ( (This)->lpVtbl -> GetPropertyValuesFromIndex(This,fontIndex,propertyIdentifier,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetPropertyValuesFromIdentifier(This,propertyIdentifier,preferredLocaleNames,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetPropertyValuesFromIdentifier(This,propertyIdentifier,preferredLocaleNames,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetPropertyValues(This,propertyIdentifier,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetPropertyValues(This,propertyIdentifier,valueCount,valueElements) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0173 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasFontSetFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasFontSetFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0173 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0173_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0173_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSetFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("3C9C9BDA-70F9-4FF9-AAB2-3B42923286EE")
                        ICanvasFontSetFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Windows::Foundation::IUriRuntimeClass *uri,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSet **fontSet) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasFontSetFactory = __uuidof(ICanvasFontSetFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CIUriRuntimeClass *uri,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet **fontSet);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_Create(This,uri,fontSet)	\
    ( (This)->lpVtbl -> Create(This,uri,fontSet) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0174 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasFontSetStatics[] = L"Microsoft.Graphics.Canvas.Text.ICanvasFontSetStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0174 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0174_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0174_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSetStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("5F4275CE-BCFA-48C5-9E67-FBE9866D4924")
                        ICanvasFontSetStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE GetSystemFontSet( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSet **fontSet) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasFontSetStatics = __uuidof(ICanvasFontSetStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemFontSet )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet **fontSet);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_GetSystemFontSet(This,fontSet)	\
    ( (This)->lpVtbl -> GetSystemFontSet(This,fontSet) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0175 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasFontSet_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasFontSet_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasFontSet[] = L"Microsoft.Graphics.Canvas.Text.CanvasFontSet";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod
    {
        CanvasNumberSubstitutionMethod_FromCulture	= 0,
        CanvasNumberSubstitutionMethod_Contextual	= ( CanvasNumberSubstitutionMethod_FromCulture + 1 ) ,
        CanvasNumberSubstitutionMethod_Disabled	= ( CanvasNumberSubstitutionMethod_Contextual + 1 ) ,
        CanvasNumberSubstitutionMethod_National	= ( CanvasNumberSubstitutionMethod_Disabled + 1 ) ,
        CanvasNumberSubstitutionMethod_Traditional	= ( CanvasNumberSubstitutionMethod_National + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitution[] = L"Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0175 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasNumberSubstitutionMethod
                        {
                            FromCulture	= 0,
                            Contextual	= ( FromCulture + 1 ) ,
                            Disabled	= ( Contextual + 1 ) ,
                            National	= ( Disabled + 1 ) ,
                            Traditional	= ( National + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasNumberSubstitutionMethod CanvasNumberSubstitutionMethod_FromCulture = CanvasNumberSubstitutionMethod::FromCulture;
                    const MIDL_ENUM CanvasNumberSubstitutionMethod CanvasNumberSubstitutionMethod_Contextual = CanvasNumberSubstitutionMethod::Contextual;
                    const MIDL_ENUM CanvasNumberSubstitutionMethod CanvasNumberSubstitutionMethod_Disabled = CanvasNumberSubstitutionMethod::Disabled;
                    const MIDL_ENUM CanvasNumberSubstitutionMethod CanvasNumberSubstitutionMethod_National = CanvasNumberSubstitutionMethod::National;
                    const MIDL_ENUM CanvasNumberSubstitutionMethod CanvasNumberSubstitutionMethod_Traditional = CanvasNumberSubstitutionMethod::Traditional;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasNumberSubstitutionMethod CanvasNumberSubstitutionMethod;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0175_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0175_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("C81A67AD-0639-4F8F-878B-D937F8A14293")
                        ICanvasNumberSubstitution : public IInspectable
                        {
                        public:
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasNumberSubstitution = __uuidof(ICanvasNumberSubstitution);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * This,
            /* [out] */ TrustLevel *trustLevel);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0176 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitutionFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitutionFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0176 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0176_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0176_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitutionFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("7496A822-C781-4EB0-AAFB-C078E7FA8E24")
                        ICanvasNumberSubstitutionFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod method,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution **canvasNumberSubstitution) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithLocaleAndIgnoreOverrides( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod method,
                                /* [in] */ HSTRING localeName,
                                /* [in] */ boolean ignoreEnvironmentOverrides,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution **canvasNumberSubstitution) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasNumberSubstitutionFactory = __uuidof(ICanvasNumberSubstitutionFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod method,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution **canvasNumberSubstitution);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithLocaleAndIgnoreOverrides )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod method,
            /* [in] */ HSTRING localeName,
            /* [in] */ boolean ignoreEnvironmentOverrides,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution **canvasNumberSubstitution);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_Create(This,method,canvasNumberSubstitution)	\
    ( (This)->lpVtbl -> Create(This,method,canvasNumberSubstitution) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_CreateWithLocaleAndIgnoreOverrides(This,method,localeName,ignoreEnvironmentOverrides,canvasNumberSubstitution)	\
    ( (This)->lpVtbl -> CreateWithLocaleAndIgnoreOverrides(This,method,localeName,ignoreEnvironmentOverrides,canvasNumberSubstitution) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0177 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution[] = L"Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerOptions[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0177 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0177_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0177_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("31F2406A-8C5F-4E12-8BD6-CFBBC7214D02")
                        ICanvasTextAnalyzerOptions : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE GetLocaleName( 
                                /* [in] */ INT32 characterIndex,
                                /* [out] */ INT32 *characterCount,
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetNumberSubstitution( 
                                /* [in] */ INT32 characterIndex,
                                /* [out] */ INT32 *characterCount,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution **value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetVerticalGlyphOrientation( 
                                /* [in] */ INT32 characterIndex,
                                /* [out] */ INT32 *characterCount,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetBidiLevel( 
                                /* [in] */ INT32 characterIndex,
                                /* [out] */ INT32 *characterCount,
                                /* [out][retval] */ UINT32 *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextAnalyzerOptions = __uuidof(ICanvasTextAnalyzerOptions);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocaleName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
            /* [in] */ INT32 characterIndex,
            /* [out] */ INT32 *characterCount,
            /* [out][retval] */ HSTRING *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetNumberSubstitution )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
            /* [in] */ INT32 characterIndex,
            /* [out] */ INT32 *characterCount,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution **value);
        
        HRESULT ( STDMETHODCALLTYPE *GetVerticalGlyphOrientation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
            /* [in] */ INT32 characterIndex,
            /* [out] */ INT32 *characterCount,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetBidiLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
            /* [in] */ INT32 characterIndex,
            /* [out] */ INT32 *characterCount,
            /* [out][retval] */ UINT32 *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptionsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetLocaleName(This,characterIndex,characterCount,value)	\
    ( (This)->lpVtbl -> GetLocaleName(This,characterIndex,characterCount,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetNumberSubstitution(This,characterIndex,characterCount,value)	\
    ( (This)->lpVtbl -> GetNumberSubstitution(This,characterIndex,characterCount,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetVerticalGlyphOrientation(This,characterIndex,characterCount,value)	\
    ( (This)->lpVtbl -> GetVerticalGlyphOrientation(This,characterIndex,characterCount,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetBidiLevel(This,characterIndex,characterCount,value)	\
    ( (This)->lpVtbl -> GetBidiLevel(This,characterIndex,characterCount,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0178 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasScaledFont[] = L"Microsoft.Graphics.Canvas.Text.ICanvasScaledFont";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0178 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0178_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0178_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("BBC4F8D2-EB2B-45F1-AC2A-CFC1F598BAE3")
                        ICanvasScaledFont : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FontFace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace **value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ScaleFactor( 
                                /* [out][retval] */ float *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasScaledFont = __uuidof(ICanvasScaledFont);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFontVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontFace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This,
            /* [out][retval] */ float *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFontVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFontVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_get_FontFace(This,value)	\
    ( (This)->lpVtbl -> get_FontFace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_get_ScaleFactor(This,value)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0179 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasScaledFont_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasScaledFont_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasScaledFont[] = L"Microsoft.Graphics.Canvas.Text.CanvasScaledFont";
#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange
    {
    INT32 CharacterIndex;
    INT32 CharacterCount;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange;

#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi
    {
    UINT32 ExplicitLevel;
    UINT32 ResolvedLevel;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi;

#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint
    {
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition BreakBefore;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition BreakAfter;
    boolean IsWhitespace;
    boolean IsSoftHyphen;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint;

#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties
    {
    HSTRING IsoScriptCode;
    INT32 IsoScriptNumber;
    INT32 ClusterLookahead;
    HSTRING JustificationCharacter;
    boolean RestrictCaretToClusters;
    boolean UsesWordDividers;
    boolean IsDiscreteWriting;
    boolean IsBlockWriting;
    boolean IsDistributedWithinCluster;
    boolean IsConnectedWriting;
    boolean IsCursiveWriting;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties;

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification
    {
        CanvasGlyphJustification_None	= 0,
        CanvasGlyphJustification_ArabicBlank	= 1,
        CanvasGlyphJustification_Character	= 2,
        CanvasGlyphJustification_Blank	= 4,
        CanvasGlyphJustification_ArabicNormal	= 7,
        CanvasGlyphJustification_ArabicKashida	= 8,
        CanvasGlyphJustification_ArabicAlef	= 9,
        CanvasGlyphJustification_ArabicHa	= 10,
        CanvasGlyphJustification_ArabicRa	= 11,
        CanvasGlyphJustification_ArabicBa	= 12,
        CanvasGlyphJustification_ArabicBara	= 13,
        CanvasGlyphJustification_ArabicSeen	= 14,
        CanvasGlyphJustification_ArabicSeenM	= 15
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping
    {
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification Justification;
    boolean IsClusterStart;
    boolean IsDiacritic;
    boolean IsZeroWidthSpace;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping;

#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation
    {
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation GlyphOrientation;
    UINT32 AdjustedBidiLevel;
    boolean IsSideways;
    boolean IsRightToLeft;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation;

#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity
    {
    float ExpansionMinimum;
    float ExpansionMaximum;
    float CompressionMaximum;
    BYTE ExpansionPriority;
    BYTE CompressionPriority;
    boolean AllowResidualExpansion;
    boolean AllowResidualCompression;
    boolean ApplyToLeadingEdge;
    boolean ApplyToTrailingEdge;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity;

#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
class CanvasTextAnalyzer;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif



/* interface __MIDL_itf_Canvas2Eabi_0000_0179 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasCharacterRange
                        {
                        INT32 CharacterIndex;
                        INT32 CharacterCount;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasCharacterRange CanvasCharacterRange;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasAnalyzedBidi
                        {
                        UINT32 ExplicitLevel;
                        UINT32 ResolvedLevel;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasAnalyzedBidi CanvasAnalyzedBidi;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasAnalyzedBreakpoint
                        {
                        CanvasLineBreakCondition BreakBefore;
                        CanvasLineBreakCondition BreakAfter;
                        boolean IsWhitespace;
                        boolean IsSoftHyphen;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasAnalyzedBreakpoint CanvasAnalyzedBreakpoint;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasScriptProperties
                        {
                        HSTRING IsoScriptCode;
                        INT32 IsoScriptNumber;
                        INT32 ClusterLookahead;
                        HSTRING JustificationCharacter;
                        boolean RestrictCaretToClusters;
                        boolean UsesWordDividers;
                        boolean IsDiscreteWriting;
                        boolean IsBlockWriting;
                        boolean IsDistributedWithinCluster;
                        boolean IsConnectedWriting;
                        boolean IsCursiveWriting;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasScriptProperties CanvasScriptProperties;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasGlyphJustification
                        {
                            None	= 0,
                            ArabicBlank	= 1,
                            Character	= 2,
                            Blank	= 4,
                            ArabicNormal	= 7,
                            ArabicKashida	= 8,
                            ArabicAlef	= 9,
                            ArabicHa	= 10,
                            ArabicRa	= 11,
                            ArabicBa	= 12,
                            ArabicBara	= 13,
                            ArabicSeen	= 14,
                            ArabicSeenM	= 15
                        } ;

                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_None = CanvasGlyphJustification::None;
                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_ArabicBlank = CanvasGlyphJustification::ArabicBlank;
                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_Character = CanvasGlyphJustification::Character;
                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_Blank = CanvasGlyphJustification::Blank;
                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_ArabicNormal = CanvasGlyphJustification::ArabicNormal;
                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_ArabicKashida = CanvasGlyphJustification::ArabicKashida;
                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_ArabicAlef = CanvasGlyphJustification::ArabicAlef;
                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_ArabicHa = CanvasGlyphJustification::ArabicHa;
                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_ArabicRa = CanvasGlyphJustification::ArabicRa;
                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_ArabicBa = CanvasGlyphJustification::ArabicBa;
                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_ArabicBara = CanvasGlyphJustification::ArabicBara;
                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_ArabicSeen = CanvasGlyphJustification::ArabicSeen;
                    const MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification_ArabicSeenM = CanvasGlyphJustification::ArabicSeenM;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef MIDL_ENUM CanvasGlyphJustification CanvasGlyphJustification;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasGlyphShaping
                        {
                        CanvasGlyphJustification Justification;
                        boolean IsClusterStart;
                        boolean IsDiacritic;
                        boolean IsZeroWidthSpace;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasGlyphShaping CanvasGlyphShaping;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasAnalyzedGlyphOrientation
                        {
                        CanvasGlyphOrientation GlyphOrientation;
                        UINT32 AdjustedBidiLevel;
                        boolean IsSideways;
                        boolean IsRightToLeft;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasAnalyzedGlyphOrientation CanvasAnalyzedGlyphOrientation;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    struct CanvasJustificationOpportunity
                        {
                        float ExpansionMinimum;
                        float ExpansionMaximum;
                        float CompressionMaximum;
                        BYTE ExpansionPriority;
                        BYTE CompressionPriority;
                        boolean AllowResidualExpansion;
                        boolean AllowResidualCompression;
                        boolean ApplyToLeadingEdge;
                        boolean ApplyToTrailingEdge;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasJustificationOpportunity CanvasJustificationOpportunity;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0179_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0179_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5604 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5604 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5604_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5604_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0180 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0180 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0180_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0180_v0_0_s_ifspec;

#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__

/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */
/* [unique][uuid][object] */ 



/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("659fa7a9-d350-5c96-9eda-65d151127be6")
    __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange *key) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [retval][out] */ struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont **value);
        
        END_INTERFACE
    } __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl;

    interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
    {
        CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0181 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */


/* interface __MIDL_itf_Canvas2Eabi_0000_0181 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0181_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0181_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5605 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5605 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5605_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5605_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0182 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0182 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0182_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0182_v0_0_s_ifspec;

#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__

/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("56051c10-f92f-5a6c-911e-367267245224")
    __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl;

    interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
    {
        CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0183 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */


/* interface __MIDL_itf_Canvas2Eabi_0000_0183 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0183_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0183_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5606 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5606 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5606_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5606_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0184 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0184 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0184_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0184_v0_0_s_ifspec;

#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__

/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e13342d7-18ac-5a96-8f97-4ad9aa7cc211")
    __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **first);
        
        END_INTERFACE
    } __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl;

    interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
    {
        CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0185 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */


/* interface __MIDL_itf_Canvas2Eabi_0000_0185 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0185_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0185_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5607 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5607 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5607_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5607_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0186 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0186 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0186_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0186_v0_0_s_ifspec;

#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__

/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f1eaee0a-1f12-5e87-9657-cb93e8827bb0")
    __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl;

    interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
    {
        CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0187 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */


/* interface __MIDL_itf_Canvas2Eabi_0000_0187 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0187_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0187_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5608 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5608 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5608_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5608_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0188 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0188 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0188_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0188_v0_0_s_ifspec;

#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__

/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */
/* [unique][uuid][object] */ 



/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9f5425b6-be6f-5f3d-9d65-ad8c61aa01de")
    __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange *key) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi *value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [retval][out] */ struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [retval][out] */ struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi *value);
        
        END_INTERFACE
    } __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl;

    interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
    {
        CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0189 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */


/* interface __MIDL_itf_Canvas2Eabi_0000_0189 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0189_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0189_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5609 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5609 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5609_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5609_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0190 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0190 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0190_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0190_v0_0_s_ifspec;

#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__

/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7e9530ef-eb03-5e8f-9d38-f2c62e31d4bc")
    __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl;

    interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
    {
        CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0191 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */


/* interface __MIDL_itf_Canvas2Eabi_0000_0191 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0191_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0191_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5610 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5610 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5610_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5610_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0192 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0192 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0192_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0192_v0_0_s_ifspec;

#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__

/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("51271225-b352-5aaa-ae19-95d387c9b6b7")
    __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **first);
        
        END_INTERFACE
    } __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl;

    interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
    {
        CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0193 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */


/* interface __MIDL_itf_Canvas2Eabi_0000_0193 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0193_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0193_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5611 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5611 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5611_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5611_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0194 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0194 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0194_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0194_v0_0_s_ifspec;

#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__

/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("67c4d9c7-c31e-51c1-ab1d-f8a0ebcd5552")
    __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl;

    interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
    {
        CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0195 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */


/* interface __MIDL_itf_Canvas2Eabi_0000_0195 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0195_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0195_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5612 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5612 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5612_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5612_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0196 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0196 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0196_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0196_v0_0_s_ifspec;

#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__

/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */
/* [unique][uuid][object] */ 



/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("93f9a2ab-5b51-5468-8b38-4693d96b4255")
    __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange *key) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [retval][out] */ struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution **value);
        
        END_INTERFACE
    } __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl;

    interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
    {
        CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0197 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */


/* interface __MIDL_itf_Canvas2Eabi_0000_0197 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0197_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0197_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5613 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5613 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5613_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5613_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0198 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0198 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0198_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0198_v0_0_s_ifspec;

#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__

/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c95c26dd-c066-543f-a3d4-a3fc9f0cad1a")
    __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl;

    interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
    {
        CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0199 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */


/* interface __MIDL_itf_Canvas2Eabi_0000_0199 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0199_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0199_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5614 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5614 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5614_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5614_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0200 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0200 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0200_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0200_v0_0_s_ifspec;

#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__

/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("27f7d15b-8c80-5fa3-a202-899cef70e002")
    __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **first);
        
        END_INTERFACE
    } __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl;

    interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
    {
        CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0201 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */


/* interface __MIDL_itf_Canvas2Eabi_0000_0201 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0201_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0201_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5615 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5615 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5615_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5615_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0202 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0202 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0202_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0202_v0_0_s_ifspec;

#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__

/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("80a1114f-758f-5110-baa8-f1884a7bb922")
    __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl;

    interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
    {
        CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0203 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */


/* interface __MIDL_itf_Canvas2Eabi_0000_0203 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0203_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0203_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5616 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5616 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5616_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5616_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0204 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0204 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0204_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0204_v0_0_s_ifspec;

#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__

/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */
/* [unique][uuid][object] */ 



/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f113a468-5320-5b3d-b976-1c12d95d71fe")
    __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange *key) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript *value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [retval][out] */ struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [retval][out] */ struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript *value);
        
        END_INTERFACE
    } __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl;

    interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
    {
        CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0205 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */


/* interface __MIDL_itf_Canvas2Eabi_0000_0205 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0205_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0205_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5617 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5617 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5617_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5617_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0206 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0206 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0206_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0206_v0_0_s_ifspec;

#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__

/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d6dd13e4-d1e8-577c-bbcb-cf31b96f09ed")
    __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl;

    interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
    {
        CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0207 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */


/* interface __MIDL_itf_Canvas2Eabi_0000_0207 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0207_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0207_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5618 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5618 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5618_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5618_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0208 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0208 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0208_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0208_v0_0_s_ifspec;

#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__

/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4b15169a-c4b5-51d3-b6c8-79ec3e177871")
    __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **first);
        
        END_INTERFACE
    } __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl;

    interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
    {
        CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0209 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */


/* interface __MIDL_itf_Canvas2Eabi_0000_0209 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0209_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0209_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5619 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5619 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5619_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5619_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0210 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0210 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0210_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0210_v0_0_s_ifspec;

#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__

/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9b325f09-f744-53fd-acc7-d5e6fea523d7")
    __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl;

    interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
    {
        CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0211 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */


/* interface __MIDL_itf_Canvas2Eabi_0000_0211 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0211_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0211_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5620 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5620 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5620_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5620_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0212 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0212 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0212_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0212_v0_0_s_ifspec;

#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__

/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */
/* [unique][uuid][object] */ 



/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a8240806-1266-51ae-9276-0d6eb62f403b")
    __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange *key) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation *value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [retval][out] */ struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [retval][out] */ struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation *value);
        
        END_INTERFACE
    } __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl;

    interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
    {
        CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0213 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */


/* interface __MIDL_itf_Canvas2Eabi_0000_0213 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0213_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0213_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5621 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5621 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5621_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5621_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0214 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0214 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0214_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0214_v0_0_s_ifspec;

#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__

/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6fa01beb-a02e-57b4-975d-0662230315e9")
    __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl;

    interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
    {
        CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0215 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */


/* interface __MIDL_itf_Canvas2Eabi_0000_0215 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0215_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0215_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5622 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5622 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5622_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5622_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0216 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0216 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0216_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0216_v0_0_s_ifspec;

#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__

/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bc2186a2-f834-5c78-8d4c-ec4166c46b40")
    __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **first);
        
        END_INTERFACE
    } __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl;

    interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
    {
        CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0217 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */


/* interface __MIDL_itf_Canvas2Eabi_0000_0217 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0217_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0217_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5623 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5623 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5623_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5623_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0218 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0218 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0218_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0218_v0_0_s_ifspec;

#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__

/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ce1ccf50-cc60-5c33-98d5-fb6ea38131bd")
    __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl;

    interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
    {
        CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0219 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */


/* interface __MIDL_itf_Canvas2Eabi_0000_0219 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0219_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0219_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5624 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5624 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5624_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5624_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0220 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0220 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0220_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0220_v0_0_s_ifspec;

#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__

/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */
/* [unique][uuid][object] */ 



/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3e238e5e-5b0e-519e-b8ee-9524d51e0376")
    __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange *key) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [retval][out] */ struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography **value);
        
        END_INTERFACE
    } __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl;

    interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
    {
        CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0221 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */


/* interface __MIDL_itf_Canvas2Eabi_0000_0221 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0221_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0221_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5625 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5625 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5625_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5625_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0222 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0222 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0222_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0222_v0_0_s_ifspec;

#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__

/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6bf99e32-7516-5e16-ad21-f83a89898c50")
    __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl;

    interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
    {
        CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0223 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */


/* interface __MIDL_itf_Canvas2Eabi_0000_0223 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0223_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0223_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5626 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5626 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5626_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5626_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0224 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0224 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0224_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0224_v0_0_s_ifspec;

#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__

/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9101ecfa-8e8b-5236-b3c1-3ae419df1a4d")
    __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **first);
        
        END_INTERFACE
    } __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl;

    interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
    {
        CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0225 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */


/* interface __MIDL_itf_Canvas2Eabi_0000_0225 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0225_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0225_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5627 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5627 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5627_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5627_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0226 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0226 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0226_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0226_v0_0_s_ifspec;

#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__

/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("08f216fc-38e5-5c04-bb90-ed0436cdf91d")
    __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl;

    interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
    {
        CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0227 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0227 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0227_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0227_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("4298F3D1-645B-40E3-B91B-81986D767FC0")
                        ICanvasTextAnalyzer : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE GetFontsUsingSystemFontSet( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *textFormat,
                                /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **values) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFonts( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *textFormat,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSet *fontSet,
                                /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **values) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetBidi( 
                                /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **values) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetBidiWithLocale( 
                                /* [in] */ HSTRING locale,
                                /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **values) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetBreakpoints( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetBreakpointsWithLocale( 
                                /* [in] */ HSTRING locale,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetNumberSubstitutions( 
                                /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **values) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetScript( 
                                /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **values) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetScriptWithLocale( 
                                /* [in] */ HSTRING locale,
                                /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **values) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetGlyphOrientations( 
                                /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **values) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetGlyphOrientationsWithLocale( 
                                /* [in] */ HSTRING locale,
                                /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **values) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetScriptProperties( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript analyzedScript,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasScriptProperties *scriptProperties) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetGlyphs( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange characterRange,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *fontFace,
                                /* [in] */ float fontSize,
                                /* [in] */ boolean isSideways,
                                /* [in] */ boolean isRightToLeft,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetGlyphsWithAllOptions( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange characterRange,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *fontFace,
                                /* [in] */ float fontSize,
                                /* [in] */ boolean isSideways,
                                /* [in] */ boolean isRightToLeft,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                                /* [in] */ HSTRING locale,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution *numberSubstitution,
                                /* [in] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography *typographyRanges,
                                /* [out] */ UINT32 *clusterMapIndicesCount,
                                /* [out][size_is][size_is] */ int **clusterMapIndicesElements,
                                /* [out] */ UINT32 *isShapedAloneGlyphsCount,
                                /* [out][size_is][size_is] */ boolean **isShapedAloneGlyphsElements,
                                /* [out] */ UINT32 *glyphShapingResultsCount,
                                /* [out][size_is][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping **glyphShapingResultsElements,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetJustificationOpportunities( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange characterRange,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *fontFace,
                                /* [in] */ float fontSize,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                                /* [in] */ UINT32 clusterMapIndicesCount,
                                /* [in][size_is] */ int *clusterMapIndicesElements,
                                /* [in] */ UINT32 glyphShapingResultsCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping *glyphShapingResultsElements,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasJustificationOpportunity **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ApplyJustificationOpportunities( 
                                /* [in] */ float lineWidth,
                                /* [in] */ UINT32 justificationOpportunitiesCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasJustificationOpportunity *justificationOpportunitiesElements,
                                /* [in] */ UINT32 sourceGlyphsCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *sourceGlyphsElements,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddGlyphsAfterJustification( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *fontFace,
                                /* [in] */ float fontSize,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                                /* [in] */ UINT32 clusterMapIndicesCount,
                                /* [in][size_is] */ int *clusterMapIndicesElements,
                                /* [in] */ UINT32 originalGlyphsCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *originalGlyphsElements,
                                /* [in] */ UINT32 justifiedGlyphsCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *justifiedGlyphsElements,
                                /* [in] */ UINT32 glyphShapingResultsCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping *glyphShapingResultsElements,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddGlyphsAfterJustificationWithClusterMap( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *fontFace,
                                /* [in] */ float fontSize,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                                /* [in] */ UINT32 clusterMapIndicesCount,
                                /* [in][size_is] */ int *clusterMapIndicesElements,
                                /* [in] */ UINT32 originalGlyphsCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *originalGlyphsElements,
                                /* [in] */ UINT32 justifiedGlyphsCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *justifiedGlyphsElements,
                                /* [in] */ UINT32 glyphShapingResultsCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping *glyphShapingResultsElements,
                                /* [out] */ UINT32 *outputClusterMapIndicesCount,
                                /* [out][size_is][size_is] */ int **outputClusterMapIndicesElements,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph **valueElements) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextAnalyzer = __uuidof(ICanvasTextAnalyzer);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetFontsUsingSystemFontSet )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *textFormat,
            /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **values);
        
        HRESULT ( STDMETHODCALLTYPE *GetFonts )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *textFormat,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet *fontSet,
            /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **values);
        
        HRESULT ( STDMETHODCALLTYPE *GetBidi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **values);
        
        HRESULT ( STDMETHODCALLTYPE *GetBidiWithLocale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ HSTRING locale,
            /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **values);
        
        HRESULT ( STDMETHODCALLTYPE *GetBreakpoints )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetBreakpointsWithLocale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ HSTRING locale,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetNumberSubstitutions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **values);
        
        HRESULT ( STDMETHODCALLTYPE *GetScript )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **values);
        
        HRESULT ( STDMETHODCALLTYPE *GetScriptWithLocale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ HSTRING locale,
            /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **values);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlyphOrientations )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **values);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlyphOrientationsWithLocale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ HSTRING locale,
            /* [out][retval] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **values);
        
        HRESULT ( STDMETHODCALLTYPE *GetScriptProperties )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript analyzedScript,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties *scriptProperties);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlyphs )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange characterRange,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *fontFace,
            /* [in] */ float fontSize,
            /* [in] */ boolean isSideways,
            /* [in] */ boolean isRightToLeft,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlyphsWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange characterRange,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *fontFace,
            /* [in] */ float fontSize,
            /* [in] */ boolean isSideways,
            /* [in] */ boolean isRightToLeft,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
            /* [in] */ HSTRING locale,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution *numberSubstitution,
            /* [in] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography *typographyRanges,
            /* [out] */ UINT32 *clusterMapIndicesCount,
            /* [out][size_is][size_is] */ int **clusterMapIndicesElements,
            /* [out] */ UINT32 *isShapedAloneGlyphsCount,
            /* [out][size_is][size_is] */ boolean **isShapedAloneGlyphsElements,
            /* [out] */ UINT32 *glyphShapingResultsCount,
            /* [out][size_is][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping **glyphShapingResultsElements,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetJustificationOpportunities )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange characterRange,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *fontFace,
            /* [in] */ float fontSize,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
            /* [in] */ UINT32 clusterMapIndicesCount,
            /* [in][size_is] */ int *clusterMapIndicesElements,
            /* [in] */ UINT32 glyphShapingResultsCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping *glyphShapingResultsElements,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyJustificationOpportunities )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ float lineWidth,
            /* [in] */ UINT32 justificationOpportunitiesCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity *justificationOpportunitiesElements,
            /* [in] */ UINT32 sourceGlyphsCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *sourceGlyphsElements,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *AddGlyphsAfterJustification )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *fontFace,
            /* [in] */ float fontSize,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
            /* [in] */ UINT32 clusterMapIndicesCount,
            /* [in][size_is] */ int *clusterMapIndicesElements,
            /* [in] */ UINT32 originalGlyphsCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *originalGlyphsElements,
            /* [in] */ UINT32 justifiedGlyphsCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *justifiedGlyphsElements,
            /* [in] */ UINT32 glyphShapingResultsCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping *glyphShapingResultsElements,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *AddGlyphsAfterJustificationWithClusterMap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *fontFace,
            /* [in] */ float fontSize,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
            /* [in] */ UINT32 clusterMapIndicesCount,
            /* [in][size_is] */ int *clusterMapIndicesElements,
            /* [in] */ UINT32 originalGlyphsCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *originalGlyphsElements,
            /* [in] */ UINT32 justifiedGlyphsCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *justifiedGlyphsElements,
            /* [in] */ UINT32 glyphShapingResultsCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping *glyphShapingResultsElements,
            /* [out] */ UINT32 *outputClusterMapIndicesCount,
            /* [out][size_is][size_is] */ int **outputClusterMapIndicesElements,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph **valueElements);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetFontsUsingSystemFontSet(This,textFormat,values)	\
    ( (This)->lpVtbl -> GetFontsUsingSystemFontSet(This,textFormat,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetFonts(This,textFormat,fontSet,values)	\
    ( (This)->lpVtbl -> GetFonts(This,textFormat,fontSet,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetBidi(This,values)	\
    ( (This)->lpVtbl -> GetBidi(This,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetBidiWithLocale(This,locale,values)	\
    ( (This)->lpVtbl -> GetBidiWithLocale(This,locale,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetBreakpoints(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetBreakpoints(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetBreakpointsWithLocale(This,locale,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetBreakpointsWithLocale(This,locale,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetNumberSubstitutions(This,values)	\
    ( (This)->lpVtbl -> GetNumberSubstitutions(This,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetScript(This,values)	\
    ( (This)->lpVtbl -> GetScript(This,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetScriptWithLocale(This,locale,values)	\
    ( (This)->lpVtbl -> GetScriptWithLocale(This,locale,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetGlyphOrientations(This,values)	\
    ( (This)->lpVtbl -> GetGlyphOrientations(This,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetGlyphOrientationsWithLocale(This,locale,values)	\
    ( (This)->lpVtbl -> GetGlyphOrientationsWithLocale(This,locale,values) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetScriptProperties(This,analyzedScript,scriptProperties)	\
    ( (This)->lpVtbl -> GetScriptProperties(This,analyzedScript,scriptProperties) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetGlyphs(This,characterRange,fontFace,fontSize,isSideways,isRightToLeft,script,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetGlyphs(This,characterRange,fontFace,fontSize,isSideways,isRightToLeft,script,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetGlyphsWithAllOptions(This,characterRange,fontFace,fontSize,isSideways,isRightToLeft,script,locale,numberSubstitution,typographyRanges,clusterMapIndicesCount,clusterMapIndicesElements,isShapedAloneGlyphsCount,isShapedAloneGlyphsElements,glyphShapingResultsCount,glyphShapingResultsElements,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetGlyphsWithAllOptions(This,characterRange,fontFace,fontSize,isSideways,isRightToLeft,script,locale,numberSubstitution,typographyRanges,clusterMapIndicesCount,clusterMapIndicesElements,isShapedAloneGlyphsCount,isShapedAloneGlyphsElements,glyphShapingResultsCount,glyphShapingResultsElements,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetJustificationOpportunities(This,characterRange,fontFace,fontSize,script,clusterMapIndicesCount,clusterMapIndicesElements,glyphShapingResultsCount,glyphShapingResultsElements,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetJustificationOpportunities(This,characterRange,fontFace,fontSize,script,clusterMapIndicesCount,clusterMapIndicesElements,glyphShapingResultsCount,glyphShapingResultsElements,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_ApplyJustificationOpportunities(This,lineWidth,justificationOpportunitiesCount,justificationOpportunitiesElements,sourceGlyphsCount,sourceGlyphsElements,valueCount,valueElements)	\
    ( (This)->lpVtbl -> ApplyJustificationOpportunities(This,lineWidth,justificationOpportunitiesCount,justificationOpportunitiesElements,sourceGlyphsCount,sourceGlyphsElements,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_AddGlyphsAfterJustification(This,fontFace,fontSize,script,clusterMapIndicesCount,clusterMapIndicesElements,originalGlyphsCount,originalGlyphsElements,justifiedGlyphsCount,justifiedGlyphsElements,glyphShapingResultsCount,glyphShapingResultsElements,valueCount,valueElements)	\
    ( (This)->lpVtbl -> AddGlyphsAfterJustification(This,fontFace,fontSize,script,clusterMapIndicesCount,clusterMapIndicesElements,originalGlyphsCount,originalGlyphsElements,justifiedGlyphsCount,justifiedGlyphsElements,glyphShapingResultsCount,glyphShapingResultsElements,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_AddGlyphsAfterJustificationWithClusterMap(This,fontFace,fontSize,script,clusterMapIndicesCount,clusterMapIndicesElements,originalGlyphsCount,originalGlyphsElements,justifiedGlyphsCount,justifiedGlyphsElements,glyphShapingResultsCount,glyphShapingResultsElements,outputClusterMapIndicesCount,outputClusterMapIndicesElements,valueCount,valueElements)	\
    ( (This)->lpVtbl -> AddGlyphsAfterJustificationWithClusterMap(This,fontFace,fontSize,script,clusterMapIndicesCount,clusterMapIndicesElements,originalGlyphsCount,originalGlyphsElements,justifiedGlyphsCount,justifiedGlyphsElements,glyphShapingResultsCount,glyphShapingResultsElements,outputClusterMapIndicesCount,outputClusterMapIndicesElements,valueCount,valueElements) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0228 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0228 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0228_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0228_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("521E433F-F698-44C0-8D7F-FE374FE539E1")
                        ICanvasTextAnalyzerFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ HSTRING text,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer **canvasTextAnalyzer) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel( 
                                /* [in] */ HSTRING text,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution *numberSubstitution,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation verticalGlyphOrientation,
                                /* [in] */ UINT32 bidiLevel,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer **canvasTextAnalyzer) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithOptions( 
                                /* [in] */ HSTRING text,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions *options,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer **canvasTextAnalyzer) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextAnalyzerFactory = __uuidof(ICanvasTextAnalyzerFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection textDirection,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer **canvasTextAnalyzer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection textDirection,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution *numberSubstitution,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation verticalGlyphOrientation,
            /* [in] */ UINT32 bidiLevel,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer **canvasTextAnalyzer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection textDirection,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions *options,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer **canvasTextAnalyzer);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_Create(This,text,textDirection,canvasTextAnalyzer)	\
    ( (This)->lpVtbl -> Create(This,text,textDirection,canvasTextAnalyzer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(This,text,textDirection,numberSubstitution,verticalGlyphOrientation,bidiLevel,canvasTextAnalyzer)	\
    ( (This)->lpVtbl -> CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(This,text,textDirection,numberSubstitution,verticalGlyphOrientation,bidiLevel,canvasTextAnalyzer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_CreateWithOptions(This,text,textDirection,options,canvasTextAnalyzer)	\
    ( (This)->lpVtbl -> CreateWithOptions(This,text,textDirection,options,canvasTextAnalyzer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0229 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextAnalyzer_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextAnalyzer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextAnalyzer[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0229 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0229_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0229_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5628 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5628 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5628_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5628_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0230 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0230 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0230_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0230_v0_0_s_ifspec;

#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__

/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */
/* [unique][uuid][object] */ 



/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("842f5ded-4e0a-5c23-b1d2-f551a40dfb56")
    __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **items,
            /* [retval][out] */ unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **value);
        
        END_INTERFACE
    } __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl;

    interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
    {
        CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0231 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont */


/* interface __MIDL_itf_Canvas2Eabi_0000_0231 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0231_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0231_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5629 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5629 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5629_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5629_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0232 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0232 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0232_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0232_v0_0_s_ifspec;

#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__

/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */
/* [unique][uuid][object] */ 



/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eaf56dfd-1114-5c78-a566-389d8da38288")
    __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **items,
            /* [retval][out] */ unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **value);
        
        END_INTERFACE
    } __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl;

    interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
    {
        CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0233 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi */


/* interface __MIDL_itf_Canvas2Eabi_0000_0233 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0233_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0233_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5630 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5630 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5630_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5630_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0234 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0234 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0234_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0234_v0_0_s_ifspec;

#ifndef ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__

/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */
/* [unique][uuid][object] */ 



/* interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2c386993-9c51-5a1a-b59c-176b085558dd")
    __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange *key) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint *value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [retval][out] */ struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [retval][out] */ struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint *value);
        
        END_INTERFACE
    } __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl;

    interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
    {
        CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0235 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */


/* interface __MIDL_itf_Canvas2Eabi_0000_0235 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0235_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0235_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5631 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5631 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5631_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5631_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0236 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0236 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0236_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0236_v0_0_s_ifspec;

#ifndef ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__

/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("662b6385-c525-52d3-95be-f878f47eb9ec")
    __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl;

    interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
    {
        CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0237 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */


/* interface __MIDL_itf_Canvas2Eabi_0000_0237 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0237_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0237_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5632 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5632 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5632_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5632_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0238 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0238 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0238_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0238_v0_0_s_ifspec;

#ifndef ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__

/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ec783e46-bd88-51b7-9539-e767dfd3aa5a")
    __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [retval][out] */ __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **first);
        
        END_INTERFACE
    } __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl;

    interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
    {
        CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0239 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */


/* interface __MIDL_itf_Canvas2Eabi_0000_0239 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0239_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0239_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5633 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5633 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5633_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5633_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0240 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0240 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0240_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0240_v0_0_s_ifspec;

#ifndef ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__

/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("864c33d2-ec71-546a-a93e-8c7600579bbb")
    __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl;

    interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
    {
        CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0241 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */


/* interface __MIDL_itf_Canvas2Eabi_0000_0241 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0241_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0241_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5634 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5634 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5634_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5634_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0242 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0242 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0242_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0242_v0_0_s_ifspec;

#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__

/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */
/* [unique][uuid][object] */ 



/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5f14499a-b04a-527b-a1b2-4861c2ba02e2")
    __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **items,
            /* [retval][out] */ unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **value);
        
        END_INTERFACE
    } __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl;

    interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
    {
        CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0243 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint */


/* interface __MIDL_itf_Canvas2Eabi_0000_0243 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0243_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0243_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5635 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5635 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5635_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5635_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0244 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0244 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0244_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0244_v0_0_s_ifspec;

#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__

/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */
/* [unique][uuid][object] */ 



/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("de9ca46b-a6c8-57de-8423-c62f9719fbaf")
    __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **items,
            /* [retval][out] */ unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **value);
        
        END_INTERFACE
    } __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl;

    interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
    {
        CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0245 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution */


/* interface __MIDL_itf_Canvas2Eabi_0000_0245 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0245_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0245_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5636 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5636 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5636_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5636_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0246 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0246 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0246_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0246_v0_0_s_ifspec;

#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__

/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */
/* [unique][uuid][object] */ 



/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f347bfc7-bb27-523d-9efc-c70891b2b98b")
    __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **items,
            /* [retval][out] */ unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **value);
        
        END_INTERFACE
    } __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl;

    interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
    {
        CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0247 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript */


/* interface __MIDL_itf_Canvas2Eabi_0000_0247 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0247_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0247_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5637 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5637 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5637_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5637_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0248 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0248 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0248_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0248_v0_0_s_ifspec;

#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__

/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */
/* [unique][uuid][object] */ 



/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c512a1c3-6564-5d44-8a62-bd91e7fc17c0")
    __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **items,
            /* [retval][out] */ unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **value);
        
        END_INTERFACE
    } __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl;

    interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
    {
        CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0249 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation */


/* interface __MIDL_itf_Canvas2Eabi_0000_0249 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0249_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0249_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5638 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5638 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5638_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5638_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0250 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0250 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0250_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0250_v0_0_s_ifspec;

#ifndef ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__

/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */
/* [unique][uuid][object] */ 



/* interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("efdb3d2a-c102-5f30-bb87-1c5d3e22d912")
    __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **items,
            /* [retval][out] */ unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **value);
        
        END_INTERFACE
    } __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl;

    interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
    {
        CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0251 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography */
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode
    {
        CanvasSpriteSortMode_None	= 0,
        CanvasSpriteSortMode_Bitmap	= ( CanvasSpriteSortMode_None + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions
    {
        CanvasSpriteOptions_None	= 0,
        CanvasSpriteOptions_ClampToSourceRect	= 0x1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions;


#endif /* end if !defined(__cplusplus) */


#else
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
#if defined(MIDL_ENUM)
typedef MIDL_ENUM CanvasSpriteOptions CanvasSpriteOptions;
#else
typedef enum class CanvasSpriteOptions CanvasSpriteOptions;
#endif
DEFINE_ENUM_FLAG_OPERATORS(CanvasSpriteOptions)
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip
    {
        CanvasSpriteFlip_None	= 0,
        CanvasSpriteFlip_Horizontal	= 0x1,
        CanvasSpriteFlip_Vertical	= 0x2,
        CanvasSpriteFlip_Both	= 0x3
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip;


#endif /* end if !defined(__cplusplus) */


#else
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
#if defined(MIDL_ENUM)
typedef MIDL_ENUM CanvasSpriteFlip CanvasSpriteFlip;
#else
typedef enum class CanvasSpriteFlip CanvasSpriteFlip;
#endif
DEFINE_ENUM_FLAG_OPERATORS(CanvasSpriteFlip)
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasSpriteBatch;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSpriteBatchStatics[] = L"Microsoft.Graphics.Canvas.ICanvasSpriteBatchStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0251 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasSpriteSortMode
                    {
                        None	= 0,
                        Bitmap	= ( None + 1 ) 
                    } ;

                const MIDL_ENUM CanvasSpriteSortMode CanvasSpriteSortMode_None = CanvasSpriteSortMode::None;
                const MIDL_ENUM CanvasSpriteSortMode CanvasSpriteSortMode_Bitmap = CanvasSpriteSortMode::Bitmap;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasSpriteSortMode CanvasSpriteSortMode;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasSpriteOptions
                    {
                        None	= 0,
                        ClampToSourceRect	= 0x1
                    } ;

                const MIDL_ENUM CanvasSpriteOptions CanvasSpriteOptions_None = CanvasSpriteOptions::None;
                const MIDL_ENUM CanvasSpriteOptions CanvasSpriteOptions_ClampToSourceRect = CanvasSpriteOptions::ClampToSourceRect;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasSpriteOptions CanvasSpriteOptions;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasSpriteFlip
                    {
                        None	= 0,
                        Horizontal	= 0x1,
                        Vertical	= 0x2,
                        Both	= 0x3
                    } ;

                const MIDL_ENUM CanvasSpriteFlip CanvasSpriteFlip_None = CanvasSpriteFlip::None;
                const MIDL_ENUM CanvasSpriteFlip CanvasSpriteFlip_Horizontal = CanvasSpriteFlip::Horizontal;
                const MIDL_ENUM CanvasSpriteFlip CanvasSpriteFlip_Vertical = CanvasSpriteFlip::Vertical;
                const MIDL_ENUM CanvasSpriteFlip CanvasSpriteFlip_Both = CanvasSpriteFlip::Both;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasSpriteFlip CanvasSpriteFlip;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0251_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0251_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasSpriteBatchStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("851EB08D-9D01-4B57-9E94-24113151B74B")
                    ICanvasSpriteBatchStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE IsSupported( 
                            ABI::Microsoft::Graphics::Canvas::ICanvasDevice *device,
                            /* [out][retval] */ boolean *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasSpriteBatchStatics = __uuidof(ICanvasSpriteBatchStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *IsSupported )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This,
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *device,
            /* [out][retval] */ boolean *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_IsSupported(This,device,value)	\
    ( (This)->lpVtbl -> IsSupported(This,device,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0252 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSpriteBatch[] = L"Microsoft.Graphics.Canvas.ICanvasSpriteBatch";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0252 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0252_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0252_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasSpriteBatch */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("A065DCE4-A7F2-4DF4-8405-EA9E3A215BF8")
                    ICanvasSpriteBatch : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE DrawToRect( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Rect destRect) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawAtOffset( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawWithTransform( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawToRectWithTint( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Rect destRect,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 tint) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawAtOffsetWithTint( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 tint) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawWithTransformAndTint( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 tint) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawToRectWithTintAndFlip( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Rect destRect,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 tint,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasSpriteFlip flip) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawWithTransformAndTintAndFlip( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 tint,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasSpriteFlip flip) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawAtOffsetWithTintAndTransform( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 tint,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 origin,
                            /* [in] */ float rotation,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 scale,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasSpriteFlip flip) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetToRect( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Rect destRect,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRect) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetAtOffset( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRect) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetWithTransform( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRect) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetToRectWithTint( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Rect destRect,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRect,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 tint) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetAtOffsetWithTint( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRect,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 tint) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetWithTransformAndTint( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRect,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 tint) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetToRectWithTintAndFlip( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Rect destRect,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRect,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 tint,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasSpriteFlip flip) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetWithTransformAndTintAndFlip( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRect,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 tint,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasSpriteFlip flip) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetAtOffsetWithTintAndTransform( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRect,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 tint,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 origin,
                            /* [in] */ float rotation,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 scale,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasSpriteFlip flip) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasSpriteBatch = __uuidof(ICanvasSpriteBatch);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *DrawToRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destRect);
        
        HRESULT ( STDMETHODCALLTYPE *DrawAtOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset);
        
        HRESULT ( STDMETHODCALLTYPE *DrawWithTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform);
        
        HRESULT ( STDMETHODCALLTYPE *DrawToRectWithTint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destRect,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint);
        
        HRESULT ( STDMETHODCALLTYPE *DrawAtOffsetWithTint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint);
        
        HRESULT ( STDMETHODCALLTYPE *DrawWithTransformAndTint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint);
        
        HRESULT ( STDMETHODCALLTYPE *DrawToRectWithTintAndFlip )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destRect,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip);
        
        HRESULT ( STDMETHODCALLTYPE *DrawWithTransformAndTintAndFlip )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip);
        
        HRESULT ( STDMETHODCALLTYPE *DrawAtOffsetWithTintAndTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 origin,
            /* [in] */ float rotation,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 scale,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip);
        
        HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetToRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destRect,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRect);
        
        HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetAtOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRect);
        
        HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetWithTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRect);
        
        HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetToRectWithTint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destRect,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRect,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint);
        
        HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetAtOffsetWithTint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRect,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint);
        
        HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetWithTransformAndTint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRect,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint);
        
        HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetToRectWithTintAndFlip )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destRect,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRect,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip);
        
        HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetWithTransformAndTintAndFlip )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRect,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip);
        
        HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetAtOffsetWithTintAndTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRect,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 origin,
            /* [in] */ float rotation,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 scale,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawToRect(This,bitmap,destRect)	\
    ( (This)->lpVtbl -> DrawToRect(This,bitmap,destRect) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawAtOffset(This,bitmap,offset)	\
    ( (This)->lpVtbl -> DrawAtOffset(This,bitmap,offset) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawWithTransform(This,bitmap,transform)	\
    ( (This)->lpVtbl -> DrawWithTransform(This,bitmap,transform) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawToRectWithTint(This,bitmap,destRect,tint)	\
    ( (This)->lpVtbl -> DrawToRectWithTint(This,bitmap,destRect,tint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawAtOffsetWithTint(This,bitmap,offset,tint)	\
    ( (This)->lpVtbl -> DrawAtOffsetWithTint(This,bitmap,offset,tint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawWithTransformAndTint(This,bitmap,transform,tint)	\
    ( (This)->lpVtbl -> DrawWithTransformAndTint(This,bitmap,transform,tint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawToRectWithTintAndFlip(This,bitmap,destRect,tint,flip)	\
    ( (This)->lpVtbl -> DrawToRectWithTintAndFlip(This,bitmap,destRect,tint,flip) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawWithTransformAndTintAndFlip(This,bitmap,transform,tint,flip)	\
    ( (This)->lpVtbl -> DrawWithTransformAndTintAndFlip(This,bitmap,transform,tint,flip) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawAtOffsetWithTintAndTransform(This,bitmap,offset,tint,origin,rotation,scale,flip)	\
    ( (This)->lpVtbl -> DrawAtOffsetWithTintAndTransform(This,bitmap,offset,tint,origin,rotation,scale,flip) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetToRect(This,bitmap,destRect,sourceRect)	\
    ( (This)->lpVtbl -> DrawFromSpriteSheetToRect(This,bitmap,destRect,sourceRect) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetAtOffset(This,bitmap,offset,sourceRect)	\
    ( (This)->lpVtbl -> DrawFromSpriteSheetAtOffset(This,bitmap,offset,sourceRect) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetWithTransform(This,bitmap,transform,sourceRect)	\
    ( (This)->lpVtbl -> DrawFromSpriteSheetWithTransform(This,bitmap,transform,sourceRect) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetToRectWithTint(This,bitmap,destRect,sourceRect,tint)	\
    ( (This)->lpVtbl -> DrawFromSpriteSheetToRectWithTint(This,bitmap,destRect,sourceRect,tint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetAtOffsetWithTint(This,bitmap,offset,sourceRect,tint)	\
    ( (This)->lpVtbl -> DrawFromSpriteSheetAtOffsetWithTint(This,bitmap,offset,sourceRect,tint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetWithTransformAndTint(This,bitmap,transform,sourceRect,tint)	\
    ( (This)->lpVtbl -> DrawFromSpriteSheetWithTransformAndTint(This,bitmap,transform,sourceRect,tint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetToRectWithTintAndFlip(This,bitmap,destRect,sourceRect,tint,flip)	\
    ( (This)->lpVtbl -> DrawFromSpriteSheetToRectWithTintAndFlip(This,bitmap,destRect,sourceRect,tint,flip) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetWithTransformAndTintAndFlip(This,bitmap,transform,sourceRect,tint,flip)	\
    ( (This)->lpVtbl -> DrawFromSpriteSheetWithTransformAndTintAndFlip(This,bitmap,transform,sourceRect,tint,flip) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetAtOffsetWithTintAndTransform(This,bitmap,offset,sourceRect,tint,origin,rotation,scale,flip)	\
    ( (This)->lpVtbl -> DrawFromSpriteSheetAtOffsetWithTintAndTransform(This,bitmap,offset,sourceRect,tint,origin,rotation,scale,flip) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0253 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSpriteBatch_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSpriteBatch_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasSpriteBatch[] = L"Microsoft.Graphics.Canvas.CanvasSpriteBatch";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Svg {
class CanvasSvgTextElement;
} /*Svg*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay
    {
        CanvasSvgDisplay_Inline	= 0,
        CanvasSvgDisplay_None	= ( CanvasSvgDisplay_Inline + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility
    {
        CanvasSvgVisibility_Visible	= 0,
        CanvasSvgVisibility_Hidden	= ( CanvasSvgVisibility_Visible + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow
    {
        CanvasSvgOverflow_DoNotClipToViewport	= 0,
        CanvasSvgOverflow_ClipToViewport	= ( CanvasSvgOverflow_DoNotClipToViewport + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits
    {
        CanvasSvgUnits_UserSpaceOnUse	= 0,
        CanvasSvgUnits_ObjectBoundingBox	= ( CanvasSvgUnits_UserSpaceOnUse + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling
    {
        CanvasSvgAspectScaling_Meet	= 0,
        CanvasSvgAspectScaling_Slice	= ( CanvasSvgAspectScaling_Meet + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment
    {
        CanvasSvgAspectAlignment_None	= 0,
        CanvasSvgAspectAlignment_XMinYMin	= ( CanvasSvgAspectAlignment_None + 1 ) ,
        CanvasSvgAspectAlignment_XMidYMin	= ( CanvasSvgAspectAlignment_XMinYMin + 1 ) ,
        CanvasSvgAspectAlignment_XMaxYMin	= ( CanvasSvgAspectAlignment_XMidYMin + 1 ) ,
        CanvasSvgAspectAlignment_XMinYMid	= ( CanvasSvgAspectAlignment_XMaxYMin + 1 ) ,
        CanvasSvgAspectAlignment_XMidYMid	= ( CanvasSvgAspectAlignment_XMinYMid + 1 ) ,
        CanvasSvgAspectAlignment_XMaxYMid	= ( CanvasSvgAspectAlignment_XMidYMid + 1 ) ,
        CanvasSvgAspectAlignment_XMinYMax	= ( CanvasSvgAspectAlignment_XMaxYMid + 1 ) ,
        CanvasSvgAspectAlignment_XMidYMax	= ( CanvasSvgAspectAlignment_XMinYMax + 1 ) ,
        CanvasSvgAspectAlignment_XMaxYMax	= ( CanvasSvgAspectAlignment_XMidYMax + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits
    {
        CanvasSvgLengthUnits_Number	= 0,
        CanvasSvgLengthUnits_Percentage	= ( CanvasSvgLengthUnits_Number + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgElement[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0253 */
/* [local] */ 


#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasSvgDisplay
                        {
                            Inline	= 0,
                            None	= ( Inline + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasSvgDisplay CanvasSvgDisplay_Inline = CanvasSvgDisplay::Inline;
                    const MIDL_ENUM CanvasSvgDisplay CanvasSvgDisplay_None = CanvasSvgDisplay::None;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    typedef MIDL_ENUM CanvasSvgDisplay CanvasSvgDisplay;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasSvgVisibility
                        {
                            Visible	= 0,
                            Hidden	= ( Visible + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasSvgVisibility CanvasSvgVisibility_Visible = CanvasSvgVisibility::Visible;
                    const MIDL_ENUM CanvasSvgVisibility CanvasSvgVisibility_Hidden = CanvasSvgVisibility::Hidden;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    typedef MIDL_ENUM CanvasSvgVisibility CanvasSvgVisibility;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasSvgOverflow
                        {
                            DoNotClipToViewport	= 0,
                            ClipToViewport	= ( DoNotClipToViewport + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasSvgOverflow CanvasSvgOverflow_DoNotClipToViewport = CanvasSvgOverflow::DoNotClipToViewport;
                    const MIDL_ENUM CanvasSvgOverflow CanvasSvgOverflow_ClipToViewport = CanvasSvgOverflow::ClipToViewport;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    typedef MIDL_ENUM CanvasSvgOverflow CanvasSvgOverflow;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasSvgUnits
                        {
                            UserSpaceOnUse	= 0,
                            ObjectBoundingBox	= ( UserSpaceOnUse + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasSvgUnits CanvasSvgUnits_UserSpaceOnUse = CanvasSvgUnits::UserSpaceOnUse;
                    const MIDL_ENUM CanvasSvgUnits CanvasSvgUnits_ObjectBoundingBox = CanvasSvgUnits::ObjectBoundingBox;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    typedef MIDL_ENUM CanvasSvgUnits CanvasSvgUnits;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasSvgAspectScaling
                        {
                            Meet	= 0,
                            Slice	= ( Meet + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasSvgAspectScaling CanvasSvgAspectScaling_Meet = CanvasSvgAspectScaling::Meet;
                    const MIDL_ENUM CanvasSvgAspectScaling CanvasSvgAspectScaling_Slice = CanvasSvgAspectScaling::Slice;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    typedef MIDL_ENUM CanvasSvgAspectScaling CanvasSvgAspectScaling;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasSvgAspectAlignment
                        {
                            None	= 0,
                            XMinYMin	= ( None + 1 ) ,
                            XMidYMin	= ( XMinYMin + 1 ) ,
                            XMaxYMin	= ( XMidYMin + 1 ) ,
                            XMinYMid	= ( XMaxYMin + 1 ) ,
                            XMidYMid	= ( XMinYMid + 1 ) ,
                            XMaxYMid	= ( XMidYMid + 1 ) ,
                            XMinYMax	= ( XMaxYMid + 1 ) ,
                            XMidYMax	= ( XMinYMax + 1 ) ,
                            XMaxYMax	= ( XMidYMax + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasSvgAspectAlignment CanvasSvgAspectAlignment_None = CanvasSvgAspectAlignment::None;
                    const MIDL_ENUM CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMinYMin = CanvasSvgAspectAlignment::XMinYMin;
                    const MIDL_ENUM CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMidYMin = CanvasSvgAspectAlignment::XMidYMin;
                    const MIDL_ENUM CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMaxYMin = CanvasSvgAspectAlignment::XMaxYMin;
                    const MIDL_ENUM CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMinYMid = CanvasSvgAspectAlignment::XMinYMid;
                    const MIDL_ENUM CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMidYMid = CanvasSvgAspectAlignment::XMidYMid;
                    const MIDL_ENUM CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMaxYMid = CanvasSvgAspectAlignment::XMaxYMid;
                    const MIDL_ENUM CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMinYMax = CanvasSvgAspectAlignment::XMinYMax;
                    const MIDL_ENUM CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMidYMax = CanvasSvgAspectAlignment::XMidYMax;
                    const MIDL_ENUM CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMaxYMax = CanvasSvgAspectAlignment::XMaxYMax;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    typedef MIDL_ENUM CanvasSvgAspectAlignment CanvasSvgAspectAlignment;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasSvgLengthUnits
                        {
                            Number	= 0,
                            Percentage	= ( Number + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasSvgLengthUnits CanvasSvgLengthUnits_Number = CanvasSvgLengthUnits::Number;
                    const MIDL_ENUM CanvasSvgLengthUnits CanvasSvgLengthUnits_Percentage = CanvasSvgLengthUnits::Percentage;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    typedef MIDL_ENUM CanvasSvgLengthUnits CanvasSvgLengthUnits;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0253_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0253_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Svg {
                        
                        MIDL_INTERFACE("0775CB81-C555-45BF-9795-0FF59151C3BE")
                        ICanvasSvgElement : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ContainingDocument( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument **value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement **value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSvgElement = __uuidof(ICanvasSvgElement);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ContainingDocument )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElementVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_get_ContainingDocument(This,value)	\
    ( (This)->lpVtbl -> get_ContainingDocument(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_get_Parent(This,value)	\
    ( (This)->lpVtbl -> get_Parent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0254 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0254 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0254_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0254_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Svg {
                        
                        MIDL_INTERFACE("652786A8-F3AB-4083-991D-9748AA86BD6E")
                        ICanvasSvgAttribute : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Clone( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetElement( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement **value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSvgAttribute = __uuidof(ICanvasSvgAttribute);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute **result);
        
        HRESULT ( STDMETHODCALLTYPE *GetElement )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttributeVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_Clone(This,result)	\
    ( (This)->lpVtbl -> Clone(This,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_GetElement(This,value)	\
    ( (This)->lpVtbl -> GetElement(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0255 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0255 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0255_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0255_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Svg {
                        
                        MIDL_INTERFACE("D8B7CB94-8167-495D-9C71-5E97E5D08D2B")
                        ICanvasSvgNamedElement : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE AppendChild( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement *child) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateAndAppendNamedChildElement( 
                                /* [in] */ HSTRING childName,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement **childElement) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateAndAppendTextChildElement( 
                                /* [in] */ HSTRING textContent,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgTextElement **childElement) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FirstChild( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement **value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LastChild( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement **value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetPreviousSibling( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement *child,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement **value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetNextSibling( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement *child,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement **value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecifiedAttributes( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ HSTRING **valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Tag( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasChildren( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE InsertChildBefore( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement *child,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement *referenceChild) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE IsAttributeSpecified( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE IsAttributeSpecifiedWithInherhited( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ boolean inherited,
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE RemoveAttribute( 
                                /* [in] */ HSTRING attributeName) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE RemoveChild( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement *child) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ReplaceChild( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement *newChild,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement *oldChild) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetStringAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ HSTRING attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetStringAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ HSTRING *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute **attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetIdAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ HSTRING attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetIdAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ HSTRING *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFloatAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ float attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFloatAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ float *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetColorAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Windows::UI::Color attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetColorAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ ABI::Windows::UI::Color *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFilledRegionDeterminationAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFilledRegionDeterminationAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetDisplayAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDisplay attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetDisplayAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDisplay *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetOverflowAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgOverflow attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetOverflowAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgOverflow *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetCapStyleAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetCapStyleAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetLineJoinAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetLineJoinAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetVisibilityAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgVisibility attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetVisibilityAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgVisibility *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetTransformAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetTransformAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Matrix3x2 *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetUnitsAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgUnits attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetUnitsAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgUnits *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetEdgeBehaviorAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetEdgeBehaviorAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetRectangleAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Windows::Foundation::Rect attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetRectangleAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *attributeValue) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetLengthAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ float value,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits units) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetLengthAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits *units,
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetAspectRatioAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectAlignment alignment,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectScaling meetOrSlice) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetAspectRatioAttribute( 
                                /* [in] */ HSTRING attributeName,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectScaling *meetOrSlice,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectAlignment *alignment) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSvgNamedElement = __uuidof(ICanvasSvgNamedElement);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *AppendChild )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement *child);
        
        HRESULT ( STDMETHODCALLTYPE *CreateAndAppendNamedChildElement )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING childName,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement **childElement);
        
        HRESULT ( STDMETHODCALLTYPE *CreateAndAppendTextChildElement )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING textContent,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement **childElement);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstChild )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastChild )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement **value);
        
        HRESULT ( STDMETHODCALLTYPE *GetPreviousSibling )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement *child,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement **value);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextSibling )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement *child,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecifiedAttributes )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ HSTRING **valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tag )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasChildren )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *InsertChildBefore )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement *child,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement *referenceChild);
        
        HRESULT ( STDMETHODCALLTYPE *IsAttributeSpecified )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *IsAttributeSpecifiedWithInherhited )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ boolean inherited,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement *child);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceChild )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement *newChild,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement *oldChild);
        
        HRESULT ( STDMETHODCALLTYPE *SetStringAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ HSTRING attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetStringAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ HSTRING *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute **attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetIdAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ HSTRING attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetIdAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ HSTRING *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetFloatAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ float attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetFloatAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ float *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetColorAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CWindows_CUI_CColor attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetColorAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetFilledRegionDeterminationAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetFilledRegionDeterminationAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetDisplayAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetDisplayAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetOverflowAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetOverflowAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetCapStyleAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetCapStyleAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetLineJoinAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetLineJoinAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetVisibilityAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetVisibilityAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetTransformAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetTransformAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetUnitsAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetUnitsAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetEdgeBehaviorAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetEdgeBehaviorAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetRectangleAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetRectangleAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *attributeValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetLengthAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ float value,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits units);
        
        HRESULT ( STDMETHODCALLTYPE *GetLengthAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits *units,
            /* [out][retval] */ float *value);
        
        HRESULT ( STDMETHODCALLTYPE *SetAspectRatioAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment alignment,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling meetOrSlice);
        
        HRESULT ( STDMETHODCALLTYPE *GetAspectRatioAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
            /* [in] */ HSTRING attributeName,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling *meetOrSlice,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment *alignment);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElementVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_AppendChild(This,child)	\
    ( (This)->lpVtbl -> AppendChild(This,child) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_CreateAndAppendNamedChildElement(This,childName,childElement)	\
    ( (This)->lpVtbl -> CreateAndAppendNamedChildElement(This,childName,childElement) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_CreateAndAppendTextChildElement(This,textContent,childElement)	\
    ( (This)->lpVtbl -> CreateAndAppendTextChildElement(This,textContent,childElement) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_get_FirstChild(This,value)	\
    ( (This)->lpVtbl -> get_FirstChild(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_get_LastChild(This,value)	\
    ( (This)->lpVtbl -> get_LastChild(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetPreviousSibling(This,child,value)	\
    ( (This)->lpVtbl -> GetPreviousSibling(This,child,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetNextSibling(This,child,value)	\
    ( (This)->lpVtbl -> GetNextSibling(This,child,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_get_SpecifiedAttributes(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_SpecifiedAttributes(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_get_Tag(This,value)	\
    ( (This)->lpVtbl -> get_Tag(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_get_HasChildren(This,value)	\
    ( (This)->lpVtbl -> get_HasChildren(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_InsertChildBefore(This,child,referenceChild)	\
    ( (This)->lpVtbl -> InsertChildBefore(This,child,referenceChild) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_IsAttributeSpecified(This,attributeName,value)	\
    ( (This)->lpVtbl -> IsAttributeSpecified(This,attributeName,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_IsAttributeSpecifiedWithInherhited(This,attributeName,inherited,value)	\
    ( (This)->lpVtbl -> IsAttributeSpecifiedWithInherhited(This,attributeName,inherited,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_RemoveAttribute(This,attributeName)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,attributeName) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_RemoveChild(This,child)	\
    ( (This)->lpVtbl -> RemoveChild(This,child) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_ReplaceChild(This,newChild,oldChild)	\
    ( (This)->lpVtbl -> ReplaceChild(This,newChild,oldChild) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetStringAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetStringAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetStringAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetStringAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetIdAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetIdAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetIdAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetIdAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetFloatAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetFloatAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetFloatAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetFloatAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetColorAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetColorAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetColorAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetColorAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetFilledRegionDeterminationAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetFilledRegionDeterminationAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetFilledRegionDeterminationAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetFilledRegionDeterminationAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetDisplayAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetDisplayAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetDisplayAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetDisplayAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetOverflowAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetOverflowAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetOverflowAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetOverflowAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetCapStyleAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetCapStyleAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetCapStyleAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetCapStyleAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetLineJoinAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetLineJoinAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetLineJoinAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetLineJoinAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetVisibilityAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetVisibilityAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetVisibilityAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetVisibilityAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetTransformAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetTransformAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetTransformAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetTransformAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetUnitsAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetUnitsAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetUnitsAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetUnitsAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetEdgeBehaviorAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetEdgeBehaviorAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetEdgeBehaviorAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetEdgeBehaviorAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetRectangleAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> SetRectangleAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetRectangleAttribute(This,attributeName,attributeValue)	\
    ( (This)->lpVtbl -> GetRectangleAttribute(This,attributeName,attributeValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetLengthAttribute(This,attributeName,value,units)	\
    ( (This)->lpVtbl -> SetLengthAttribute(This,attributeName,value,units) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetLengthAttribute(This,attributeName,units,value)	\
    ( (This)->lpVtbl -> GetLengthAttribute(This,attributeName,units,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetAspectRatioAttribute(This,attributeName,alignment,meetOrSlice)	\
    ( (This)->lpVtbl -> SetAspectRatioAttribute(This,attributeName,alignment,meetOrSlice) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetAspectRatioAttribute(This,attributeName,meetOrSlice,alignment)	\
    ( (This)->lpVtbl -> GetAspectRatioAttribute(This,attributeName,meetOrSlice,alignment) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0256 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgTextElement[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0256 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0256_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0256_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgTextElement */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Svg {
                        
                        MIDL_INTERFACE("652786A8-F3AB-4083-991D-9748AA86BD6D")
                        ICanvasSvgTextElement : public IInspectable
                        {
                        public:
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
                                /* [in] */ HSTRING value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSvgTextElement = __uuidof(ICanvasSvgTextElement);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This,
            /* [in] */ HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This,
            /* [out][retval] */ HSTRING *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElementVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_put_Text(This,value)	\
    ( (This)->lpVtbl -> put_Text(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_get_Text(This,value)	\
    ( (This)->lpVtbl -> get_Text(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0257 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgTextElement_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgTextElement_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgTextElement[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType
    {
        CanvasSvgPaintType_None	= 0,
        CanvasSvgPaintType_Color	= ( CanvasSvgPaintType_None + 1 ) ,
        CanvasSvgPaintType_CurrentColor	= ( CanvasSvgPaintType_Color + 1 ) ,
        CanvasSvgPaintType_Uri	= ( CanvasSvgPaintType_CurrentColor + 1 ) ,
        CanvasSvgPaintType_UriThenNone	= ( CanvasSvgPaintType_Uri + 1 ) ,
        CanvasSvgPaintType_UriThenColor	= ( CanvasSvgPaintType_UriThenNone + 1 ) ,
        CanvasSvgPaintType_UriThenCurrentColor	= ( CanvasSvgPaintType_UriThenColor + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Svg {
class CanvasSvgPaintAttribute;
} /*Svg*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPaintAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0257 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasSvgPaintType
                        {
                            None	= 0,
                            Color	= ( None + 1 ) ,
                            CurrentColor	= ( Color + 1 ) ,
                            Uri	= ( CurrentColor + 1 ) ,
                            UriThenNone	= ( Uri + 1 ) ,
                            UriThenColor	= ( UriThenNone + 1 ) ,
                            UriThenCurrentColor	= ( UriThenColor + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasSvgPaintType CanvasSvgPaintType_None = CanvasSvgPaintType::None;
                    const MIDL_ENUM CanvasSvgPaintType CanvasSvgPaintType_Color = CanvasSvgPaintType::Color;
                    const MIDL_ENUM CanvasSvgPaintType CanvasSvgPaintType_CurrentColor = CanvasSvgPaintType::CurrentColor;
                    const MIDL_ENUM CanvasSvgPaintType CanvasSvgPaintType_Uri = CanvasSvgPaintType::Uri;
                    const MIDL_ENUM CanvasSvgPaintType CanvasSvgPaintType_UriThenNone = CanvasSvgPaintType::UriThenNone;
                    const MIDL_ENUM CanvasSvgPaintType CanvasSvgPaintType_UriThenColor = CanvasSvgPaintType::UriThenColor;
                    const MIDL_ENUM CanvasSvgPaintType CanvasSvgPaintType_UriThenCurrentColor = CanvasSvgPaintType::UriThenCurrentColor;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    typedef MIDL_ENUM CanvasSvgPaintType CanvasSvgPaintType;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0257_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0257_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Svg {
                        
                        MIDL_INTERFACE("653786A8-F3AB-4083-991D-9748AA86BD6E")
                        ICanvasSvgPaintAttribute : public IInspectable
                        {
                        public:
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PaintType( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintType value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PaintType( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintType *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Id( 
                                /* [in] */ HSTRING value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSvgPaintAttribute = __uuidof(ICanvasSvgPaintAttribute);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaintType )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaintType )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
            /* [in] */ HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
            /* [out][retval] */ HSTRING *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttributeVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_put_PaintType(This,value)	\
    ( (This)->lpVtbl -> put_PaintType(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_get_PaintType(This,value)	\
    ( (This)->lpVtbl -> get_PaintType(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_put_Color(This,value)	\
    ( (This)->lpVtbl -> put_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_get_Color(This,value)	\
    ( (This)->lpVtbl -> get_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_put_Id(This,value)	\
    ( (This)->lpVtbl -> put_Id(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_get_Id(This,value)	\
    ( (This)->lpVtbl -> get_Id(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0258 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPaintAttribute_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPaintAttribute_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgPaintAttribute[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand
    {
        CanvasSvgPathCommand_ClosePath	= 0,
        CanvasSvgPathCommand_MoveAbsolute	= ( CanvasSvgPathCommand_ClosePath + 1 ) ,
        CanvasSvgPathCommand_MoveRelative	= ( CanvasSvgPathCommand_MoveAbsolute + 1 ) ,
        CanvasSvgPathCommand_LineAbsolute	= ( CanvasSvgPathCommand_MoveRelative + 1 ) ,
        CanvasSvgPathCommand_LineRelative	= ( CanvasSvgPathCommand_LineAbsolute + 1 ) ,
        CanvasSvgPathCommand_CubicAbsolute	= ( CanvasSvgPathCommand_LineRelative + 1 ) ,
        CanvasSvgPathCommand_CubicRelative	= ( CanvasSvgPathCommand_CubicAbsolute + 1 ) ,
        CanvasSvgPathCommand_QuadraticAbsolute	= ( CanvasSvgPathCommand_CubicRelative + 1 ) ,
        CanvasSvgPathCommand_QuadraticRelative	= ( CanvasSvgPathCommand_QuadraticAbsolute + 1 ) ,
        CanvasSvgPathCommand_ArcAbsolute	= ( CanvasSvgPathCommand_QuadraticRelative + 1 ) ,
        CanvasSvgPathCommand_ArcRelative	= ( CanvasSvgPathCommand_ArcAbsolute + 1 ) ,
        CanvasSvgPathCommand_HorizontalAbsolute	= ( CanvasSvgPathCommand_ArcRelative + 1 ) ,
        CanvasSvgPathCommand_HorizontalRelative	= ( CanvasSvgPathCommand_HorizontalAbsolute + 1 ) ,
        CanvasSvgPathCommand_VerticalAbsolute	= ( CanvasSvgPathCommand_HorizontalRelative + 1 ) ,
        CanvasSvgPathCommand_VerticalRelative	= ( CanvasSvgPathCommand_VerticalAbsolute + 1 ) ,
        CanvasSvgPathCommand_CubicSmoothAbsolute	= ( CanvasSvgPathCommand_VerticalRelative + 1 ) ,
        CanvasSvgPathCommand_CubicSmoothRelative	= ( CanvasSvgPathCommand_CubicSmoothAbsolute + 1 ) ,
        CanvasSvgPathCommand_QuadraticSmoothAbsolute	= ( CanvasSvgPathCommand_CubicSmoothRelative + 1 ) ,
        CanvasSvgPathCommand_QuadraticSmoothRelative	= ( CanvasSvgPathCommand_QuadraticSmoothAbsolute + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Svg {
class CanvasSvgPathAttribute;
} /*Svg*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0258 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasSvgPathCommand
                        {
                            ClosePath	= 0,
                            MoveAbsolute	= ( ClosePath + 1 ) ,
                            MoveRelative	= ( MoveAbsolute + 1 ) ,
                            LineAbsolute	= ( MoveRelative + 1 ) ,
                            LineRelative	= ( LineAbsolute + 1 ) ,
                            CubicAbsolute	= ( LineRelative + 1 ) ,
                            CubicRelative	= ( CubicAbsolute + 1 ) ,
                            QuadraticAbsolute	= ( CubicRelative + 1 ) ,
                            QuadraticRelative	= ( QuadraticAbsolute + 1 ) ,
                            ArcAbsolute	= ( QuadraticRelative + 1 ) ,
                            ArcRelative	= ( ArcAbsolute + 1 ) ,
                            HorizontalAbsolute	= ( ArcRelative + 1 ) ,
                            HorizontalRelative	= ( HorizontalAbsolute + 1 ) ,
                            VerticalAbsolute	= ( HorizontalRelative + 1 ) ,
                            VerticalRelative	= ( VerticalAbsolute + 1 ) ,
                            CubicSmoothAbsolute	= ( VerticalRelative + 1 ) ,
                            CubicSmoothRelative	= ( CubicSmoothAbsolute + 1 ) ,
                            QuadraticSmoothAbsolute	= ( CubicSmoothRelative + 1 ) ,
                            QuadraticSmoothRelative	= ( QuadraticSmoothAbsolute + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_ClosePath = CanvasSvgPathCommand::ClosePath;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_MoveAbsolute = CanvasSvgPathCommand::MoveAbsolute;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_MoveRelative = CanvasSvgPathCommand::MoveRelative;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_LineAbsolute = CanvasSvgPathCommand::LineAbsolute;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_LineRelative = CanvasSvgPathCommand::LineRelative;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_CubicAbsolute = CanvasSvgPathCommand::CubicAbsolute;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_CubicRelative = CanvasSvgPathCommand::CubicRelative;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_QuadraticAbsolute = CanvasSvgPathCommand::QuadraticAbsolute;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_QuadraticRelative = CanvasSvgPathCommand::QuadraticRelative;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_ArcAbsolute = CanvasSvgPathCommand::ArcAbsolute;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_ArcRelative = CanvasSvgPathCommand::ArcRelative;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_HorizontalAbsolute = CanvasSvgPathCommand::HorizontalAbsolute;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_HorizontalRelative = CanvasSvgPathCommand::HorizontalRelative;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_VerticalAbsolute = CanvasSvgPathCommand::VerticalAbsolute;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_VerticalRelative = CanvasSvgPathCommand::VerticalRelative;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_CubicSmoothAbsolute = CanvasSvgPathCommand::CubicSmoothAbsolute;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_CubicSmoothRelative = CanvasSvgPathCommand::CubicSmoothRelative;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_QuadraticSmoothAbsolute = CanvasSvgPathCommand::QuadraticSmoothAbsolute;
                    const MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand_QuadraticSmoothRelative = CanvasSvgPathCommand::QuadraticSmoothRelative;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    
                    typedef MIDL_ENUM CanvasSvgPathCommand CanvasSvgPathCommand;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0258_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0258_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Svg {
                        
                        MIDL_INTERFACE("652786A8-F3AB-4083-991D-9748AB86BD6E")
                        ICanvasSvgPathAttribute : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreatePathGeometry( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **outputGeometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreatePathGeometryWithFill( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination fill,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **outputGeometry) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Commands( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetCommands( 
                                /* [in] */ INT32 startIndex,
                                /* [in] */ INT32 elementCount,
                                /* [out] */ UINT32 *outputValueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand **outputValueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SegmentData( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetSegmentData( 
                                /* [in] */ INT32 startIndex,
                                /* [in] */ INT32 elementCount,
                                /* [out] */ UINT32 *outputValueCount,
                                /* [out][size_is][size_is][retval] */ float **outputValueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE RemoveCommandsAtEnd( 
                                /* [in] */ INT32 commandsCount) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE RemoveSegmentDataAtEnd( 
                                /* [in] */ INT32 commandsCount) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetCommands( 
                                /* [in] */ INT32 startIndex,
                                /* [in] */ UINT32 commandCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand *commands) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetSegmentData( 
                                /* [in] */ INT32 startIndex,
                                /* [in] */ UINT32 segmentDataCount,
                                /* [in][size_is] */ float *segmentData) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSvgPathAttribute = __uuidof(ICanvasSvgPathAttribute);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePathGeometry )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **outputGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePathGeometryWithFill )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination fill,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **outputGeometry);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Commands )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetCommands )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [in] */ INT32 startIndex,
            /* [in] */ INT32 elementCount,
            /* [out] */ UINT32 *outputValueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand **outputValueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SegmentData )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetSegmentData )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [in] */ INT32 startIndex,
            /* [in] */ INT32 elementCount,
            /* [out] */ UINT32 *outputValueCount,
            /* [out][size_is][size_is][retval] */ float **outputValueElements);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveCommandsAtEnd )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [in] */ INT32 commandsCount);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveSegmentDataAtEnd )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [in] */ INT32 commandsCount);
        
        HRESULT ( STDMETHODCALLTYPE *SetCommands )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [in] */ INT32 startIndex,
            /* [in] */ UINT32 commandCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand *commands);
        
        HRESULT ( STDMETHODCALLTYPE *SetSegmentData )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
            /* [in] */ INT32 startIndex,
            /* [in] */ UINT32 segmentDataCount,
            /* [in][size_is] */ float *segmentData);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttributeVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_CreatePathGeometry(This,outputGeometry)	\
    ( (This)->lpVtbl -> CreatePathGeometry(This,outputGeometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_CreatePathGeometryWithFill(This,fill,outputGeometry)	\
    ( (This)->lpVtbl -> CreatePathGeometryWithFill(This,fill,outputGeometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_get_Commands(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_Commands(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_GetCommands(This,startIndex,elementCount,outputValueCount,outputValueElements)	\
    ( (This)->lpVtbl -> GetCommands(This,startIndex,elementCount,outputValueCount,outputValueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_get_SegmentData(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_SegmentData(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_GetSegmentData(This,startIndex,elementCount,outputValueCount,outputValueElements)	\
    ( (This)->lpVtbl -> GetSegmentData(This,startIndex,elementCount,outputValueCount,outputValueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_RemoveCommandsAtEnd(This,commandsCount)	\
    ( (This)->lpVtbl -> RemoveCommandsAtEnd(This,commandsCount) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_RemoveSegmentDataAtEnd(This,commandsCount)	\
    ( (This)->lpVtbl -> RemoveSegmentDataAtEnd(This,commandsCount) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_SetCommands(This,startIndex,commandCount,commands)	\
    ( (This)->lpVtbl -> SetCommands(This,startIndex,commandCount,commands) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_SetSegmentData(This,startIndex,segmentDataCount,segmentData)	\
    ( (This)->lpVtbl -> SetSegmentData(This,startIndex,segmentDataCount,segmentData) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0259 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPathAttribute_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPathAttribute_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgPathAttribute[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Svg {
class CanvasSvgPointsAttribute;
} /*Svg*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPointsAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0259 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0259_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0259_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Svg {
                        
                        MIDL_INTERFACE("652786A8-F3AB-4083-991D-9748AA86BD6F")
                        ICanvasSvgPointsAttribute : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Points( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Windows::Foundation::Numerics::Vector2 **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetPoints( 
                                /* [in] */ INT32 startIndex,
                                /* [in] */ INT32 elementCount,
                                /* [out] */ UINT32 *outputValueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Windows::Foundation::Numerics::Vector2 **outputValueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE RemovePointsAtEnd( 
                                /* [in] */ INT32 pointCount) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetPoints( 
                                /* [in] */ INT32 startIndex,
                                /* [in] */ UINT32 pointCount,
                                /* [in][size_is] */ ABI::Windows::Foundation::Numerics::Vector2 *points) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSvgPointsAttribute = __uuidof(ICanvasSvgPointsAttribute);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Points )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetPoints )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
            /* [in] */ INT32 startIndex,
            /* [in] */ INT32 elementCount,
            /* [out] */ UINT32 *outputValueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 **outputValueElements);
        
        HRESULT ( STDMETHODCALLTYPE *RemovePointsAtEnd )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
            /* [in] */ INT32 pointCount);
        
        HRESULT ( STDMETHODCALLTYPE *SetPoints )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
            /* [in] */ INT32 startIndex,
            /* [in] */ UINT32 pointCount,
            /* [in][size_is] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *points);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttributeVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_get_Points(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_Points(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_GetPoints(This,startIndex,elementCount,outputValueCount,outputValueElements)	\
    ( (This)->lpVtbl -> GetPoints(This,startIndex,elementCount,outputValueCount,outputValueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_RemovePointsAtEnd(This,pointCount)	\
    ( (This)->lpVtbl -> RemovePointsAtEnd(This,pointCount) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_SetPoints(This,startIndex,pointCount,points)	\
    ( (This)->lpVtbl -> SetPoints(This,startIndex,pointCount,points) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0260 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPointsAttribute_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPointsAttribute_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgPointsAttribute[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Svg {
class CanvasSvgStrokeDashArrayAttribute;
} /*Svg*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgStrokeDashArrayAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0260 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0260_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0260_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Svg {
                        
                        MIDL_INTERFACE("652786A8-F3AB-4083-991D-9748AA86BD70")
                        ICanvasSvgStrokeDashArrayAttribute : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE GetDashes( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetDashesWithUnits( 
                                /* [in] */ INT32 startIndex,
                                /* [in] */ INT32 elementCount,
                                /* [out] */ UINT32 *outputUnitsCount,
                                /* [out][size_is][size_is] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits **outputUnitsElements,
                                /* [out] */ UINT32 *outputValueCount,
                                /* [out][size_is][size_is][retval] */ float **outputValueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE RemoveDashesAtEnd( 
                                /* [in] */ INT32 dashCount) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetDashes( 
                                /* [in] */ INT32 startIndex,
                                /* [in] */ UINT32 dashCount,
                                /* [in][size_is] */ float *dashes) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetDashesWithUnit( 
                                /* [in] */ INT32 startIndex,
                                /* [in] */ UINT32 dashCount,
                                /* [in][size_is] */ float *dashes,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits units) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetDashesWithUnits( 
                                /* [in] */ INT32 startIndex,
                                /* [in] */ UINT32 dashValueCount,
                                /* [in][size_is] */ float *dashValues,
                                /* [in] */ UINT32 unitValueCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits *unitValues) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSvgStrokeDashArrayAttribute = __uuidof(ICanvasSvgStrokeDashArrayAttribute);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDashes )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetDashesWithUnits )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
            /* [in] */ INT32 startIndex,
            /* [in] */ INT32 elementCount,
            /* [out] */ UINT32 *outputUnitsCount,
            /* [out][size_is][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits **outputUnitsElements,
            /* [out] */ UINT32 *outputValueCount,
            /* [out][size_is][size_is][retval] */ float **outputValueElements);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveDashesAtEnd )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
            /* [in] */ INT32 dashCount);
        
        HRESULT ( STDMETHODCALLTYPE *SetDashes )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
            /* [in] */ INT32 startIndex,
            /* [in] */ UINT32 dashCount,
            /* [in][size_is] */ float *dashes);
        
        HRESULT ( STDMETHODCALLTYPE *SetDashesWithUnit )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
            /* [in] */ INT32 startIndex,
            /* [in] */ UINT32 dashCount,
            /* [in][size_is] */ float *dashes,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits units);
        
        HRESULT ( STDMETHODCALLTYPE *SetDashesWithUnits )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
            /* [in] */ INT32 startIndex,
            /* [in] */ UINT32 dashValueCount,
            /* [in][size_is] */ float *dashValues,
            /* [in] */ UINT32 unitValueCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits *unitValues);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttributeVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_GetDashes(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetDashes(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_GetDashesWithUnits(This,startIndex,elementCount,outputUnitsCount,outputUnitsElements,outputValueCount,outputValueElements)	\
    ( (This)->lpVtbl -> GetDashesWithUnits(This,startIndex,elementCount,outputUnitsCount,outputUnitsElements,outputValueCount,outputValueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_RemoveDashesAtEnd(This,dashCount)	\
    ( (This)->lpVtbl -> RemoveDashesAtEnd(This,dashCount) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_SetDashes(This,startIndex,dashCount,dashes)	\
    ( (This)->lpVtbl -> SetDashes(This,startIndex,dashCount,dashes) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_SetDashesWithUnit(This,startIndex,dashCount,dashes,units)	\
    ( (This)->lpVtbl -> SetDashesWithUnit(This,startIndex,dashCount,dashes,units) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_SetDashesWithUnits(This,startIndex,dashValueCount,dashValues,unitValueCount,unitValues)	\
    ( (This)->lpVtbl -> SetDashesWithUnits(This,startIndex,dashValueCount,dashValues,unitValueCount,unitValues) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0261 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgStrokeDashArrayAttribute_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgStrokeDashArrayAttribute_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgStrokeDashArrayAttribute[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0261 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0261_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0261_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5639 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5639 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5639_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5639_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0262 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)



/* interface __MIDL_itf_Canvas2Eabi_0000_0262 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0262_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0262_v0_0_s_ifspec;

#ifndef ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_INTERFACE_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_INTERFACE_DEFINED__

/* interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("76b5a817-1bef-5f3e-91bb-5697a3ba6e51")
    __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement *asyncInfo,
            /* [in] */ AsyncStatus status) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,
            /* [in] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement *asyncInfo,
            /* [in] */ AsyncStatus status);
        
        END_INTERFACE
    } __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl;

    interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement
    {
        CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0263 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement */


/* interface __MIDL_itf_Canvas2Eabi_0000_0263 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0263_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0263_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5640 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5640 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5640_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5640_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0264 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0264 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0264_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0264_v0_0_s_ifspec;

#ifndef ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_INTERFACE_DEFINED__
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_INTERFACE_DEFINED__

/* interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("68a752f6-827a-5816-8e65-0b3342673075")
    __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement : public IInspectable
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Completed( 
            /* [in] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement *handler) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Completed( 
            /* [retval][out] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement **handler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResults( 
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement **results) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,
            /* [in] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement *handler);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,
            /* [retval][out] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement **handler);
        
        HRESULT ( STDMETHODCALLTYPE *GetResults )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement **results);
        
        END_INTERFACE
    } __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl;

    interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement
    {
        CONST_VTBL struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0265 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0265 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0265_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0265_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Svg {
                        
                        MIDL_INTERFACE("A0E34929-3551-44FE-A670-D9B3FD800516")
                        ICanvasSvgDocument : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetXml( 
                                /* [out][retval] */ HSTRING *xmlString) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SaveAsync( 
                                /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                                /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Root( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Root( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement **value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE FindElementById( 
                                /* [in] */ HSTRING id,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement **element) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreatePaintAttributeWithDefaults( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreatePaintAttribute( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintType paintType,
                                /* [in] */ ABI::Windows::UI::Color color,
                                /* [in] */ HSTRING id,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreatePathAttributeWithDefaults( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreatePathAttribute( 
                                /* [in] */ UINT32 segmentDataCount,
                                /* [in][size_is] */ float *segmentData,
                                /* [in] */ UINT32 commandCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand *commands,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreatePointsAttributeWithDefaults( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreatePointsAttribute( 
                                /* [in] */ UINT32 pointCount,
                                /* [in][size_is] */ ABI::Windows::Foundation::Numerics::Vector2 *points,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateStrokeDashArrayAttributeWithDefaults( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateStrokeDashArrayAttribute( 
                                /* [in] */ UINT32 dashValueCount,
                                /* [in][size_is] */ float *dashValues,
                                /* [in] */ UINT32 unitValueCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits *unitValues,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE LoadElementFromXml( 
                                /* [in] */ HSTRING xmlString,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement **svgElement) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE LoadElementAsync( 
                                /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                                /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement **svgElement) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSvgDocument = __uuidof(ICanvasSvgDocument);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        HRESULT ( STDMETHODCALLTYPE *GetXml )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [out][retval] */ HSTRING *xmlString);
        
        HRESULT ( STDMETHODCALLTYPE *SaveAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Root )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Root )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement **value);
        
        HRESULT ( STDMETHODCALLTYPE *FindElementById )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [in] */ HSTRING id,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement **element);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePaintAttributeWithDefaults )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute **result);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePaintAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType paintType,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ HSTRING id,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute **result);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePathAttributeWithDefaults )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute **result);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePathAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [in] */ UINT32 segmentDataCount,
            /* [in][size_is] */ float *segmentData,
            /* [in] */ UINT32 commandCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand *commands,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute **result);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePointsAttributeWithDefaults )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute **result);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePointsAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [in] */ UINT32 pointCount,
            /* [in][size_is] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *points,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute **result);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStrokeDashArrayAttributeWithDefaults )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute **result);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStrokeDashArrayAttribute )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [in] */ UINT32 dashValueCount,
            /* [in][size_is] */ float *dashValues,
            /* [in] */ UINT32 unitValueCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits *unitValues,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute **result);
        
        HRESULT ( STDMETHODCALLTYPE *LoadElementFromXml )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [in] */ HSTRING xmlString,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement **svgElement);
        
        HRESULT ( STDMETHODCALLTYPE *LoadElementAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement **svgElement);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_GetXml(This,xmlString)	\
    ( (This)->lpVtbl -> GetXml(This,xmlString) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_SaveAsync(This,stream,asyncAction)	\
    ( (This)->lpVtbl -> SaveAsync(This,stream,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_put_Root(This,value)	\
    ( (This)->lpVtbl -> put_Root(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_get_Root(This,value)	\
    ( (This)->lpVtbl -> get_Root(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FindElementById(This,id,element)	\
    ( (This)->lpVtbl -> FindElementById(This,id,element) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreatePaintAttributeWithDefaults(This,result)	\
    ( (This)->lpVtbl -> CreatePaintAttributeWithDefaults(This,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreatePaintAttribute(This,paintType,color,id,result)	\
    ( (This)->lpVtbl -> CreatePaintAttribute(This,paintType,color,id,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreatePathAttributeWithDefaults(This,result)	\
    ( (This)->lpVtbl -> CreatePathAttributeWithDefaults(This,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreatePathAttribute(This,segmentDataCount,segmentData,commandCount,commands,result)	\
    ( (This)->lpVtbl -> CreatePathAttribute(This,segmentDataCount,segmentData,commandCount,commands,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreatePointsAttributeWithDefaults(This,result)	\
    ( (This)->lpVtbl -> CreatePointsAttributeWithDefaults(This,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreatePointsAttribute(This,pointCount,points,result)	\
    ( (This)->lpVtbl -> CreatePointsAttribute(This,pointCount,points,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreateStrokeDashArrayAttributeWithDefaults(This,result)	\
    ( (This)->lpVtbl -> CreateStrokeDashArrayAttributeWithDefaults(This,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreateStrokeDashArrayAttribute(This,dashValueCount,dashValues,unitValueCount,unitValues,result)	\
    ( (This)->lpVtbl -> CreateStrokeDashArrayAttribute(This,dashValueCount,dashValues,unitValueCount,unitValues,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_LoadElementFromXml(This,xmlString,svgElement)	\
    ( (This)->lpVtbl -> LoadElementFromXml(This,xmlString,svgElement) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_LoadElementAsync(This,stream,svgElement)	\
    ( (This)->lpVtbl -> LoadElementAsync(This,stream,svgElement) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5641 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5641 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5641_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5641_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0267 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)



/* interface __MIDL_itf_Canvas2Eabi_0000_0267 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0267_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0267_v0_0_s_ifspec;

#ifndef ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_INTERFACE_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_INTERFACE_DEFINED__

/* interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("45ebe17c-efb1-5ba2-9280-84134cea38f9")
    __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument *asyncInfo,
            /* [in] */ AsyncStatus status) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,
            /* [in] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument *asyncInfo,
            /* [in] */ AsyncStatus status);
        
        END_INTERFACE
    } __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl;

    interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument
    {
        CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0268 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument */


/* interface __MIDL_itf_Canvas2Eabi_0000_0268 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0268_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0268_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5642 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5642 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5642_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5642_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0269 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0269 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0269_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0269_v0_0_s_ifspec;

#ifndef ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_INTERFACE_DEFINED__
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_INTERFACE_DEFINED__

/* interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("63adbeeb-f748-5aec-a9d3-5fd731b2bc67")
    __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument : public IInspectable
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Completed( 
            /* [in] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument *handler) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Completed( 
            /* [retval][out] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument **handler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResults( 
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument **results) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,
            /* [in] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument *handler);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,
            /* [retval][out] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument **handler);
        
        HRESULT ( STDMETHODCALLTYPE *GetResults )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument **results);
        
        END_INTERFACE
    } __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl;

    interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument
    {
        CONST_VTBL struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0270 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentStatics[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0270 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0270_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0270_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Svg {
                        
                        MIDL_INTERFACE("7740E748-CB9A-453F-A678-8B3B3A7254D3")
                        ICanvasSvgDocumentStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE LoadFromXml( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ HSTRING xmlString,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument **svgDocument) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE LoadAsync( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                                /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument **svgDocument) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE IsSupported( 
                                ABI::Microsoft::Graphics::Canvas::ICanvasDevice *device,
                                /* [out][retval] */ boolean *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSvgDocumentStatics = __uuidof(ICanvasSvgDocumentStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *LoadFromXml )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ HSTRING xmlString,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument **svgDocument);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument **svgDocument);
        
        HRESULT ( STDMETHODCALLTYPE *IsSupported )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *device,
            /* [out][retval] */ boolean *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_LoadFromXml(This,resourceCreator,xmlString,svgDocument)	\
    ( (This)->lpVtbl -> LoadFromXml(This,resourceCreator,xmlString,svgDocument) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_LoadAsync(This,resourceCreator,stream,svgDocument)	\
    ( (This)->lpVtbl -> LoadAsync(This,resourceCreator,stream,svgDocument) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_IsSupported(This,device,value)	\
    ( (This)->lpVtbl -> IsSupported(This,device,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0271 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentFactory[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0271 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0271_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0271_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Svg {
                        
                        MIDL_INTERFACE("BAB0F16D-4050-4EF6-8022-8A07E9E74A9D")
                        ICanvasSvgDocumentFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateEmpty( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument **canvasSvgDocument) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSvgDocumentFactory = __uuidof(ICanvasSvgDocumentFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateEmpty )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument **canvasSvgDocument);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_CreateEmpty(This,resourceCreator,canvasSvgDocument)	\
    ( (This)->lpVtbl -> CreateEmpty(This,resourceCreator,canvasSvgDocument) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0272 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDrawingSession[] = L"Microsoft.Graphics.Canvas.ICanvasDrawingSession";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0272 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0272_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0272_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("F60AFD09-E623-4BE0-B750-578AA920B1DB")
                    ICanvasDrawingSession : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Clear( 
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ClearHdr( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE Flush( void) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOrigin( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffset( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoords( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ float x,
                            /* [in] */ float y) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageToRect( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Rect destinationRectangle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRect( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRect( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRect( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Rect destinationRectangle,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRectAndOpacity( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRectAndOpacity( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRectAndOpacity( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Rect destinationRectangle,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRectAndOpacityAndInterpolation( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Rect destinationRectangle,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasComposite composite) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasComposite composite) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Rect destinationRectangle,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasComposite composite) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix4x4 perspective) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix4x4 perspective) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Rect destinationRectangle,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix4x4 perspective) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point0,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point1,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithBrush( 
                            /* [in] */ float x0,
                            /* [in] */ float y0,
                            /* [in] */ float x1,
                            /* [in] */ float y1,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point0,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point1,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithColor( 
                            /* [in] */ float x0,
                            /* [in] */ float y0,
                            /* [in] */ float x1,
                            /* [in] */ float y1,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point0,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point1,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithBrushAndStrokeWidth( 
                            /* [in] */ float x0,
                            /* [in] */ float y0,
                            /* [in] */ float x1,
                            /* [in] */ float y1,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point0,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point1,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithColorAndStrokeWidth( 
                            /* [in] */ float x0,
                            /* [in] */ float y0,
                            /* [in] */ float x1,
                            /* [in] */ float y1,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point0,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point1,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x0,
                            /* [in] */ float y0,
                            /* [in] */ float x1,
                            /* [in] */ float y1,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point0,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point1,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x0,
                            /* [in] */ float y0,
                            /* [in] */ float x1,
                            /* [in] */ float y1,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithBrushAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithColorAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRectangleWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRectangleAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRectangleWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRectangleAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRectangleWithBrushAndOpacityBrush( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRectangleAtCoordsWithBrushAndOpacityBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRoundedRectangleWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRoundedRectangleAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRoundedRectangleWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRoundedRectangleAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithBrushAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithColorAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillEllipseWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillEllipseAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillEllipseWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillEllipseAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithBrushAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithColorAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillCircleWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillCircleAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillCircleWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillCircleAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointWithColor( 
                            /* [in] */ HSTRING text,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointCoordsWithColor( 
                            /* [in] */ HSTRING text,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointWithBrushAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtRectWithBrushAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ ABI::Windows::Foundation::Rect rectangle,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointCoordsWithBrushAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtRectCoordsWithBrushAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointWithColorAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtRectWithColorAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ ABI::Windows::Foundation::Rect rectangle,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointCoordsWithColorAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtRectCoordsWithColorAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryWithBrushAndOpacityBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryAtCoordsWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryAtCoordsWithBrushAndOpacityBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryAtCoordsWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryAtOriginWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryAtOriginWithBrushAndOpacityBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryAtOriginWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry *geometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry *geometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryAtCoordsWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryAtCoordsWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryAtOriginWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryAtOriginWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry *geometry,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextLayoutWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout *textLayout,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextLayoutAtCoordsWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout *textLayout,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextLayoutWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout *textLayout,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextLayoutAtCoordsWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout *textLayout,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawInk( 
                            /* [in] */ __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke *inkStrokes) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawInkWithHighContrast( 
                            /* [in] */ __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke *inkStrokes,
                            /* [in] */ boolean highContrast) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGradientMeshAtOrigin( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMesh *gradientMesh) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGradientMesh( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMesh *gradientMesh,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGradientMeshAtCoords( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMesh *gradientMesh,
                            /* [in] */ float x,
                            /* [in] */ float y) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawSvgAtOrigin( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument *svgDocument,
                            /* [in] */ ABI::Windows::Foundation::Size viewportSize) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawSvgAtPoint( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument *svgDocument,
                            /* [in] */ ABI::Windows::Foundation::Size viewportSize,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawSvgAtCoords( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument *svgDocument,
                            /* [in] */ ABI::Windows::Foundation::Size viewportSize,
                            /* [in] */ float x,
                            /* [in] */ float y) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Antialiasing( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAntialiasing *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Antialiasing( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAntialiasing value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Blend( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasBlend *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Blend( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBlend value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TextAntialiasing( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TextAntialiasing( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TextRenderingParameters( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters **value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TextRenderingParameters( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Transform( 
                            /* [out][retval] */ ABI::Windows::Foundation::Numerics::Matrix3x2 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Transform( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Units( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasUnits *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Units( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasUnits value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EffectBufferPrecision( 
                            /* [out][retval] */ __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision **value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_EffectBufferPrecision( 
                            /* [in] */ __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EffectTileSize( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::BitmapSize *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_EffectTileSize( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::BitmapSize value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacity( 
                            /* [in] */ float opacity,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityAndClipRectangle( 
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Windows::Foundation::Rect clipRectangle,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityBrushAndClipRectangle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush,
                            /* [in] */ ABI::Windows::Foundation::Rect clipRectangle,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityAndClipGeometry( 
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *clipGeometry,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityBrushAndClipGeometry( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *clipGeometry,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityAndClipGeometryAndTransform( 
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *clipGeometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 geometryTransform,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityBrushAndClipGeometryAndTransform( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *clipGeometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 geometryTransform,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithAllOptions( 
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush,
                            /* [in] */ ABI::Windows::Foundation::Rect clipRectangle,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *clipGeometry,
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 geometryTransform,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasLayerOptions options,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGlyphRun( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *fontFace,
                            /* [in] */ float fontSize,
                            /* [in] */ UINT32 glyphCount,
                            /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *glyphs,
                            /* [in] */ boolean isSideways,
                            /* [in] */ UINT32 bidiLevel,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGlyphRunWithMeasuringMode( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *fontFace,
                            /* [in] */ float fontSize,
                            /* [in] */ UINT32 glyphCount,
                            /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *glyphs,
                            /* [in] */ boolean isSideways,
                            /* [in] */ UINT32 bidiLevel,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGlyphRunWithMeasuringModeAndDescription( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace *fontFace,
                            /* [in] */ float fontSize,
                            /* [in] */ UINT32 glyphCount,
                            /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph *glyphs,
                            /* [in] */ boolean isSideways,
                            /* [in] */ UINT32 bidiLevel,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                            /* [in] */ HSTRING localeName,
                            /* [in] */ HSTRING textString,
                            /* [in] */ UINT32 clusterMapIndicesCount,
                            /* [in][size_is] */ int *clusterMapIndices,
                            /* [in] */ UINT32 textPosition) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateSpriteBatch( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSpriteBatch **spriteBatch) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateSpriteBatchWithSortMode( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasSpriteSortMode sortMode,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSpriteBatch **spriteBatch) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateSpriteBatchWithSortModeAndInterpolation( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasSpriteSortMode sortMode,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSpriteBatch **spriteBatch) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateSpriteBatchWithSortModeAndInterpolationAndOptions( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasSpriteSortMode sortMode,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasSpriteOptions options,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSpriteBatch **spriteBatch) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasDrawingSession = __uuidof(ICanvasDrawingSession);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *ClearHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 color);
        
        HRESULT ( STDMETHODCALLTYPE *Flush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOrigin )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ float x,
            /* [in] */ float y);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageToRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destinationRectangle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRectAndOpacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRectAndOpacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRectAndOpacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRectAndOpacityAndInterpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x0,
            /* [in] */ float y0,
            /* [in] */ float x1,
            /* [in] */ float y1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x0,
            /* [in] */ float y0,
            /* [in] */ float x1,
            /* [in] */ float y1,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x0,
            /* [in] */ float y0,
            /* [in] */ float x1,
            /* [in] */ float y1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x0,
            /* [in] */ float y0,
            /* [in] */ float x1,
            /* [in] */ float y1,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x0,
            /* [in] */ float y0,
            /* [in] */ float x1,
            /* [in] */ float y1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x0,
            /* [in] */ float y0,
            /* [in] */ float x1,
            /* [in] */ float y1,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *FillRectangleWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillRectangleAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillRectangleWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillRectangleAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillRectangleWithBrushAndOpacityBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush);
        
        HRESULT ( STDMETHODCALLTYPE *FillRectangleAtCoordsWithBrushAndOpacityBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *FillRoundedRectangleWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillRoundedRectangleAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillRoundedRectangleWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillRoundedRectangleAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *FillEllipseWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillEllipseAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillEllipseWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillEllipseAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *FillCircleWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillCircleAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillCircleWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillCircleAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointWithBrushAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtRectWithBrushAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rectangle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointCoordsWithBrushAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtRectCoordsWithBrushAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointWithColorAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtRectWithColorAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rectangle,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointCoordsWithColorAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtRectCoordsWithColorAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryWithBrushAndOpacityBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryAtCoordsWithBrushAndOpacityBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryAtOriginWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryAtOriginWithBrushAndOpacityBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryAtOriginWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryAtOriginWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryAtOriginWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextLayoutWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout *textLayout,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextLayoutAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout *textLayout,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextLayoutWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout *textLayout,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextLayoutAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout *textLayout,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawInk )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke *inkStrokes);
        
        HRESULT ( STDMETHODCALLTYPE *DrawInkWithHighContrast )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke *inkStrokes,
            /* [in] */ boolean highContrast);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGradientMeshAtOrigin )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh *gradientMesh);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGradientMesh )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh *gradientMesh,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGradientMeshAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh *gradientMesh,
            /* [in] */ float x,
            /* [in] */ float y);
        
        HRESULT ( STDMETHODCALLTYPE *DrawSvgAtOrigin )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument *svgDocument,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize viewportSize);
        
        HRESULT ( STDMETHODCALLTYPE *DrawSvgAtPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument *svgDocument,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize viewportSize,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point);
        
        HRESULT ( STDMETHODCALLTYPE *DrawSvgAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument *svgDocument,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize viewportSize,
            /* [in] */ float x,
            /* [in] */ float y);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Antialiasing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Antialiasing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blend )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Blend )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextAntialiasing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextAntialiasing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextRenderingParameters )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextRenderingParameters )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Transform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Transform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Units )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Units )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EffectBufferPrecision )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_EffectBufferPrecision )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EffectTileSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_EffectTileSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize value);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float opacity,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityAndClipRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect clipRectangle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityBrushAndClipRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect clipRectangle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityAndClipGeometry )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *clipGeometry,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityBrushAndClipGeometry )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *clipGeometry,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityAndClipGeometryAndTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *clipGeometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityBrushAndClipGeometryAndTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *clipGeometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect clipRectangle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *clipGeometry,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions options,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGlyphRun )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *fontFace,
            /* [in] */ float fontSize,
            /* [in] */ UINT32 glyphCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *glyphs,
            /* [in] */ boolean isSideways,
            /* [in] */ UINT32 bidiLevel,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGlyphRunWithMeasuringMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *fontFace,
            /* [in] */ float fontSize,
            /* [in] */ UINT32 glyphCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *glyphs,
            /* [in] */ boolean isSideways,
            /* [in] */ UINT32 bidiLevel,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGlyphRunWithMeasuringModeAndDescription )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace *fontFace,
            /* [in] */ float fontSize,
            /* [in] */ UINT32 glyphCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph *glyphs,
            /* [in] */ boolean isSideways,
            /* [in] */ UINT32 bidiLevel,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
            /* [in] */ HSTRING localeName,
            /* [in] */ HSTRING textString,
            /* [in] */ UINT32 clusterMapIndicesCount,
            /* [in][size_is] */ int *clusterMapIndices,
            /* [in] */ UINT32 textPosition);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSpriteBatch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch **spriteBatch);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSpriteBatchWithSortMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch **spriteBatch);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSpriteBatchWithSortModeAndInterpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch **spriteBatch);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSpriteBatchWithSortModeAndInterpolationAndOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions options,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch **spriteBatch);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_Clear(This,color)	\
    ( (This)->lpVtbl -> Clear(This,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_ClearHdr(This,color)	\
    ( (This)->lpVtbl -> ClearHdr(This,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_Flush(This)	\
    ( (This)->lpVtbl -> Flush(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOrigin(This,image)	\
    ( (This)->lpVtbl -> DrawImageAtOrigin(This,image) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffset(This,image,offset)	\
    ( (This)->lpVtbl -> DrawImageAtOffset(This,image,offset) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoords(This,image,x,y)	\
    ( (This)->lpVtbl -> DrawImageAtCoords(This,image,x,y) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRect(This,bitmap,destinationRectangle)	\
    ( (This)->lpVtbl -> DrawImageToRect(This,bitmap,destinationRectangle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRect(This,image,offset,sourceRectangle)	\
    ( (This)->lpVtbl -> DrawImageAtOffsetWithSourceRect(This,image,offset,sourceRectangle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRect(This,image,x,y,sourceRectangle)	\
    ( (This)->lpVtbl -> DrawImageAtCoordsWithSourceRect(This,image,x,y,sourceRectangle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRect(This,image,destinationRectangle,sourceRectangle)	\
    ( (This)->lpVtbl -> DrawImageToRectWithSourceRect(This,image,destinationRectangle,sourceRectangle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRectAndOpacity(This,image,offset,sourceRectangle,opacity)	\
    ( (This)->lpVtbl -> DrawImageAtOffsetWithSourceRectAndOpacity(This,image,offset,sourceRectangle,opacity) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRectAndOpacity(This,image,x,y,sourceRectangle,opacity)	\
    ( (This)->lpVtbl -> DrawImageAtCoordsWithSourceRectAndOpacity(This,image,x,y,sourceRectangle,opacity) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRectAndOpacity(This,image,destinationRectangle,sourceRectangle,opacity)	\
    ( (This)->lpVtbl -> DrawImageToRectWithSourceRectAndOpacity(This,image,destinationRectangle,sourceRectangle,opacity) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(This,image,offset,sourceRectangle,opacity,interpolation)	\
    ( (This)->lpVtbl -> DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(This,image,offset,sourceRectangle,opacity,interpolation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(This,image,x,y,sourceRectangle,opacity,interpolation)	\
    ( (This)->lpVtbl -> DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(This,image,x,y,sourceRectangle,opacity,interpolation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRectAndOpacityAndInterpolation(This,image,destinationRectangle,sourceRectangle,opacity,interpolation)	\
    ( (This)->lpVtbl -> DrawImageToRectWithSourceRectAndOpacityAndInterpolation(This,image,destinationRectangle,sourceRectangle,opacity,interpolation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,offset,sourceRectangle,opacity,interpolation,composite)	\
    ( (This)->lpVtbl -> DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,offset,sourceRectangle,opacity,interpolation,composite) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,x,y,sourceRectangle,opacity,interpolation,composite)	\
    ( (This)->lpVtbl -> DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,x,y,sourceRectangle,opacity,interpolation,composite) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,destinationRectangle,sourceRectangle,opacity,interpolation,composite)	\
    ( (This)->lpVtbl -> DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,destinationRectangle,sourceRectangle,opacity,interpolation,composite) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,offset,sourceRectangle,opacity,interpolation,perspective)	\
    ( (This)->lpVtbl -> DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,offset,sourceRectangle,opacity,interpolation,perspective) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,x,y,sourceRectangle,opacity,interpolation,perspective)	\
    ( (This)->lpVtbl -> DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,x,y,sourceRectangle,opacity,interpolation,perspective) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,destinationRectangle,sourceRectangle,opacity,interpolation,perspective)	\
    ( (This)->lpVtbl -> DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,destinationRectangle,sourceRectangle,opacity,interpolation,perspective) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithBrush(This,point0,point1,brush)	\
    ( (This)->lpVtbl -> DrawLineWithBrush(This,point0,point1,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithBrush(This,x0,y0,x1,y1,brush)	\
    ( (This)->lpVtbl -> DrawLineAtCoordsWithBrush(This,x0,y0,x1,y1,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithColor(This,point0,point1,color)	\
    ( (This)->lpVtbl -> DrawLineWithColor(This,point0,point1,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithColor(This,x0,y0,x1,y1,color)	\
    ( (This)->lpVtbl -> DrawLineAtCoordsWithColor(This,x0,y0,x1,y1,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithBrushAndStrokeWidth(This,point0,point1,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawLineWithBrushAndStrokeWidth(This,point0,point1,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithBrushAndStrokeWidth(This,x0,y0,x1,y1,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawLineAtCoordsWithBrushAndStrokeWidth(This,x0,y0,x1,y1,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithColorAndStrokeWidth(This,point0,point1,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawLineWithColorAndStrokeWidth(This,point0,point1,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithColorAndStrokeWidth(This,x0,y0,x1,y1,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawLineAtCoordsWithColorAndStrokeWidth(This,x0,y0,x1,y1,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithBrushAndStrokeWidthAndStrokeStyle(This,point0,point1,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawLineWithBrushAndStrokeWidthAndStrokeStyle(This,point0,point1,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x0,y0,x1,y1,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x0,y0,x1,y1,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithColorAndStrokeWidthAndStrokeStyle(This,point0,point1,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawLineWithColorAndStrokeWidthAndStrokeStyle(This,point0,point1,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x0,y0,x1,y1,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x0,y0,x1,y1,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithBrush(This,rect,brush)	\
    ( (This)->lpVtbl -> DrawRectangleWithBrush(This,rect,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithBrush(This,x,y,w,h,brush)	\
    ( (This)->lpVtbl -> DrawRectangleAtCoordsWithBrush(This,x,y,w,h,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithColor(This,rect,color)	\
    ( (This)->lpVtbl -> DrawRectangleWithColor(This,rect,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithColor(This,x,y,w,h,color)	\
    ( (This)->lpVtbl -> DrawRectangleAtCoordsWithColor(This,x,y,w,h,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithBrushAndStrokeWidth(This,rect,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRectangleWithBrushAndStrokeWidth(This,rect,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithBrushAndStrokeWidth(This,x,y,w,h,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRectangleAtCoordsWithBrushAndStrokeWidth(This,x,y,w,h,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithColorAndStrokeWidth(This,rect,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRectangleWithColorAndStrokeWidth(This,rect,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithColorAndStrokeWidth(This,x,y,w,h,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRectangleAtCoordsWithColorAndStrokeWidth(This,x,y,w,h,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(This,rect,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(This,rect,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,w,h,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,w,h,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(This,rect,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(This,rect,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,w,h,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,w,h,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleWithBrush(This,rect,brush)	\
    ( (This)->lpVtbl -> FillRectangleWithBrush(This,rect,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleAtCoordsWithBrush(This,x,y,w,h,brush)	\
    ( (This)->lpVtbl -> FillRectangleAtCoordsWithBrush(This,x,y,w,h,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleWithColor(This,rect,color)	\
    ( (This)->lpVtbl -> FillRectangleWithColor(This,rect,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleAtCoordsWithColor(This,x,y,w,h,color)	\
    ( (This)->lpVtbl -> FillRectangleAtCoordsWithColor(This,x,y,w,h,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleWithBrushAndOpacityBrush(This,rect,brush,opacityBrush)	\
    ( (This)->lpVtbl -> FillRectangleWithBrushAndOpacityBrush(This,rect,brush,opacityBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleAtCoordsWithBrushAndOpacityBrush(This,x,y,w,h,brush,opacityBrush)	\
    ( (This)->lpVtbl -> FillRectangleAtCoordsWithBrushAndOpacityBrush(This,x,y,w,h,brush,opacityBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithBrush(This,rect,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleWithBrush(This,rect,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithBrush(This,x,y,w,h,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleAtCoordsWithBrush(This,x,y,w,h,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithColor(This,rect,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleWithColor(This,rect,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithColor(This,x,y,w,h,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleAtCoordsWithColor(This,x,y,w,h,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithBrushAndStrokeWidth(This,rect,radiusX,radiusY,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleWithBrushAndStrokeWidth(This,rect,radiusX,radiusY,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(This,x,y,w,h,radiusX,radiusY,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(This,x,y,w,h,radiusX,radiusY,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithColorAndStrokeWidth(This,rect,radiusX,radiusY,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleWithColorAndStrokeWidth(This,rect,radiusX,radiusY,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(This,x,y,w,h,radiusX,radiusY,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(This,x,y,w,h,radiusX,radiusY,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(This,rect,radiusX,radiusY,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(This,rect,radiusX,radiusY,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,w,h,radiusX,radiusY,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,w,h,radiusX,radiusY,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(This,rect,radiusX,radiusY,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(This,rect,radiusX,radiusY,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,w,h,radiusX,radiusY,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,w,h,radiusX,radiusY,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRoundedRectangleWithBrush(This,rect,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> FillRoundedRectangleWithBrush(This,rect,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRoundedRectangleAtCoordsWithBrush(This,x,y,w,h,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> FillRoundedRectangleAtCoordsWithBrush(This,x,y,w,h,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRoundedRectangleWithColor(This,rect,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> FillRoundedRectangleWithColor(This,rect,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRoundedRectangleAtCoordsWithColor(This,x,y,w,h,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> FillRoundedRectangleAtCoordsWithColor(This,x,y,w,h,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithBrush(This,centerPoint,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> DrawEllipseWithBrush(This,centerPoint,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithBrush(This,x,y,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> DrawEllipseAtCoordsWithBrush(This,x,y,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithColor(This,centerPoint,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> DrawEllipseWithColor(This,centerPoint,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithColor(This,x,y,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> DrawEllipseAtCoordsWithColor(This,x,y,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithBrushAndStrokeWidth(This,centerPoint,radiusX,radiusY,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawEllipseWithBrushAndStrokeWidth(This,centerPoint,radiusX,radiusY,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithBrushAndStrokeWidth(This,x,y,radiusX,radiusY,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawEllipseAtCoordsWithBrushAndStrokeWidth(This,x,y,radiusX,radiusY,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithColorAndStrokeWidth(This,centerPoint,radiusX,radiusY,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawEllipseWithColorAndStrokeWidth(This,centerPoint,radiusX,radiusY,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithColorAndStrokeWidth(This,x,y,radiusX,radiusY,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawEllipseAtCoordsWithColorAndStrokeWidth(This,x,y,radiusX,radiusY,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(This,centerPoint,radiusX,radiusY,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(This,centerPoint,radiusX,radiusY,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,radiusX,radiusY,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,radiusX,radiusY,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(This,centerPoint,radiusX,radiusY,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(This,centerPoint,radiusX,radiusY,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,radiusX,radiusY,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,radiusX,radiusY,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillEllipseWithBrush(This,centerPoint,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> FillEllipseWithBrush(This,centerPoint,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillEllipseAtCoordsWithBrush(This,x,y,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> FillEllipseAtCoordsWithBrush(This,x,y,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillEllipseWithColor(This,centerPoint,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> FillEllipseWithColor(This,centerPoint,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillEllipseAtCoordsWithColor(This,x,y,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> FillEllipseAtCoordsWithColor(This,x,y,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithBrush(This,centerPoint,radius,brush)	\
    ( (This)->lpVtbl -> DrawCircleWithBrush(This,centerPoint,radius,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithBrush(This,x,y,radius,brush)	\
    ( (This)->lpVtbl -> DrawCircleAtCoordsWithBrush(This,x,y,radius,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithColor(This,centerPoint,radius,color)	\
    ( (This)->lpVtbl -> DrawCircleWithColor(This,centerPoint,radius,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithColor(This,x,y,radius,color)	\
    ( (This)->lpVtbl -> DrawCircleAtCoordsWithColor(This,x,y,radius,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithBrushAndStrokeWidth(This,centerPoint,radius,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawCircleWithBrushAndStrokeWidth(This,centerPoint,radius,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithBrushAndStrokeWidth(This,x,y,radius,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawCircleAtCoordsWithBrushAndStrokeWidth(This,x,y,radius,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithColorAndStrokeWidth(This,centerPoint,radius,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawCircleWithColorAndStrokeWidth(This,centerPoint,radius,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithColorAndStrokeWidth(This,x,y,radius,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawCircleAtCoordsWithColorAndStrokeWidth(This,x,y,radius,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(This,centerPoint,radius,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(This,centerPoint,radius,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,radius,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,radius,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithColorAndStrokeWidthAndStrokeStyle(This,centerPoint,radius,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawCircleWithColorAndStrokeWidthAndStrokeStyle(This,centerPoint,radius,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,radius,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,radius,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillCircleWithBrush(This,centerPoint,radius,brush)	\
    ( (This)->lpVtbl -> FillCircleWithBrush(This,centerPoint,radius,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillCircleAtCoordsWithBrush(This,x,y,radius,brush)	\
    ( (This)->lpVtbl -> FillCircleAtCoordsWithBrush(This,x,y,radius,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillCircleWithColor(This,centerPoint,radius,color)	\
    ( (This)->lpVtbl -> FillCircleWithColor(This,centerPoint,radius,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillCircleAtCoordsWithColor(This,x,y,radius,color)	\
    ( (This)->lpVtbl -> FillCircleAtCoordsWithColor(This,x,y,radius,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointWithColor(This,text,point,color)	\
    ( (This)->lpVtbl -> DrawTextAtPointWithColor(This,text,point,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointCoordsWithColor(This,text,x,y,color)	\
    ( (This)->lpVtbl -> DrawTextAtPointCoordsWithColor(This,text,x,y,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointWithBrushAndFormat(This,text,point,brush,format)	\
    ( (This)->lpVtbl -> DrawTextAtPointWithBrushAndFormat(This,text,point,brush,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtRectWithBrushAndFormat(This,text,rectangle,brush,format)	\
    ( (This)->lpVtbl -> DrawTextAtRectWithBrushAndFormat(This,text,rectangle,brush,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointCoordsWithBrushAndFormat(This,text,x,y,brush,format)	\
    ( (This)->lpVtbl -> DrawTextAtPointCoordsWithBrushAndFormat(This,text,x,y,brush,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtRectCoordsWithBrushAndFormat(This,text,x,y,w,h,brush,format)	\
    ( (This)->lpVtbl -> DrawTextAtRectCoordsWithBrushAndFormat(This,text,x,y,w,h,brush,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointWithColorAndFormat(This,text,point,color,format)	\
    ( (This)->lpVtbl -> DrawTextAtPointWithColorAndFormat(This,text,point,color,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtRectWithColorAndFormat(This,text,rectangle,color,format)	\
    ( (This)->lpVtbl -> DrawTextAtRectWithColorAndFormat(This,text,rectangle,color,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointCoordsWithColorAndFormat(This,text,x,y,color,format)	\
    ( (This)->lpVtbl -> DrawTextAtPointCoordsWithColorAndFormat(This,text,x,y,color,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtRectCoordsWithColorAndFormat(This,text,x,y,w,h,color,format)	\
    ( (This)->lpVtbl -> DrawTextAtRectCoordsWithColorAndFormat(This,text,x,y,w,h,color,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithBrush(This,geometry,offset,brush)	\
    ( (This)->lpVtbl -> DrawGeometryWithBrush(This,geometry,offset,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithColor(This,geometry,offset,color)	\
    ( (This)->lpVtbl -> DrawGeometryWithColor(This,geometry,offset,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithBrush(This,geometry,x,y,brush)	\
    ( (This)->lpVtbl -> DrawGeometryAtCoordsWithBrush(This,geometry,x,y,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithColor(This,geometry,x,y,color)	\
    ( (This)->lpVtbl -> DrawGeometryAtCoordsWithColor(This,geometry,x,y,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithBrush(This,geometry,brush)	\
    ( (This)->lpVtbl -> DrawGeometryAtOriginWithBrush(This,geometry,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithColor(This,geometry,color)	\
    ( (This)->lpVtbl -> DrawGeometryAtOriginWithColor(This,geometry,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithBrushAndStrokeWidth(This,geometry,offset,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawGeometryWithBrushAndStrokeWidth(This,geometry,offset,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithColorAndStrokeWidth(This,geometry,offset,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawGeometryWithColorAndStrokeWidth(This,geometry,offset,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithBrushAndStrokeWidth(This,geometry,x,y,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawGeometryAtCoordsWithBrushAndStrokeWidth(This,geometry,x,y,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithColorAndStrokeWidth(This,geometry,x,y,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawGeometryAtCoordsWithColorAndStrokeWidth(This,geometry,x,y,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithBrushAndStrokeWidth(This,geometry,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawGeometryAtOriginWithBrushAndStrokeWidth(This,geometry,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithColorAndStrokeWidth(This,geometry,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawGeometryAtOriginWithColorAndStrokeWidth(This,geometry,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,offset,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,offset,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(This,geometry,offset,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(This,geometry,offset,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,x,y,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,x,y,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,geometry,x,y,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,geometry,x,y,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(This,geometry,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(This,geometry,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryWithBrush(This,geometry,offset,brush)	\
    ( (This)->lpVtbl -> FillGeometryWithBrush(This,geometry,offset,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryWithBrushAndOpacityBrush(This,geometry,offset,brush,opacityBrush)	\
    ( (This)->lpVtbl -> FillGeometryWithBrushAndOpacityBrush(This,geometry,offset,brush,opacityBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryWithColor(This,geometry,offset,color)	\
    ( (This)->lpVtbl -> FillGeometryWithColor(This,geometry,offset,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtCoordsWithBrush(This,geometry,x,y,brush)	\
    ( (This)->lpVtbl -> FillGeometryAtCoordsWithBrush(This,geometry,x,y,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtCoordsWithBrushAndOpacityBrush(This,geometry,x,y,brush,opacityBrush)	\
    ( (This)->lpVtbl -> FillGeometryAtCoordsWithBrushAndOpacityBrush(This,geometry,x,y,brush,opacityBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtCoordsWithColor(This,geometry,x,y,color)	\
    ( (This)->lpVtbl -> FillGeometryAtCoordsWithColor(This,geometry,x,y,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtOriginWithBrush(This,geometry,brush)	\
    ( (This)->lpVtbl -> FillGeometryAtOriginWithBrush(This,geometry,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtOriginWithBrushAndOpacityBrush(This,geometry,brush,opacityBrush)	\
    ( (This)->lpVtbl -> FillGeometryAtOriginWithBrushAndOpacityBrush(This,geometry,brush,opacityBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtOriginWithColor(This,geometry,color)	\
    ( (This)->lpVtbl -> FillGeometryAtOriginWithColor(This,geometry,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryWithBrush(This,geometry,offset,brush)	\
    ( (This)->lpVtbl -> DrawCachedGeometryWithBrush(This,geometry,offset,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryWithColor(This,geometry,offset,color)	\
    ( (This)->lpVtbl -> DrawCachedGeometryWithColor(This,geometry,offset,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryAtCoordsWithBrush(This,geometry,x,y,brush)	\
    ( (This)->lpVtbl -> DrawCachedGeometryAtCoordsWithBrush(This,geometry,x,y,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryAtCoordsWithColor(This,geometry,x,y,color)	\
    ( (This)->lpVtbl -> DrawCachedGeometryAtCoordsWithColor(This,geometry,x,y,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryAtOriginWithBrush(This,geometry,brush)	\
    ( (This)->lpVtbl -> DrawCachedGeometryAtOriginWithBrush(This,geometry,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryAtOriginWithColor(This,geometry,color)	\
    ( (This)->lpVtbl -> DrawCachedGeometryAtOriginWithColor(This,geometry,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextLayoutWithBrush(This,textLayout,point,brush)	\
    ( (This)->lpVtbl -> DrawTextLayoutWithBrush(This,textLayout,point,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextLayoutAtCoordsWithBrush(This,textLayout,x,y,brush)	\
    ( (This)->lpVtbl -> DrawTextLayoutAtCoordsWithBrush(This,textLayout,x,y,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextLayoutWithColor(This,textLayout,point,color)	\
    ( (This)->lpVtbl -> DrawTextLayoutWithColor(This,textLayout,point,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextLayoutAtCoordsWithColor(This,textLayout,x,y,color)	\
    ( (This)->lpVtbl -> DrawTextLayoutAtCoordsWithColor(This,textLayout,x,y,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawInk(This,inkStrokes)	\
    ( (This)->lpVtbl -> DrawInk(This,inkStrokes) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawInkWithHighContrast(This,inkStrokes,highContrast)	\
    ( (This)->lpVtbl -> DrawInkWithHighContrast(This,inkStrokes,highContrast) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGradientMeshAtOrigin(This,gradientMesh)	\
    ( (This)->lpVtbl -> DrawGradientMeshAtOrigin(This,gradientMesh) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGradientMesh(This,gradientMesh,point)	\
    ( (This)->lpVtbl -> DrawGradientMesh(This,gradientMesh,point) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGradientMeshAtCoords(This,gradientMesh,x,y)	\
    ( (This)->lpVtbl -> DrawGradientMeshAtCoords(This,gradientMesh,x,y) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawSvgAtOrigin(This,svgDocument,viewportSize)	\
    ( (This)->lpVtbl -> DrawSvgAtOrigin(This,svgDocument,viewportSize) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawSvgAtPoint(This,svgDocument,viewportSize,point)	\
    ( (This)->lpVtbl -> DrawSvgAtPoint(This,svgDocument,viewportSize,point) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawSvgAtCoords(This,svgDocument,viewportSize,x,y)	\
    ( (This)->lpVtbl -> DrawSvgAtCoords(This,svgDocument,viewportSize,x,y) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_Antialiasing(This,value)	\
    ( (This)->lpVtbl -> get_Antialiasing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_Antialiasing(This,value)	\
    ( (This)->lpVtbl -> put_Antialiasing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_Blend(This,value)	\
    ( (This)->lpVtbl -> get_Blend(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_Blend(This,value)	\
    ( (This)->lpVtbl -> put_Blend(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_TextAntialiasing(This,value)	\
    ( (This)->lpVtbl -> get_TextAntialiasing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_TextAntialiasing(This,value)	\
    ( (This)->lpVtbl -> put_TextAntialiasing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_TextRenderingParameters(This,value)	\
    ( (This)->lpVtbl -> get_TextRenderingParameters(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_TextRenderingParameters(This,value)	\
    ( (This)->lpVtbl -> put_TextRenderingParameters(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_Transform(This,value)	\
    ( (This)->lpVtbl -> get_Transform(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_Transform(This,value)	\
    ( (This)->lpVtbl -> put_Transform(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_Units(This,value)	\
    ( (This)->lpVtbl -> get_Units(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_Units(This,value)	\
    ( (This)->lpVtbl -> put_Units(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_EffectBufferPrecision(This,value)	\
    ( (This)->lpVtbl -> get_EffectBufferPrecision(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_EffectBufferPrecision(This,value)	\
    ( (This)->lpVtbl -> put_EffectBufferPrecision(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_EffectTileSize(This,value)	\
    ( (This)->lpVtbl -> get_EffectTileSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_EffectTileSize(This,value)	\
    ( (This)->lpVtbl -> put_EffectTileSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacity(This,opacity,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacity(This,opacity,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityBrush(This,opacityBrush,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityBrush(This,opacityBrush,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityAndClipRectangle(This,opacity,clipRectangle,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityAndClipRectangle(This,opacity,clipRectangle,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityBrushAndClipRectangle(This,opacityBrush,clipRectangle,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityBrushAndClipRectangle(This,opacityBrush,clipRectangle,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityAndClipGeometry(This,opacity,clipGeometry,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityAndClipGeometry(This,opacity,clipGeometry,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityBrushAndClipGeometry(This,opacityBrush,clipGeometry,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityBrushAndClipGeometry(This,opacityBrush,clipGeometry,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityAndClipGeometryAndTransform(This,opacity,clipGeometry,geometryTransform,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityAndClipGeometryAndTransform(This,opacity,clipGeometry,geometryTransform,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityBrushAndClipGeometryAndTransform(This,opacityBrush,clipGeometry,geometryTransform,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityBrushAndClipGeometryAndTransform(This,opacityBrush,clipGeometry,geometryTransform,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithAllOptions(This,opacity,opacityBrush,clipRectangle,clipGeometry,geometryTransform,options,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithAllOptions(This,opacity,opacityBrush,clipRectangle,clipGeometry,geometryTransform,options,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGlyphRun(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush)	\
    ( (This)->lpVtbl -> DrawGlyphRun(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGlyphRunWithMeasuringMode(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush,measuringMode)	\
    ( (This)->lpVtbl -> DrawGlyphRunWithMeasuringMode(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush,measuringMode) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGlyphRunWithMeasuringModeAndDescription(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush,measuringMode,localeName,textString,clusterMapIndicesCount,clusterMapIndices,textPosition)	\
    ( (This)->lpVtbl -> DrawGlyphRunWithMeasuringModeAndDescription(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush,measuringMode,localeName,textString,clusterMapIndicesCount,clusterMapIndices,textPosition) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateSpriteBatch(This,spriteBatch)	\
    ( (This)->lpVtbl -> CreateSpriteBatch(This,spriteBatch) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateSpriteBatchWithSortMode(This,sortMode,spriteBatch)	\
    ( (This)->lpVtbl -> CreateSpriteBatchWithSortMode(This,sortMode,spriteBatch) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateSpriteBatchWithSortModeAndInterpolation(This,sortMode,interpolation,spriteBatch)	\
    ( (This)->lpVtbl -> CreateSpriteBatchWithSortModeAndInterpolation(This,sortMode,interpolation,spriteBatch) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateSpriteBatchWithSortModeAndInterpolationAndOptions(This,sortMode,interpolation,options,spriteBatch)	\
    ( (This)->lpVtbl -> CreateSpriteBatchWithSortModeAndInterpolationAndOptions(This,sortMode,interpolation,options,spriteBatch) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0273 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDrawingSession_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDrawingSession_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasDrawingSession[] = L"Microsoft.Graphics.Canvas.CanvasDrawingSession";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasImageSource;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0273 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0273_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0273_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("8596BEDD-D7F7-4C6B-B1AD-41949035E084")
                            ICanvasImageSourceFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateWithSize( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                                    /* [in] */ ABI::Windows::Foundation::Size size,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource **imageSource) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeight( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource **imageSource) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpi( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [in] */ float dpi,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource **imageSource) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpiAndAlphaMode( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [in] */ float dpi,
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource **imageSource) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasImageSourceFactory = __uuidof(ICanvasImageSourceFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize size,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource **imageSource);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource **imageSource);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource **imageSource);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpiAndAlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource **imageSource);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_CreateWithSize(This,resourceCreator,size,imageSource)	\
    ( (This)->lpVtbl -> CreateWithSize(This,resourceCreator,size,imageSource) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_CreateWithWidthAndHeight(This,resourceCreator,width,height,imageSource)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeight(This,resourceCreator,width,height,imageSource) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,imageSource)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,imageSource) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_CreateWithWidthAndHeightAndDpiAndAlphaMode(This,resourceCreator,width,height,dpi,alphaMode,imageSource)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpiAndAlphaMode(This,resourceCreator,width,height,dpi,alphaMode,imageSource) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0274 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0274 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0274_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0274_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("3C35E87A-E881-4F44-B0D1-551413AEC66D")
                            ICanvasImageSource : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                                    /* [in] */ ABI::Windows::UI::Color clearColor,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateDrawingSessionWithUpdateRectangle( 
                                    /* [in] */ ABI::Windows::UI::Color clearColor,
                                    /* [in] */ ABI::Windows::Foundation::Rect updateRectangle,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Recreate( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                    /* [out][retval] */ ABI::Windows::Foundation::Size *size) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SizeInPixels( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::BitmapSize *size) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasImageSource = __uuidof(ICanvasImageSource);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor clearColor,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSessionWithUpdateRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor clearColor,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect updateRectangle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *Recreate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_CreateDrawingSession(This,clearColor,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,clearColor,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_CreateDrawingSessionWithUpdateRectangle(This,clearColor,updateRectangle,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSessionWithUpdateRectangle(This,clearColor,updateRectangle,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_Recreate(This,value)	\
    ( (This)->lpVtbl -> Recreate(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_get_SizeInPixels(This,size)	\
    ( (This)->lpVtbl -> get_SizeInPixels(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0275 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasImageSource_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasImageSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation
    {
        CanvasSwapChainRotation_None	= 0,
        CanvasSwapChainRotation_Rotate90	= ( CanvasSwapChainRotation_None + 1 ) ,
        CanvasSwapChainRotation_Rotate180	= ( CanvasSwapChainRotation_Rotate90 + 1 ) ,
        CanvasSwapChainRotation_Rotate270	= ( CanvasSwapChainRotation_Rotate180 + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasSwapChain;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSwapChainFactory[] = L"Microsoft.Graphics.Canvas.ICanvasSwapChainFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0275 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                /* [v1_enum] */ 
                MIDL_ENUM CanvasSwapChainRotation
                    {
                        None	= 0,
                        Rotate90	= ( None + 1 ) ,
                        Rotate180	= ( Rotate90 + 1 ) ,
                        Rotate270	= ( Rotate180 + 1 ) 
                    } ;

                const MIDL_ENUM CanvasSwapChainRotation CanvasSwapChainRotation_None = CanvasSwapChainRotation::None;
                const MIDL_ENUM CanvasSwapChainRotation CanvasSwapChainRotation_Rotate90 = CanvasSwapChainRotation::Rotate90;
                const MIDL_ENUM CanvasSwapChainRotation CanvasSwapChainRotation_Rotate180 = CanvasSwapChainRotation::Rotate180;
                const MIDL_ENUM CanvasSwapChainRotation CanvasSwapChainRotation_Rotate270 = CanvasSwapChainRotation::Rotate270;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef MIDL_ENUM CanvasSwapChainRotation CanvasSwapChainRotation;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0275_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0275_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasSwapChainFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("133C25CB-ED3C-492B-BFFE-7509B521842B")
                    ICanvasSwapChainFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateWithSize( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::Size size,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **swapChain) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeight( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **swapChain) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **swapChain) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateWithAllOptions( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                            /* [in] */ INT32 bufferCount,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **swapChain) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasSwapChainFactory = __uuidof(ICanvasSwapChainFactory);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize size,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **swapChain);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **swapChain);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **swapChain);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
            /* [in] */ INT32 bufferCount,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **swapChain);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_CreateWithSize(This,resourceCreator,size,swapChain)	\
    ( (This)->lpVtbl -> CreateWithSize(This,resourceCreator,size,swapChain) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_CreateWithWidthAndHeight(This,resourceCreator,width,height,swapChain)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeight(This,resourceCreator,width,height,swapChain) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,swapChain)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,swapChain) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_CreateWithAllOptions(This,resourceCreator,width,height,dpi,format,bufferCount,alphaMode,swapChain)	\
    ( (This)->lpVtbl -> CreateWithAllOptions(This,resourceCreator,width,height,dpi,format,bufferCount,alphaMode,swapChain) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0276 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSwapChainStatics[] = L"Microsoft.Graphics.Canvas.ICanvasSwapChainStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0276 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0276_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0276_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasSwapChainStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("05376D8F-3E8D-4A82-9838-691680D32A52")
                    ICanvasSwapChainStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateForCoreWindowWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::UI::Core::ICoreWindow *coreWindow,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **swapChain) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateForCoreWindowWithAllOptions( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::UI::Core::ICoreWindow *coreWindow,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                            /* [in] */ INT32 bufferCount,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **swapChain) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasSwapChainStatics = __uuidof(ICanvasSwapChainStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateForCoreWindowWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CUI_CCore_CICoreWindow *coreWindow,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **swapChain);
        
        HRESULT ( STDMETHODCALLTYPE *CreateForCoreWindowWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CUI_CCore_CICoreWindow *coreWindow,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
            /* [in] */ INT32 bufferCount,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **swapChain);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_CreateForCoreWindowWithDpi(This,resourceCreator,coreWindow,dpi,swapChain)	\
    ( (This)->lpVtbl -> CreateForCoreWindowWithDpi(This,resourceCreator,coreWindow,dpi,swapChain) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_CreateForCoreWindowWithAllOptions(This,resourceCreator,coreWindow,width,height,dpi,format,bufferCount,swapChain)	\
    ( (This)->lpVtbl -> CreateForCoreWindowWithAllOptions(This,resourceCreator,coreWindow,width,height,dpi,format,bufferCount,swapChain) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0277 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSwapChain[] = L"Microsoft.Graphics.Canvas.ICanvasSwapChain";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0277 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0277_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0277_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("882E3C3A-5725-409C-9E76-F80B3BACF1B4")
                    ICanvasSwapChain : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Present( void) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE PresentWithSyncInterval( 
                            /* [in] */ INT32 syncInterval) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ResizeBuffersWithSize( 
                            /* [in] */ ABI::Windows::Foundation::Size newSize) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ResizeBuffersWithWidthAndHeight( 
                            /* [in] */ float newWidth,
                            /* [in] */ float newHeight) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ResizeBuffersWithWidthAndHeightAndDpi( 
                            /* [in] */ float newWidth,
                            /* [in] */ float newHeight,
                            /* [in] */ float newDpi) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ResizeBuffersWithAllOptions( 
                            /* [in] */ float newWidth,
                            /* [in] */ float newHeight,
                            /* [in] */ float newDpi,
                            /* [in] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat newFormat,
                            /* [in] */ INT32 bufferCount) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                            /* [out][retval] */ ABI::Windows::Foundation::Size *size) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SizeInPixels( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::BitmapSize *size) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Format( 
                            /* [out][retval] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BufferCount( 
                            /* [out][retval] */ INT32 *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasSwapChainRotation *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasSwapChainRotation value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceSize( 
                            /* [out][retval] */ ABI::Windows::Foundation::Size *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceSize( 
                            /* [in] */ ABI::Windows::Foundation::Size value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransformMatrix( 
                            /* [out][retval] */ ABI::Windows::Foundation::Numerics::Matrix3x2 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TransformMatrix( 
                            /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                            /* [in] */ ABI::Windows::UI::Color clearColor,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE WaitForVerticalBlank( void) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasSwapChain = __uuidof(ICanvasSwapChain);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Present )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This);
        
        HRESULT ( STDMETHODCALLTYPE *PresentWithSyncInterval )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ INT32 syncInterval);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeBuffersWithSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize newSize);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeBuffersWithWidthAndHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ float newWidth,
            /* [in] */ float newHeight);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeBuffersWithWidthAndHeightAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ float newWidth,
            /* [in] */ float newHeight,
            /* [in] */ float newDpi);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeBuffersWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ float newWidth,
            /* [in] */ float newHeight,
            /* [in] */ float newDpi,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat newFormat,
            /* [in] */ INT32 bufferCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BufferCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransformMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TransformMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor clearColor,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *WaitForVerticalBlank )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_Present(This)	\
    ( (This)->lpVtbl -> Present(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_PresentWithSyncInterval(This,syncInterval)	\
    ( (This)->lpVtbl -> PresentWithSyncInterval(This,syncInterval) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ResizeBuffersWithSize(This,newSize)	\
    ( (This)->lpVtbl -> ResizeBuffersWithSize(This,newSize) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ResizeBuffersWithWidthAndHeight(This,newWidth,newHeight)	\
    ( (This)->lpVtbl -> ResizeBuffersWithWidthAndHeight(This,newWidth,newHeight) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ResizeBuffersWithWidthAndHeightAndDpi(This,newWidth,newHeight,newDpi)	\
    ( (This)->lpVtbl -> ResizeBuffersWithWidthAndHeightAndDpi(This,newWidth,newHeight,newDpi) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ResizeBuffersWithAllOptions(This,newWidth,newHeight,newDpi,newFormat,bufferCount)	\
    ( (This)->lpVtbl -> ResizeBuffersWithAllOptions(This,newWidth,newHeight,newDpi,newFormat,bufferCount) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_SizeInPixels(This,size)	\
    ( (This)->lpVtbl -> get_SizeInPixels(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_Format(This,value)	\
    ( (This)->lpVtbl -> get_Format(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_BufferCount(This,value)	\
    ( (This)->lpVtbl -> get_BufferCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_Rotation(This,value)	\
    ( (This)->lpVtbl -> get_Rotation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_put_Rotation(This,value)	\
    ( (This)->lpVtbl -> put_Rotation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_SourceSize(This,value)	\
    ( (This)->lpVtbl -> get_SourceSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_put_SourceSize(This,value)	\
    ( (This)->lpVtbl -> put_SourceSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_TransformMatrix(This,value)	\
    ( (This)->lpVtbl -> get_TransformMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_put_TransformMatrix(This,value)	\
    ( (This)->lpVtbl -> put_TransformMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_CreateDrawingSession(This,clearColor,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,clearColor,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_WaitForVerticalBlank(This)	\
    ( (This)->lpVtbl -> WaitForVerticalBlank(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0278 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSwapChain_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSwapChain_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasSwapChain[] = L"Microsoft.Graphics.Canvas.CanvasSwapChain";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasCommandList;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasCommandListFactory[] = L"Microsoft.Graphics.Canvas.ICanvasCommandListFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0278 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0278_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0278_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasCommandListFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("B3D44E68-D931-4B5B-B957-0888980A7D50")
                    ICanvasCommandListFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasCommandList **commandList) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasCommandListFactory = __uuidof(ICanvasCommandListFactory);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList **commandList);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_Create(This,resourceCreator,commandList)	\
    ( (This)->lpVtbl -> Create(This,resourceCreator,commandList) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0279 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasCommandList[] = L"Microsoft.Graphics.Canvas.ICanvasCommandList";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0279 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0279_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0279_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasCommandList */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("B71E73CF-2FE7-4D3A-BBB8-19F016F5BE1B")
                    ICanvasCommandList : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasCommandList = __uuidof(ICanvasCommandList);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_CreateDrawingSession(This,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0280 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasCommandList_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasCommandList_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasCommandList[] = L"Microsoft.Graphics.Canvas.CanvasCommandList";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Printing {
class CanvasPrintDeferral;
} /*Printing*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocumentFactory[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocumentFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0280 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0280_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0280_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocumentFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Printing {
                        
                        MIDL_INTERFACE("A201AF1E-CE4A-401D-A719-2BF004D5C26A")
                        ICanvasPrintDocumentFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateWithDevice( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *device,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasPrintDocumentFactory = __uuidof(ICanvasPrintDocumentFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *device,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_CreateWithDevice(This,device,value)	\
    ( (This)->lpVtbl -> CreateWithDevice(This,device,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5643 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5643 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5643_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5643_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0282 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0282 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0282_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0282_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("87076d4b-95f2-5eb5-94b8-f3a8feb8d335")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0283 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs */


/* interface __MIDL_itf_Canvas2Eabi_0000_0283 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0283_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0283_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5644 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5644 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5644_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5644_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0284 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0284 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0284_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0284_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f406c30c-1745-5ada-a50f-11237a9d21c3")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0285 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs */


/* interface __MIDL_itf_Canvas2Eabi_0000_0285 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0285_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0285_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5645 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5645 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5645_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5645_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0286 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0286 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0286_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0286_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e1b1643e-7f53-57d8-8bd1-90ff039d73ca")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0287 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0287 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0287_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0287_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Printing {
                        
                        MIDL_INTERFACE("0A99CDEE-BF11-49D0-AA34-3BA5C32C51A5")
                        ICanvasPrintDocument : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE add_PrintTaskOptionsChanged( 
                                /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs *value,
                                /* [out][retval] */ EventRegistrationToken *token) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE remove_PrintTaskOptionsChanged( 
                                /* [in] */ EventRegistrationToken token) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE add_Preview( 
                                /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs *value,
                                /* [out][retval] */ EventRegistrationToken *token) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE remove_Preview( 
                                /* [in] */ EventRegistrationToken token) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE add_Print( 
                                /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs *value,
                                /* [out][retval] */ EventRegistrationToken *token) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE remove_Print( 
                                /* [in] */ EventRegistrationToken token) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE InvalidatePreview( void) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetPageCount( 
                                /* [in] */ UINT32 count) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetIntermediatePageCount( 
                                /* [in] */ UINT32 count) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasPrintDocument = __uuidof(ICanvasPrintDocument);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *add_PrintTaskOptionsChanged )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_PrintTaskOptionsChanged )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_Preview )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_Preview )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_Print )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_Print )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *InvalidatePreview )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetPageCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
            /* [in] */ UINT32 count);
        
        HRESULT ( STDMETHODCALLTYPE *SetIntermediatePageCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
            /* [in] */ UINT32 count);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_add_PrintTaskOptionsChanged(This,value,token)	\
    ( (This)->lpVtbl -> add_PrintTaskOptionsChanged(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_remove_PrintTaskOptionsChanged(This,token)	\
    ( (This)->lpVtbl -> remove_PrintTaskOptionsChanged(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_add_Preview(This,value,token)	\
    ( (This)->lpVtbl -> add_Preview(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_remove_Preview(This,token)	\
    ( (This)->lpVtbl -> remove_Preview(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_add_Print(This,value,token)	\
    ( (This)->lpVtbl -> add_Print(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_remove_Print(This,token)	\
    ( (This)->lpVtbl -> remove_Print(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_InvalidatePreview(This)	\
    ( (This)->lpVtbl -> InvalidatePreview(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_SetPageCount(This,count)	\
    ( (This)->lpVtbl -> SetPageCount(This,count) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_SetIntermediatePageCount(This,count)	\
    ( (This)->lpVtbl -> SetIntermediatePageCount(This,count) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0288 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0288 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0288_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0288_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Printing {
                        
                        MIDL_INTERFACE("F92089BA-6C99-4CAC-B28A-B5DCEC7A310D")
                        ICanvasPrintTaskOptionsChangedEventArgs : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CurrentPreviewPageNumber( 
                                /* [out][retval] */ UINT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NewPreviewPageNumber( 
                                /* [in] */ UINT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NewPreviewPageNumber( 
                                /* [out][retval] */ UINT32 *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetDeferral( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral **value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PrintTaskOptions( 
                                /* [out][retval] */ ABI::Windows::Graphics::Printing::IPrintTaskOptionsCore **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasPrintTaskOptionsChangedEventArgs = __uuidof(ICanvasPrintTaskOptionsChangedEventArgs);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentPreviewPageNumber )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
            /* [out][retval] */ UINT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NewPreviewPageNumber )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
            /* [in] */ UINT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NewPreviewPageNumber )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
            /* [out][retval] */ UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeferral )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrintTaskOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_get_CurrentPreviewPageNumber(This,value)	\
    ( (This)->lpVtbl -> get_CurrentPreviewPageNumber(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_put_NewPreviewPageNumber(This,value)	\
    ( (This)->lpVtbl -> put_NewPreviewPageNumber(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_get_NewPreviewPageNumber(This,value)	\
    ( (This)->lpVtbl -> get_NewPreviewPageNumber(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_GetDeferral(This,value)	\
    ( (This)->lpVtbl -> GetDeferral(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_get_PrintTaskOptions(This,value)	\
    ( (This)->lpVtbl -> get_PrintTaskOptions(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0289 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0289 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0289_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0289_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Printing {
                        
                        MIDL_INTERFACE("0A6A80A0-B07D-4DB2-BDEB-0368BB18C0F8")
                        ICanvasPreviewEventArgs : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PageNumber( 
                                /* [out][retval] */ UINT32 *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PrintTaskOptions( 
                                /* [out][retval] */ ABI::Windows::Graphics::Printing::IPrintTaskOptionsCore **value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetDeferral( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral **value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DrawingSession( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasPreviewEventArgs = __uuidof(ICanvasPreviewEventArgs);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageNumber )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
            /* [out][retval] */ UINT32 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrintTaskOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore **value);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeferral )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_get_PageNumber(This,value)	\
    ( (This)->lpVtbl -> get_PageNumber(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_get_PrintTaskOptions(This,value)	\
    ( (This)->lpVtbl -> get_PrintTaskOptions(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_GetDeferral(This,value)	\
    ( (This)->lpVtbl -> GetDeferral(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_get_DrawingSession(This,value)	\
    ( (This)->lpVtbl -> get_DrawingSession(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0290 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0290 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0290_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0290_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Printing {
                        
                        MIDL_INTERFACE("0C6148C4-0216-4561-A817-34C8942AAC8B")
                        ICanvasPrintEventArgs : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PrintTaskOptions( 
                                /* [out][retval] */ ABI::Windows::Graphics::Printing::IPrintTaskOptionsCore **value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Dpi( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Dpi( 
                                /* [in] */ float value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetDeferral( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral **value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasPrintEventArgs = __uuidof(ICanvasPrintEventArgs);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrintTaskOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Dpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
            /* [in] */ float value);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeferral )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral **value);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_get_PrintTaskOptions(This,value)	\
    ( (This)->lpVtbl -> get_PrintTaskOptions(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_get_Dpi(This,value)	\
    ( (This)->lpVtbl -> get_Dpi(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_put_Dpi(This,value)	\
    ( (This)->lpVtbl -> put_Dpi(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_GetDeferral(This,value)	\
    ( (This)->lpVtbl -> GetDeferral(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_CreateDrawingSession(This,value)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0291 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDeferral[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0291 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0291_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0291_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Printing {
                        
                        MIDL_INTERFACE("08CA99A2-5801-4EA4-8687-896CBDA69A47")
                        ICanvasPrintDeferral : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Complete( void) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasPrintDeferral = __uuidof(ICanvasPrintDeferral);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferralVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Complete )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferralVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferralVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_Complete(This)	\
    ( (This)->lpVtbl -> Complete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0292 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintDeferral_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPrintDeferral[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral";
#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation
    {
    INT64 UpdateCount;
    __x_ABI_CWindows_CFoundation_CTimeSpan TotalTime;
    __x_ABI_CWindows_CFoundation_CTimeSpan ElapsedTime;
    boolean IsRunningSlowly;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation;

#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0292 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    
                    struct CanvasTimingInformation
                        {
                        INT64 UpdateCount;
                        ABI::Windows::Foundation::TimeSpan TotalTime;
                        ABI::Windows::Foundation::TimeSpan ElapsedTime;
                        boolean IsRunningSlowly;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    
                    typedef struct CanvasTimingInformation CanvasTimingInformation;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0292_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0292_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgsFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("766F4867-B22A-464B-89B1-0DA6AB62BE68")
                            ICanvasAnimatedUpdateEventArgsFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE Create( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation timingInformation,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs **updateEventArgs) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasAnimatedUpdateEventArgsFactory = __uuidof(ICanvasAnimatedUpdateEventArgsFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation timingInformation,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs **updateEventArgs);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_Create(This,timingInformation,updateEventArgs)	\
    ( (This)->lpVtbl -> Create(This,timingInformation,updateEventArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0293 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0293 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0293_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0293_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("A96B2B2A-0C6E-4AA8-925B-7137263B4E44")
                            ICanvasAnimatedUpdateEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timing( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasAnimatedUpdateEventArgs = __uuidof(ICanvasAnimatedUpdateEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_get_Timing(This,value)	\
    ( (This)->lpVtbl -> get_Timing(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0294 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0294 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0294_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0294_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgsFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("C0C8FDAC-0DFC-4E18-A6E9-9EF7DC82BCC2")
                            ICanvasAnimatedDrawEventArgsFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE Create( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *canvasDrawingSession,
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation timingInformation,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs **animatedControlDrawEventArgs) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasAnimatedDrawEventArgsFactory = __uuidof(ICanvasAnimatedDrawEventArgsFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *canvasDrawingSession,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation timingInformation,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs **animatedControlDrawEventArgs);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_Create(This,canvasDrawingSession,timingInformation,animatedControlDrawEventArgs)	\
    ( (This)->lpVtbl -> Create(This,canvasDrawingSession,timingInformation,animatedControlDrawEventArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0295 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0295 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0295_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0295_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("BC01FF4D-FF6C-4D4D-A9E9-8EEB2139F23F")
                            ICanvasAnimatedDrawEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DrawingSession( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timing( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasAnimatedDrawEventArgs = __uuidof(ICanvasAnimatedDrawEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_get_DrawingSession(This,value)	\
    ( (This)->lpVtbl -> get_DrawingSession(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_get_Timing(This,value)	\
    ( (This)->lpVtbl -> get_Timing(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0296 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0296 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0296_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0296_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5646 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5646 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5646_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5646_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0297 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0297 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0297_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0297_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a29acd34-5ab2-50ff-b02d-e6737195de24")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0298 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */


/* interface __MIDL_itf_Canvas2Eabi_0000_0298 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0298_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0298_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5647 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5647 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5647_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5647_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0299 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0299 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0299_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0299_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f3505553-11e9-548c-80b6-33e56d2e673b")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0300 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs */


/* interface __MIDL_itf_Canvas2Eabi_0000_0300 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0300_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0300_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5648 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5648 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5648_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5648_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0301 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0301 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0301_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0301_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00ddd999-594e-5c0f-b4a0-52b01171dcd6")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0302 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs */


/* interface __MIDL_itf_Canvas2Eabi_0000_0302 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0302_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0302_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5649 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5649 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5649_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5649_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0303 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0303 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0303_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0303_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("17e87476-4ea7-5920-a49e-a7a9e383c7dc")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl *sender,
            /* [in] */ IInspectable *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl *sender,
            /* [in] */ IInspectable *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0304 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0304 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0304_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0304_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("9BD47D0D-D57D-43B7-82CB-489CC566E887")
                            ICanvasAnimatedControl : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE add_CreateResources( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_CreateResources( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_Update( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_Update( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_Draw( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_Draw( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_GameLoopStarting( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_GameLoopStarting( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_GameLoopStopped( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_GameLoopStopped( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadyToDraw( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IsFixedTimeStep( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsFixedTimeStep( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TargetElapsedTime( 
                                    /* [in] */ ABI::Windows::Foundation::TimeSpan value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TargetElapsedTime( 
                                    /* [out][retval] */ ABI::Windows::Foundation::TimeSpan *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Paused( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Paused( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClearColor( 
                                    /* [in] */ ABI::Windows::UI::Color value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClearColor( 
                                    /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                    /* [out][retval] */ ABI::Windows::Foundation::Size *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Invalidate( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ResetElapsedTime( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateCoreIndependentInputSource( 
                                    /* [in] */ ABI::Windows::UI::Core::CoreInputDeviceTypes deviceTypes,
                                    /* [out][retval] */ ABI::Windows::UI::Core::ICoreInputSourceBase **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE RemoveFromVisualTree( void) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasGameLoopThreadAccess( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE RunOnGameLoopThreadAsync( 
                                    /* [in] */ ABI::Windows::UI::Core::IDispatchedHandler *agileCallback,
                                    /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UseSharedDevice( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UseSharedDevice( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ForceSoftwareRenderer( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ForceSoftwareRenderer( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CustomDevice( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CustomDevice( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DpiScale( 
                                    /* [out][retval] */ float *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DpiScale( 
                                    /* [in] */ float ratio) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasAnimatedControl = __uuidof(ICanvasAnimatedControl);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *add_CreateResources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_CreateResources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_Update )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_Update )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_Draw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_Draw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_GameLoopStarting )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_GameLoopStarting )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_GameLoopStopped )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_GameLoopStopped )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ EventRegistrationToken token);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadyToDraw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsFixedTimeStep )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsFixedTimeStep )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TargetElapsedTime )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CTimeSpan value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TargetElapsedTime )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CTimeSpan *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Paused )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Paused )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClearColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClearColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *value);
        
        HRESULT ( STDMETHODCALLTYPE *Invalidate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *ResetElapsedTime )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCoreIndependentInputSource )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CCore_CCoreInputDeviceTypes deviceTypes,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveFromVisualTree )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasGameLoopThreadAccess )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnGameLoopThreadAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CCore_CIDispatchedHandler *agileCallback,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DpiScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DpiScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ float ratio);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControlVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_CreateResources(This,value,token)	\
    ( (This)->lpVtbl -> add_CreateResources(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_CreateResources(This,token)	\
    ( (This)->lpVtbl -> remove_CreateResources(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_Update(This,value,token)	\
    ( (This)->lpVtbl -> add_Update(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_Update(This,token)	\
    ( (This)->lpVtbl -> remove_Update(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_Draw(This,value,token)	\
    ( (This)->lpVtbl -> add_Draw(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_Draw(This,token)	\
    ( (This)->lpVtbl -> remove_Draw(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_GameLoopStarting(This,value,token)	\
    ( (This)->lpVtbl -> add_GameLoopStarting(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_GameLoopStarting(This,token)	\
    ( (This)->lpVtbl -> remove_GameLoopStarting(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_GameLoopStopped(This,value,token)	\
    ( (This)->lpVtbl -> add_GameLoopStopped(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_GameLoopStopped(This,token)	\
    ( (This)->lpVtbl -> remove_GameLoopStopped(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_ReadyToDraw(This,value)	\
    ( (This)->lpVtbl -> get_ReadyToDraw(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_IsFixedTimeStep(This,value)	\
    ( (This)->lpVtbl -> put_IsFixedTimeStep(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_IsFixedTimeStep(This,value)	\
    ( (This)->lpVtbl -> get_IsFixedTimeStep(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_TargetElapsedTime(This,value)	\
    ( (This)->lpVtbl -> put_TargetElapsedTime(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_TargetElapsedTime(This,value)	\
    ( (This)->lpVtbl -> get_TargetElapsedTime(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_Paused(This,value)	\
    ( (This)->lpVtbl -> put_Paused(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_Paused(This,value)	\
    ( (This)->lpVtbl -> get_Paused(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_ClearColor(This,value)	\
    ( (This)->lpVtbl -> put_ClearColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_ClearColor(This,value)	\
    ( (This)->lpVtbl -> get_ClearColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_Size(This,value)	\
    ( (This)->lpVtbl -> get_Size(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_Invalidate(This)	\
    ( (This)->lpVtbl -> Invalidate(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_ResetElapsedTime(This)	\
    ( (This)->lpVtbl -> ResetElapsedTime(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_CreateCoreIndependentInputSource(This,deviceTypes,returnValue)	\
    ( (This)->lpVtbl -> CreateCoreIndependentInputSource(This,deviceTypes,returnValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_RemoveFromVisualTree(This)	\
    ( (This)->lpVtbl -> RemoveFromVisualTree(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_HasGameLoopThreadAccess(This,value)	\
    ( (This)->lpVtbl -> get_HasGameLoopThreadAccess(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_RunOnGameLoopThreadAsync(This,agileCallback,asyncAction)	\
    ( (This)->lpVtbl -> RunOnGameLoopThreadAsync(This,agileCallback,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_UseSharedDevice(This,value)	\
    ( (This)->lpVtbl -> get_UseSharedDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_UseSharedDevice(This,value)	\
    ( (This)->lpVtbl -> put_UseSharedDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> get_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> put_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_CustomDevice(This,value)	\
    ( (This)->lpVtbl -> get_CustomDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_CustomDevice(This,value)	\
    ( (This)->lpVtbl -> put_CustomDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_DpiScale(This,value)	\
    ( (This)->lpVtbl -> get_DpiScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_DpiScale(This,ratio)	\
    ( (This)->lpVtbl -> put_DpiScale(This,ratio) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0305 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason
    {
        CanvasCreateResourcesReason_FirstTime	= 0,
        CanvasCreateResourcesReason_NewDevice	= ( CanvasCreateResourcesReason_FirstTime + 1 ) ,
        CanvasCreateResourcesReason_DpiChanged	= ( CanvasCreateResourcesReason_NewDevice + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0305 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM CanvasCreateResourcesReason
                        {
                            FirstTime	= 0,
                            NewDevice	= ( FirstTime + 1 ) ,
                            DpiChanged	= ( NewDevice + 1 ) 
                        } ;

                    const MIDL_ENUM CanvasCreateResourcesReason CanvasCreateResourcesReason_FirstTime = CanvasCreateResourcesReason::FirstTime;
                    const MIDL_ENUM CanvasCreateResourcesReason CanvasCreateResourcesReason_NewDevice = CanvasCreateResourcesReason::NewDevice;
                    const MIDL_ENUM CanvasCreateResourcesReason CanvasCreateResourcesReason_DpiChanged = CanvasCreateResourcesReason::DpiChanged;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    
                    typedef MIDL_ENUM CanvasCreateResourcesReason CanvasCreateResourcesReason;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0305_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0305_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgsFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        
                        MIDL_INTERFACE("3A21C766-0781-4389-BBC3-86B1F5022AF1")
                        ICanvasCreateResourcesEventArgsFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason createResourcesReason,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs **CreateResourcesEventArgs) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasCreateResourcesEventArgsFactory = __uuidof(ICanvasCreateResourcesEventArgsFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason createResourcesReason,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs **CreateResourcesEventArgs);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_Create(This,createResourcesReason,CreateResourcesEventArgs)	\
    ( (This)->lpVtbl -> Create(This,createResourcesReason,CreateResourcesEventArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0306 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgs[] = L"Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0306 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0306_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0306_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        
                        MIDL_INTERFACE("EDC52108-F6BA-4A09-9FA3-10C97A24E49A")
                        ICanvasCreateResourcesEventArgs : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reason( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE TrackAsyncAction( 
                                /* [in] */ ABI::Windows::Foundation::IAsyncAction *action) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetTrackedAction( 
                                /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **action) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasCreateResourcesEventArgs = __uuidof(ICanvasCreateResourcesEventArgs);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reason )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason *value);
        
        HRESULT ( STDMETHODCALLTYPE *TrackAsyncAction )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CIAsyncAction *action);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrackedAction )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **action);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_get_Reason(This,value)	\
    ( (This)->lpVtbl -> get_Reason(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_TrackAsyncAction(This,action)	\
    ( (This)->lpVtbl -> TrackAsyncAction(This,action) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_GetTrackedAction(This,action)	\
    ( (This)->lpVtbl -> GetTrackedAction(This,action) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0307 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs[] = L"Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0307 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0307_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0307_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgsFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("7299D72C-F8E4-4A2F-9E30-7CDFCCF31C44")
                            ICanvasDrawEventArgsFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE Create( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *canvasDrawingSession,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs **drawEventArgs) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasDrawEventArgsFactory = __uuidof(ICanvasDrawEventArgsFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *canvasDrawingSession,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs **drawEventArgs);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_Create(This,canvasDrawingSession,drawEventArgs)	\
    ( (This)->lpVtbl -> Create(This,canvasDrawingSession,drawEventArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0308 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0308 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0308_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0308_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("FB86169F-25D4-4551-BD8F-214BEAF0AC24")
                            ICanvasDrawEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DrawingSession( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasDrawEventArgs = __uuidof(ICanvasDrawEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_get_DrawingSession(This,value)	\
    ( (This)->lpVtbl -> get_DrawingSession(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0309 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0309 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0309_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0309_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5650 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5650 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5650_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5650_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0310 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0310 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0310_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0310_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ffcd91a9-b0f6-5e59-b815-0581129240e6")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0311 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */


/* interface __MIDL_itf_Canvas2Eabi_0000_0311 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0311_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0311_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5651 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5651 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5651_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5651_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0312 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0312 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0312_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0312_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6b0b7674-c32a-59f5-ba42-79cd2fd7f023")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0313 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0313 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0313_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0313_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("F006E06D-79DB-484F-B898-479CF069C0F5")
                            ICanvasControl : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE add_CreateResources( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_CreateResources( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadyToDraw( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_Draw( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_Draw( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClearColor( 
                                    /* [in] */ ABI::Windows::UI::Color value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClearColor( 
                                    /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Invalidate( void) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                    /* [out][retval] */ ABI::Windows::Foundation::Size *size) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE RemoveFromVisualTree( void) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UseSharedDevice( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UseSharedDevice( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ForceSoftwareRenderer( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ForceSoftwareRenderer( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CustomDevice( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CustomDevice( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DpiScale( 
                                    /* [out][retval] */ float *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DpiScale( 
                                    /* [in] */ float ratio) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasControl = __uuidof(ICanvasControl);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *add_CreateResources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_CreateResources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ EventRegistrationToken token);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadyToDraw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_Draw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_Draw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ EventRegistrationToken token);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClearColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClearColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        HRESULT ( STDMETHODCALLTYPE *Invalidate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *size);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveFromVisualTree )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DpiScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DpiScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ float ratio);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_add_CreateResources(This,value,token)	\
    ( (This)->lpVtbl -> add_CreateResources(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_remove_CreateResources(This,token)	\
    ( (This)->lpVtbl -> remove_CreateResources(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_ReadyToDraw(This,value)	\
    ( (This)->lpVtbl -> get_ReadyToDraw(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_add_Draw(This,value,token)	\
    ( (This)->lpVtbl -> add_Draw(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_remove_Draw(This,token)	\
    ( (This)->lpVtbl -> remove_Draw(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_ClearColor(This,value)	\
    ( (This)->lpVtbl -> put_ClearColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_ClearColor(This,value)	\
    ( (This)->lpVtbl -> get_ClearColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_Invalidate(This)	\
    ( (This)->lpVtbl -> Invalidate(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_RemoveFromVisualTree(This)	\
    ( (This)->lpVtbl -> RemoveFromVisualTree(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_UseSharedDevice(This,value)	\
    ( (This)->lpVtbl -> get_UseSharedDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_UseSharedDevice(This,value)	\
    ( (This)->lpVtbl -> put_UseSharedDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> get_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> put_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_CustomDevice(This,value)	\
    ( (This)->lpVtbl -> get_CustomDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_CustomDevice(This,value)	\
    ( (This)->lpVtbl -> put_CustomDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_DpiScale(This,value)	\
    ( (This)->lpVtbl -> get_DpiScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_DpiScale(This,ratio)	\
    ( (This)->lpVtbl -> put_DpiScale(This,ratio) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0314 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasSwapChainPanel;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasSwapChainPanel[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0314 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0314_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0314_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("DBDCCB96-147E-4A82-AF3A-C91C7800DAA7")
                            ICanvasSwapChainPanel : public IInspectable
                            {
                            public:
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SwapChain( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SwapChain( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE RemoveFromVisualTree( void) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasSwapChainPanel = __uuidof(ICanvasSwapChainPanel);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SwapChain )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SwapChain )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **value);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveFromVisualTree )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanelVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_put_SwapChain(This,value)	\
    ( (This)->lpVtbl -> put_SwapChain(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_get_SwapChain(This,value)	\
    ( (This)->lpVtbl -> get_SwapChain(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_RemoveFromVisualTree(This)	\
    ( (This)->lpVtbl -> RemoveFromVisualTree(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0315 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0315 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0315_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0315_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("2FE755A1-307A-4623-9250-29590485BDB6")
                            ICanvasVirtualImageSourceFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateWithSize( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                                    /* [in] */ ABI::Windows::Foundation::Size size,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource **imageSource) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeight( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource **imageSource) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpi( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [in] */ float dpi,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource **imageSource) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpiAndAlphaMode( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [in] */ float dpi,
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource **imageSource) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasVirtualImageSourceFactory = __uuidof(ICanvasVirtualImageSourceFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize size,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource **imageSource);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource **imageSource);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource **imageSource);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpiAndAlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource **imageSource);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_CreateWithSize(This,resourceCreator,size,imageSource)	\
    ( (This)->lpVtbl -> CreateWithSize(This,resourceCreator,size,imageSource) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_CreateWithWidthAndHeight(This,resourceCreator,width,height,imageSource)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeight(This,resourceCreator,width,height,imageSource) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,imageSource)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,imageSource) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_CreateWithWidthAndHeightAndDpiAndAlphaMode(This,resourceCreator,width,height,dpi,alphaMode,imageSource)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpiAndAlphaMode(This,resourceCreator,width,height,dpi,alphaMode,imageSource) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5652 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5652 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5652_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5652_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0317 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0317 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0317_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0317_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fed1b996-f368-58b3-bccd-8ebacf6611b2")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0318 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0318 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0318_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0318_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("DF342987-4FE6-4BCD-B885-2AD3E6EF9FCE")
                            ICanvasVirtualImageSource : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                    /* [out][retval] */ ABI::Windows::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource **value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                                    /* [in] */ ABI::Windows::UI::Color clearColor,
                                    /* [in] */ ABI::Windows::Foundation::Rect updateRectangle,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE SuspendDrawingSession( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ResumeDrawingSession( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Invalidate( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE InvalidateRegion( 
                                    /* [in] */ ABI::Windows::Foundation::Rect region) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE RaiseRegionsInvalidatedIfAny( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_RegionsInvalidated( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_RegionsInvalidated( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ResizeWithSize( 
                                    /* [in] */ ABI::Windows::Foundation::Size size) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ResizeWithWidthAndHeight( 
                                    /* [in] */ float width,
                                    /* [in] */ float height) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ResizeWithWidthAndHeightAndDpi( 
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [in] */ float dpi) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Recreate( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                    /* [out][retval] */ ABI::Windows::Foundation::Size *size) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SizeInPixels( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::BitmapSize *size) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasVirtualImageSource = __uuidof(ICanvasVirtualImageSource);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSource **value);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor clearColor,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect updateRectangle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *SuspendDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *ResumeDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *Invalidate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *InvalidateRegion )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect region);
        
        HRESULT ( STDMETHODCALLTYPE *RaiseRegionsInvalidatedIfAny )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *add_RegionsInvalidated )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_RegionsInvalidated )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeWithSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize size);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeWithWidthAndHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ float width,
            /* [in] */ float height);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeWithWidthAndHeightAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi);
        
        HRESULT ( STDMETHODCALLTYPE *Recreate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_Source(This,value)	\
    ( (This)->lpVtbl -> get_Source(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_CreateDrawingSession(This,clearColor,updateRectangle,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,clearColor,updateRectangle,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_SuspendDrawingSession(This,drawingSession)	\
    ( (This)->lpVtbl -> SuspendDrawingSession(This,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ResumeDrawingSession(This,drawingSession)	\
    ( (This)->lpVtbl -> ResumeDrawingSession(This,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_Invalidate(This)	\
    ( (This)->lpVtbl -> Invalidate(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_InvalidateRegion(This,region)	\
    ( (This)->lpVtbl -> InvalidateRegion(This,region) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_RaiseRegionsInvalidatedIfAny(This)	\
    ( (This)->lpVtbl -> RaiseRegionsInvalidatedIfAny(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_add_RegionsInvalidated(This,value,token)	\
    ( (This)->lpVtbl -> add_RegionsInvalidated(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_remove_RegionsInvalidated(This,token)	\
    ( (This)->lpVtbl -> remove_RegionsInvalidated(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ResizeWithSize(This,size)	\
    ( (This)->lpVtbl -> ResizeWithSize(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ResizeWithWidthAndHeight(This,width,height)	\
    ( (This)->lpVtbl -> ResizeWithWidthAndHeight(This,width,height) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ResizeWithWidthAndHeightAndDpi(This,width,height,dpi)	\
    ( (This)->lpVtbl -> ResizeWithWidthAndHeightAndDpi(This,width,height,dpi) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_Recreate(This,resourceCreator)	\
    ( (This)->lpVtbl -> Recreate(This,resourceCreator) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_SizeInPixels(This,size)	\
    ( (This)->lpVtbl -> get_SizeInPixels(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0319 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasRegionsInvalidatedEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0319 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0319_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0319_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("3A21A204-F52F-4E7A-9B3F-94669819D981")
                            ICanvasRegionsInvalidatedEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InvalidatedRegions( 
                                    /* [out] */ UINT32 *count,
                                    /* [out][size_is][size_is][retval] */ ABI::Windows::Foundation::Rect **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VisibleRegion( 
                                    /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasRegionsInvalidatedEventArgs = __uuidof(ICanvasRegionsInvalidatedEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InvalidatedRegions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
            /* [out] */ UINT32 *count,
            /* [out][size_is][size_is][retval] */ __x_ABI_CWindows_CFoundation_CRect **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VisibleRegion )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_get_InvalidatedRegions(This,count,value)	\
    ( (This)->lpVtbl -> get_InvalidatedRegions(This,count,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_get_VisibleRegion(This,value)	\
    ( (This)->lpVtbl -> get_VisibleRegion(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0320 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0320 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0320_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0320_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5653 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5653 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5653_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5653_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0321 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0321 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0321_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0321_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("82c7431b-0f55-5f54-8dd8-f9a8327df123")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0322 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */


/* interface __MIDL_itf_Canvas2Eabi_0000_0322 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0322_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0322_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5654 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5654 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5654_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5654_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0323 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0323 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0323_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0323_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9a63a22f-5ad4-5195-beb6-9b73b4304443")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0324 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0324 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0324_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0324_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("3C2B5177-7C61-41D2-95AE-FCFC92FD617A")
                            ICanvasVirtualControl : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE add_CreateResources( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_CreateResources( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadyToDraw( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_RegionsInvalidated( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_RegionsInvalidated( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClearColor( 
                                    /* [in] */ ABI::Windows::UI::Color value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClearColor( 
                                    /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                                    /* [in] */ ABI::Windows::Foundation::Rect updateRectangle,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE SuspendDrawingSession( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ResumeDrawingSession( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Invalidate( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE InvalidateRegion( 
                                    /* [in] */ ABI::Windows::Foundation::Rect region) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                    /* [out][retval] */ ABI::Windows::Foundation::Size *size) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE RemoveFromVisualTree( void) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UseSharedDevice( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UseSharedDevice( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ForceSoftwareRenderer( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ForceSoftwareRenderer( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CustomDevice( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CustomDevice( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DpiScale( 
                                    /* [out][retval] */ float *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DpiScale( 
                                    /* [in] */ float ratio) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasVirtualControl = __uuidof(ICanvasVirtualControl);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *add_CreateResources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_CreateResources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ EventRegistrationToken token);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadyToDraw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_RegionsInvalidated )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_RegionsInvalidated )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ EventRegistrationToken token);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClearColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClearColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect updateRectangle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *SuspendDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *ResumeDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *Invalidate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *InvalidateRegion )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect region);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *size);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveFromVisualTree )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DpiScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DpiScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ float ratio);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControlVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_add_CreateResources(This,value,token)	\
    ( (This)->lpVtbl -> add_CreateResources(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_remove_CreateResources(This,token)	\
    ( (This)->lpVtbl -> remove_CreateResources(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_ReadyToDraw(This,value)	\
    ( (This)->lpVtbl -> get_ReadyToDraw(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_add_RegionsInvalidated(This,value,token)	\
    ( (This)->lpVtbl -> add_RegionsInvalidated(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_remove_RegionsInvalidated(This,token)	\
    ( (This)->lpVtbl -> remove_RegionsInvalidated(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_ClearColor(This,value)	\
    ( (This)->lpVtbl -> put_ClearColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_ClearColor(This,value)	\
    ( (This)->lpVtbl -> get_ClearColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_CreateDrawingSession(This,updateRectangle,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,updateRectangle,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_SuspendDrawingSession(This,drawingSession)	\
    ( (This)->lpVtbl -> SuspendDrawingSession(This,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_ResumeDrawingSession(This,drawingSession)	\
    ( (This)->lpVtbl -> ResumeDrawingSession(This,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_Invalidate(This)	\
    ( (This)->lpVtbl -> Invalidate(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_InvalidateRegion(This,region)	\
    ( (This)->lpVtbl -> InvalidateRegion(This,region) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_RemoveFromVisualTree(This)	\
    ( (This)->lpVtbl -> RemoveFromVisualTree(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_UseSharedDevice(This,value)	\
    ( (This)->lpVtbl -> get_UseSharedDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_UseSharedDevice(This,value)	\
    ( (This)->lpVtbl -> put_UseSharedDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> get_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> put_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_CustomDevice(This,value)	\
    ( (This)->lpVtbl -> get_CustomDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_CustomDevice(This,value)	\
    ( (This)->lpVtbl -> put_CustomDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_DpiScale(This,value)	\
    ( (This)->lpVtbl -> get_DpiScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_DpiScale(This,ratio)	\
    ( (This)->lpVtbl -> put_DpiScale(This,ratio) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0325 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics[] = L"Microsoft.Graphics.Canvas.UI.Composition.ICanvasCompositionStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0325 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0325_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0325_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Composition {
                            
                            MIDL_INTERFACE("162DEB43-1CF5-46F8-A0AF-356B23158F92")
                            ICanvasCompositionStatics : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateCompositionGraphicsDevice( 
                                    /* [in] */ ABI::Windows::UI::Composition::ICompositor *compositor,
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *canvasDevice,
                                    /* [out][retval] */ ABI::Windows::UI::Composition::ICompositionGraphicsDevice **graphicsDevice) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateCompositionSurfaceForSwapChain( 
                                    /* [in] */ ABI::Windows::UI::Composition::ICompositor *compositor,
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain *swapChain,
                                    /* [out][retval] */ ABI::Windows::UI::Composition::ICompositionSurface **compositionSurface) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE GetCanvasDevice( 
                                    /* [in] */ ABI::Windows::UI::Composition::ICompositionGraphicsDevice *graphicsDevice,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **canvasDevice) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE SetCanvasDevice( 
                                    /* [in] */ ABI::Windows::UI::Composition::ICompositionGraphicsDevice *graphicsDevice,
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *canvasDevice) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                                    /* [in] */ ABI::Windows::UI::Composition::ICompositionDrawingSurface *drawingSurface,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateDrawingSessionWithUpdateRect( 
                                    /* [in] */ ABI::Windows::UI::Composition::ICompositionDrawingSurface *drawingSurface,
                                    /* [in] */ ABI::Windows::Foundation::Rect updateRect,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateDrawingSessionWithUpdateRectAndDpi( 
                                    /* [in] */ ABI::Windows::UI::Composition::ICompositionDrawingSurface *drawingSurface,
                                    /* [in] */ ABI::Windows::Foundation::Rect updateRectInPixels,
                                    /* [in] */ float dpi,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Resize( 
                                    /* [in] */ ABI::Windows::UI::Composition::ICompositionDrawingSurface *drawingSurface,
                                    /* [in] */ ABI::Windows::Foundation::Size sizeInPixels) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasCompositionStatics = __uuidof(ICanvasCompositionStatics);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCompositionGraphicsDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
            /* [in] */ __x_ABI_CWindows_CUI_CComposition_CICompositor *compositor,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *canvasDevice,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CComposition_CICompositionGraphicsDevice **graphicsDevice);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCompositionSurfaceForSwapChain )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
            /* [in] */ __x_ABI_CWindows_CUI_CComposition_CICompositor *compositor,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain *swapChain,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CComposition_CICompositionSurface **compositionSurface);
        
        HRESULT ( STDMETHODCALLTYPE *GetCanvasDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
            /* [in] */ __x_ABI_CWindows_CUI_CComposition_CICompositionGraphicsDevice *graphicsDevice,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **canvasDevice);
        
        HRESULT ( STDMETHODCALLTYPE *SetCanvasDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
            /* [in] */ __x_ABI_CWindows_CUI_CComposition_CICompositionGraphicsDevice *graphicsDevice,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *canvasDevice);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
            /* [in] */ __x_ABI_CWindows_CUI_CComposition_CICompositionDrawingSurface *drawingSurface,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSessionWithUpdateRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
            /* [in] */ __x_ABI_CWindows_CUI_CComposition_CICompositionDrawingSurface *drawingSurface,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect updateRect,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSessionWithUpdateRectAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
            /* [in] */ __x_ABI_CWindows_CUI_CComposition_CICompositionDrawingSurface *drawingSurface,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect updateRectInPixels,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *Resize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
            /* [in] */ __x_ABI_CWindows_CUI_CComposition_CICompositionDrawingSurface *drawingSurface,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize sizeInPixels);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_CreateCompositionGraphicsDevice(This,compositor,canvasDevice,graphicsDevice)	\
    ( (This)->lpVtbl -> CreateCompositionGraphicsDevice(This,compositor,canvasDevice,graphicsDevice) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_CreateCompositionSurfaceForSwapChain(This,compositor,swapChain,compositionSurface)	\
    ( (This)->lpVtbl -> CreateCompositionSurfaceForSwapChain(This,compositor,swapChain,compositionSurface) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_GetCanvasDevice(This,graphicsDevice,canvasDevice)	\
    ( (This)->lpVtbl -> GetCanvasDevice(This,graphicsDevice,canvasDevice) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_SetCanvasDevice(This,graphicsDevice,canvasDevice)	\
    ( (This)->lpVtbl -> SetCanvasDevice(This,graphicsDevice,canvasDevice) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_CreateDrawingSession(This,drawingSurface,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,drawingSurface,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_CreateDrawingSessionWithUpdateRect(This,drawingSurface,updateRect,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSessionWithUpdateRect(This,drawingSurface,updateRect,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_CreateDrawingSessionWithUpdateRectAndDpi(This,drawingSurface,updateRectInPixels,dpi,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSessionWithUpdateRectAndDpi(This,drawingSurface,updateRectInPixels,dpi,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_Resize(This,drawingSurface,sizeInPixels)	\
    ( (This)->lpVtbl -> Resize(This,drawingSurface,sizeInPixels) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0326 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Composition_CanvasComposition_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Composition_CanvasComposition_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Composition_CanvasComposition[] = L"Microsoft.Graphics.Canvas.UI.Composition.CanvasComposition";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class PixelShaderEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping
    {
        SamplerCoordinateMapping_Unknown	= 0,
        SamplerCoordinateMapping_OneToOne	= ( SamplerCoordinateMapping_Unknown + 1 ) ,
        SamplerCoordinateMapping_Offset	= ( SamplerCoordinateMapping_OneToOne + 1 ) 
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0326 */
/* [local] */ 


#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM SamplerCoordinateMapping
                        {
                            Unknown	= 0,
                            OneToOne	= ( Unknown + 1 ) ,
                            Offset	= ( OneToOne + 1 ) 
                        } ;

                    const MIDL_ENUM SamplerCoordinateMapping SamplerCoordinateMapping_Unknown = SamplerCoordinateMapping::Unknown;
                    const MIDL_ENUM SamplerCoordinateMapping SamplerCoordinateMapping_OneToOne = SamplerCoordinateMapping::OneToOne;
                    const MIDL_ENUM SamplerCoordinateMapping SamplerCoordinateMapping_Offset = SamplerCoordinateMapping::Offset;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM SamplerCoordinateMapping SamplerCoordinateMapping;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0326_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0326_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("FC8C3C31-FA96-45E2-8B72-1741C65CEE8E")
                        IPixelShaderEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Properties( 
                                /* [out][retval] */ __FIMap_2_HSTRING_IInspectable **value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source1( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source2( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source3( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source4( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source5( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source6( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source7( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source8( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source1( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source2( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source3( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source4( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source5( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source6( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source7( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source8( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source1Mapping( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source2Mapping( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source3Mapping( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source4Mapping( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source5Mapping( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source6Mapping( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source7Mapping( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source8Mapping( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source1Mapping( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source2Mapping( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source3Mapping( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source4Mapping( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source5Mapping( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source6Mapping( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source7Mapping( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source8Mapping( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source1BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source2BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source3BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source4BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source5BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source6BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source7BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source8BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source1BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source2BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source3BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source4BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source5BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source6BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source7BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source8BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MaxSamplerOffset( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MaxSamplerOffset( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source1Interpolation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source2Interpolation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source3Interpolation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source4Interpolation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source5Interpolation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source6Interpolation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source7Interpolation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source8Interpolation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source1Interpolation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source2Interpolation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source3Interpolation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source4Interpolation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source5Interpolation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source6Interpolation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source7Interpolation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source8Interpolation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE IsSupported( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *device,
                                /* [out][retval] */ boolean *result) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IPixelShaderEffect = __uuidof(IPixelShaderEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __FIMap_2_HSTRING_IInspectable **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source1 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source2 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source3 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source4 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source5 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source6 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source7 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source8 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source1 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source2 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source3 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source4 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source5 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source6 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source7 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source8 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source1Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source2Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source3Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source4Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source5Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source6Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source7Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source8Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source1Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source2Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source3Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source4Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source5Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source6Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source7Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source8Mapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source1BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source2BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source3BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source4BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source5BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source6BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source7BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source8BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source1BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source2BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source3BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source4BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source5BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source6BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source7BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source8BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxSamplerOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaxSamplerOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source1Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source2Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source3Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source4Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source5Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source6Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source7Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source8Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source1Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source2Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source3Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source4Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source5Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source6Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source7Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source8Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        HRESULT ( STDMETHODCALLTYPE *IsSupported )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *device,
            /* [out][retval] */ boolean *result);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Properties(This,value)	\
    ( (This)->lpVtbl -> get_Properties(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source1(This,source)	\
    ( (This)->lpVtbl -> get_Source1(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source2(This,source)	\
    ( (This)->lpVtbl -> get_Source2(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source3(This,source)	\
    ( (This)->lpVtbl -> get_Source3(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source4(This,source)	\
    ( (This)->lpVtbl -> get_Source4(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source5(This,source)	\
    ( (This)->lpVtbl -> get_Source5(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source6(This,source)	\
    ( (This)->lpVtbl -> get_Source6(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source7(This,source)	\
    ( (This)->lpVtbl -> get_Source7(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source8(This,source)	\
    ( (This)->lpVtbl -> get_Source8(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source1(This,source)	\
    ( (This)->lpVtbl -> put_Source1(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source2(This,source)	\
    ( (This)->lpVtbl -> put_Source2(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source3(This,source)	\
    ( (This)->lpVtbl -> put_Source3(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source4(This,source)	\
    ( (This)->lpVtbl -> put_Source4(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source5(This,source)	\
    ( (This)->lpVtbl -> put_Source5(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source6(This,source)	\
    ( (This)->lpVtbl -> put_Source6(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source7(This,source)	\
    ( (This)->lpVtbl -> put_Source7(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source8(This,source)	\
    ( (This)->lpVtbl -> put_Source8(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source1Mapping(This,value)	\
    ( (This)->lpVtbl -> get_Source1Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source2Mapping(This,value)	\
    ( (This)->lpVtbl -> get_Source2Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source3Mapping(This,value)	\
    ( (This)->lpVtbl -> get_Source3Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source4Mapping(This,value)	\
    ( (This)->lpVtbl -> get_Source4Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source5Mapping(This,value)	\
    ( (This)->lpVtbl -> get_Source5Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source6Mapping(This,value)	\
    ( (This)->lpVtbl -> get_Source6Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source7Mapping(This,value)	\
    ( (This)->lpVtbl -> get_Source7Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source8Mapping(This,value)	\
    ( (This)->lpVtbl -> get_Source8Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source1Mapping(This,value)	\
    ( (This)->lpVtbl -> put_Source1Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source2Mapping(This,value)	\
    ( (This)->lpVtbl -> put_Source2Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source3Mapping(This,value)	\
    ( (This)->lpVtbl -> put_Source3Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source4Mapping(This,value)	\
    ( (This)->lpVtbl -> put_Source4Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source5Mapping(This,value)	\
    ( (This)->lpVtbl -> put_Source5Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source6Mapping(This,value)	\
    ( (This)->lpVtbl -> put_Source6Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source7Mapping(This,value)	\
    ( (This)->lpVtbl -> put_Source7Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source8Mapping(This,value)	\
    ( (This)->lpVtbl -> put_Source8Mapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source1BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_Source1BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source2BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_Source2BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source3BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_Source3BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source4BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_Source4BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source5BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_Source5BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source6BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_Source6BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source7BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_Source7BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source8BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_Source8BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source1BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_Source1BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source2BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_Source2BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source3BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_Source3BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source4BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_Source4BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source5BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_Source5BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source6BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_Source6BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source7BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_Source7BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source8BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_Source8BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_MaxSamplerOffset(This,value)	\
    ( (This)->lpVtbl -> get_MaxSamplerOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_MaxSamplerOffset(This,value)	\
    ( (This)->lpVtbl -> put_MaxSamplerOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source1Interpolation(This,value)	\
    ( (This)->lpVtbl -> get_Source1Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source2Interpolation(This,value)	\
    ( (This)->lpVtbl -> get_Source2Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source3Interpolation(This,value)	\
    ( (This)->lpVtbl -> get_Source3Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source4Interpolation(This,value)	\
    ( (This)->lpVtbl -> get_Source4Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source5Interpolation(This,value)	\
    ( (This)->lpVtbl -> get_Source5Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source6Interpolation(This,value)	\
    ( (This)->lpVtbl -> get_Source6Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source7Interpolation(This,value)	\
    ( (This)->lpVtbl -> get_Source7Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source8Interpolation(This,value)	\
    ( (This)->lpVtbl -> get_Source8Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source1Interpolation(This,value)	\
    ( (This)->lpVtbl -> put_Source1Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source2Interpolation(This,value)	\
    ( (This)->lpVtbl -> put_Source2Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source3Interpolation(This,value)	\
    ( (This)->lpVtbl -> put_Source3Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source4Interpolation(This,value)	\
    ( (This)->lpVtbl -> put_Source4Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source5Interpolation(This,value)	\
    ( (This)->lpVtbl -> put_Source5Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source6Interpolation(This,value)	\
    ( (This)->lpVtbl -> put_Source6Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source7Interpolation(This,value)	\
    ( (This)->lpVtbl -> put_Source7Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source8Interpolation(This,value)	\
    ( (This)->lpVtbl -> put_Source8Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_IsSupported(This,device,result)	\
    ( (This)->lpVtbl -> IsSupported(This,device,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0327 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffectFactory[] = L"Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0327 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0327_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0327_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffectFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("9D1727E5-489D-4ABC-B129-5361E3534AF4")
                        IPixelShaderEffectFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ UINT32 shaderCodeCount,
                                /* [in][size_is] */ BYTE *shaderCode,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect **effect) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IPixelShaderEffectFactory = __uuidof(IPixelShaderEffectFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This,
            /* [in] */ UINT32 shaderCodeCount,
            /* [in][size_is] */ BYTE *shaderCode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect **effect);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_Create(This,shaderCodeCount,shaderCode,effect)	\
    ( (This)->lpVtbl -> Create(This,shaderCodeCount,shaderCode,effect) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0328 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PixelShaderEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PixelShaderEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PixelShaderEffect[] = L"Microsoft.Graphics.Canvas.Effects.PixelShaderEffect";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0328 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0328_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0328_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5655 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5655 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5655_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5655_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0329 */
/* [local] */ 

#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable
#define DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0329 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0329_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0329_v0_0_s_ifspec;

#ifndef ____FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
#define ____FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

/* interface __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("696a5329-ed0f-57cc-9379-ff81e8235bcc")
    __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_HSTRING_IInspectable **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_HSTRING_IInspectable *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_HSTRING_IInspectable **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_HSTRING_IInspectable **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ __FIKeyValuePair_2_HSTRING_IInspectable *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_HSTRING_IInspectable **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0330 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable */


/* interface __MIDL_itf_Canvas2Eabi_0000_0330 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0330_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0330_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5656 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5656 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5656_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5656_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0331 */
/* [local] */ 

#ifndef DEF___FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable
#define DEF___FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0331 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0331_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0331_v0_0_s_ifspec;

#ifndef ____FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__
#define ____FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

/* interface __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable */
/* [unique][uuid][object] */ 



/* interface __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7b624b94-16ce-554e-89e4-6fa8d769da11")
    __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_HSTRING_IInspectable **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __FIKeyValuePair_2_HSTRING_IInspectable *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_HSTRING_IInspectable *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_HSTRING_IInspectable *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ __FIKeyValuePair_2_HSTRING_IInspectable *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_HSTRING_IInspectable **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_HSTRING_IInspectable **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __FIKeyValuePair_2_HSTRING_IInspectable **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [retval][out] */ __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ __FIKeyValuePair_2_HSTRING_IInspectable *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_HSTRING_IInspectable *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ unsigned int index,
            /* [in] */ __FIKeyValuePair_2_HSTRING_IInspectable *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ __FIKeyValuePair_2_HSTRING_IInspectable *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __FIKeyValuePair_2_HSTRING_IInspectable **items,
            /* [retval][out] */ unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __FIKeyValuePair_2_HSTRING_IInspectable **value);
        
        END_INTERFACE
    } __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl;

    interface __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable
    {
        CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0332 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable */


/* interface __MIDL_itf_Canvas2Eabi_0000_0332 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0332_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0332_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5657 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5657 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5657_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5657_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0333 */
/* [local] */ 

#ifndef DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector2
#define DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector2
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0333 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0333_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0333_v0_0_s_ifspec;

#ifndef ____FIReference_1_Windows__CFoundation__CNumerics__CVector2_INTERFACE_DEFINED__
#define ____FIReference_1_Windows__CFoundation__CNumerics__CVector2_INTERFACE_DEFINED__

/* interface __FIReference_1_Windows__CFoundation__CNumerics__CVector2 */
/* [unique][uuid][object] */ 



/* interface __FIReference_1_Windows__CFoundation__CNumerics__CVector2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReference_1_Windows__CFoundation__CNumerics__CVector2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("48f6a69e-8465-57ae-9400-9764087f65ad")
    __FIReference_1_Windows__CFoundation__CNumerics__CVector2 : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ struct ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReference_1_Windows__CFoundation__CNumerics__CVector2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector2 * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector2 * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector2 * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector2 * This,
            /* [retval][out] */ struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        END_INTERFACE
    } __FIReference_1_Windows__CFoundation__CNumerics__CVector2Vtbl;

    interface __FIReference_1_Windows__CFoundation__CNumerics__CVector2
    {
        CONST_VTBL struct __FIReference_1_Windows__CFoundation__CNumerics__CVector2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReference_1_Windows__CFoundation__CNumerics__CVector2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CVector2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CVector2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReference_1_Windows__CFoundation__CNumerics__CVector2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CVector2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CVector2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReference_1_Windows__CFoundation__CNumerics__CVector2_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReference_1_Windows__CFoundation__CNumerics__CVector2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0334 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector2 */


/* interface __MIDL_itf_Canvas2Eabi_0000_0334 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0334_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0334_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5658 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5658 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5658_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5658_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0335 */
/* [local] */ 

#ifndef DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector4
#define DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector4
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0335 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0335_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0335_v0_0_s_ifspec;

#ifndef ____FIReference_1_Windows__CFoundation__CNumerics__CVector4_INTERFACE_DEFINED__
#define ____FIReference_1_Windows__CFoundation__CNumerics__CVector4_INTERFACE_DEFINED__

/* interface __FIReference_1_Windows__CFoundation__CNumerics__CVector4 */
/* [unique][uuid][object] */ 



/* interface __FIReference_1_Windows__CFoundation__CNumerics__CVector4 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReference_1_Windows__CFoundation__CNumerics__CVector4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a5e843c9-ed20-5339-8f8d-9fe404cf3654")
    __FIReference_1_Windows__CFoundation__CNumerics__CVector4 : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ struct ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReference_1_Windows__CFoundation__CNumerics__CVector4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This,
            /* [retval][out] */ struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        END_INTERFACE
    } __FIReference_1_Windows__CFoundation__CNumerics__CVector4Vtbl;

    interface __FIReference_1_Windows__CFoundation__CNumerics__CVector4
    {
        CONST_VTBL struct __FIReference_1_Windows__CFoundation__CNumerics__CVector4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReference_1_Windows__CFoundation__CNumerics__CVector4_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0336 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector4 */


/* interface __MIDL_itf_Canvas2Eabi_0000_0336 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0336_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0336_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5659 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5659 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5659_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5659_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0337 */
/* [local] */ 

#ifndef DEF___FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2
#define DEF___FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0337 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0337_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0337_v0_0_s_ifspec;

#ifndef ____FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_INTERFACE_DEFINED__
#define ____FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_INTERFACE_DEFINED__

/* interface __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 */
/* [unique][uuid][object] */ 



/* interface __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("76358cfd-2cbd-525b-a49e-90ee18247b71")
    __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ struct ABI::Windows::Foundation::Numerics::Matrix3x2 *value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This,
            /* [retval][out] */ struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 *value);
        
        END_INTERFACE
    } __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2Vtbl;

    interface __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2
    {
        CONST_VTBL struct __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0338 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 */


/* interface __MIDL_itf_Canvas2Eabi_0000_0338 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0338_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0338_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5660 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5660 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5660_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5660_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0339 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0339 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0339_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0339_v0_0_s_ifspec;

#ifndef ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_INTERFACE_DEFINED__
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_INTERFACE_DEFINED__

/* interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 */
/* [unique][uuid][object] */ 



/* interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("29df2178-ffdb-563e-88db-3869a007305e")
    __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ struct ABI::Windows::Foundation::Numerics::Vector2 **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This,
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 **value);
        
        END_INTERFACE
    } __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2Vtbl;

    interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2
    {
        CONST_VTBL struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_get_Value(This,length,value)	\
    ( (This)->lpVtbl -> get_Value(This,length,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0340 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 */


/* interface __MIDL_itf_Canvas2Eabi_0000_0340 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0340_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0340_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5661 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5661 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5661_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5661_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0341 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0341 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0341_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0341_v0_0_s_ifspec;

#ifndef ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_INTERFACE_DEFINED__
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_INTERFACE_DEFINED__

/* interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 */
/* [unique][uuid][object] */ 



/* interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa1a35fa-0b4e-5248-bd79-ffd47cfe4027")
    __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ struct ABI::Windows::Foundation::Numerics::Vector3 **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This,
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 **value);
        
        END_INTERFACE
    } __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3Vtbl;

    interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3
    {
        CONST_VTBL struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_get_Value(This,length,value)	\
    ( (This)->lpVtbl -> get_Value(This,length,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0342 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 */


/* interface __MIDL_itf_Canvas2Eabi_0000_0342 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0342_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0342_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5662 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5662 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5662_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5662_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0343 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0343 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0343_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0343_v0_0_s_ifspec;

#ifndef ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_INTERFACE_DEFINED__
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_INTERFACE_DEFINED__

/* interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 */
/* [unique][uuid][object] */ 



/* interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("68757250-5849-5772-90e3-aadb4c970bff")
    __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ struct ABI::Windows::Foundation::Numerics::Vector4 **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This,
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 **value);
        
        END_INTERFACE
    } __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4Vtbl;

    interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4
    {
        CONST_VTBL struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_get_Value(This,length,value)	\
    ( (This)->lpVtbl -> get_Value(This,length,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0344 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 */


/* interface __MIDL_itf_Canvas2Eabi_0000_0344 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0344_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0344_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5663 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5663 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5663_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5663_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0345 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0345 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0345_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0345_v0_0_s_ifspec;

#ifndef ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_INTERFACE_DEFINED__
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_INTERFACE_DEFINED__

/* interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 */
/* [unique][uuid][object] */ 



/* interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a525d9ff-c09b-501a-a785-4d1ed9e102b8")
    __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ struct ABI::Windows::Foundation::Numerics::Matrix3x2 **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This,
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 **value);
        
        END_INTERFACE
    } __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2Vtbl;

    interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2
    {
        CONST_VTBL struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_get_Value(This,length,value)	\
    ( (This)->lpVtbl -> get_Value(This,length,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0346 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 */


/* interface __MIDL_itf_Canvas2Eabi_0000_0346 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0346_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0346_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5664 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5664 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5664_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5664_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0347 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0347 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0347_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0347_v0_0_s_ifspec;

#ifndef ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_INTERFACE_DEFINED__
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_INTERFACE_DEFINED__

/* interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 */
/* [unique][uuid][object] */ 



/* interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fc0d5a15-8f9d-5e8f-8828-aef2c2e25bad")
    __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ struct ABI::Windows::Foundation::Numerics::Matrix4x4 **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This,
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 **value);
        
        END_INTERFACE
    } __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4Vtbl;

    interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4
    {
        CONST_VTBL struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_get_Value(This,length,value)	\
    ( (This)->lpVtbl -> get_Value(This,length,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0348 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 */


/* interface __MIDL_itf_Canvas2Eabi_0000_0348 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0348_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0348_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5665 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5665 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5665_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5665_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0349 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_float
#define DEF___FIReferenceArray_1_float
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0349 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0349_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0349_v0_0_s_ifspec;

#ifndef ____FIReferenceArray_1_float_INTERFACE_DEFINED__
#define ____FIReferenceArray_1_float_INTERFACE_DEFINED__

/* interface __FIReferenceArray_1_float */
/* [unique][uuid][object] */ 



/* interface __FIReferenceArray_1_float */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReferenceArray_1_float;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6ab1ea83-cb41-5f99-92cc-23bd4336a1fb")
    __FIReferenceArray_1_float : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ float **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReferenceArray_1_floatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReferenceArray_1_float * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReferenceArray_1_float * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReferenceArray_1_float * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReferenceArray_1_float * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReferenceArray_1_float * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReferenceArray_1_float * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReferenceArray_1_float * This,
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ float **value);
        
        END_INTERFACE
    } __FIReferenceArray_1_floatVtbl;

    interface __FIReferenceArray_1_float
    {
        CONST_VTBL struct __FIReferenceArray_1_floatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReferenceArray_1_float_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReferenceArray_1_float_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReferenceArray_1_float_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReferenceArray_1_float_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReferenceArray_1_float_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReferenceArray_1_float_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReferenceArray_1_float_get_Value(This,length,value)	\
    ( (This)->lpVtbl -> get_Value(This,length,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReferenceArray_1_float_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0350 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReferenceArray_1_float */


/* interface __MIDL_itf_Canvas2Eabi_0000_0350 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0350_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0350_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5666 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5666 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5666_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5666_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0351 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_int
#define DEF___FIReferenceArray_1_int
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0351 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0351_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0351_v0_0_s_ifspec;

#ifndef ____FIReferenceArray_1_int_INTERFACE_DEFINED__
#define ____FIReferenceArray_1_int_INTERFACE_DEFINED__

/* interface __FIReferenceArray_1_int */
/* [unique][uuid][object] */ 



/* interface __FIReferenceArray_1_int */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReferenceArray_1_int;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a6d080a5-b087-5bc2-9a9f-5cd687b4d1f7")
    __FIReferenceArray_1_int : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ int **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReferenceArray_1_intVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReferenceArray_1_int * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReferenceArray_1_int * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReferenceArray_1_int * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReferenceArray_1_int * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReferenceArray_1_int * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReferenceArray_1_int * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReferenceArray_1_int * This,
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ int **value);
        
        END_INTERFACE
    } __FIReferenceArray_1_intVtbl;

    interface __FIReferenceArray_1_int
    {
        CONST_VTBL struct __FIReferenceArray_1_intVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReferenceArray_1_int_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReferenceArray_1_int_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReferenceArray_1_int_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReferenceArray_1_int_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReferenceArray_1_int_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReferenceArray_1_int_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReferenceArray_1_int_get_Value(This,length,value)	\
    ( (This)->lpVtbl -> get_Value(This,length,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReferenceArray_1_int_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0352 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReferenceArray_1_int */


/* interface __MIDL_itf_Canvas2Eabi_0000_0352 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0352_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0352_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5667 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5667 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5667_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5667_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0353 */
/* [local] */ 

#ifndef DEF___FIReferenceArray_1_boolean
#define DEF___FIReferenceArray_1_boolean
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0353 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0353_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0353_v0_0_s_ifspec;

#ifndef ____FIReferenceArray_1_boolean_INTERFACE_DEFINED__
#define ____FIReferenceArray_1_boolean_INTERFACE_DEFINED__

/* interface __FIReferenceArray_1_boolean */
/* [unique][uuid][object] */ 



/* interface __FIReferenceArray_1_boolean */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReferenceArray_1_boolean;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e8e72666-48cc-593f-ba85-2663496956e3")
    __FIReferenceArray_1_boolean : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ boolean **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReferenceArray_1_booleanVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReferenceArray_1_boolean * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReferenceArray_1_boolean * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReferenceArray_1_boolean * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReferenceArray_1_boolean * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReferenceArray_1_boolean * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReferenceArray_1_boolean * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReferenceArray_1_boolean * This,
            /* [out] */ UINT32 *length,
            /* [size_is][size_is][retval][out] */ boolean **value);
        
        END_INTERFACE
    } __FIReferenceArray_1_booleanVtbl;

    interface __FIReferenceArray_1_boolean
    {
        CONST_VTBL struct __FIReferenceArray_1_booleanVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReferenceArray_1_boolean_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReferenceArray_1_boolean_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReferenceArray_1_boolean_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReferenceArray_1_boolean_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReferenceArray_1_boolean_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReferenceArray_1_boolean_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReferenceArray_1_boolean_get_Value(This,length,value)	\
    ( (This)->lpVtbl -> get_Value(This,length,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReferenceArray_1_boolean_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0354 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReferenceArray_1_boolean */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ColorManagementProfile;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType
    {
        ColorManagementProfileType_Icc	= 0,
        ColorManagementProfileType_Simple	= 1,
        ColorManagementProfileType_Extended	= 2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma
    {
        ColorManagementGamma_G22	= 0,
        ColorManagementGamma_G10	= 1,
        ColorManagementGamma_G2084	= 2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile
    {
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 RedPrimary;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 GreenPrimary;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 BluePrimary;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 WhitePointXZ;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma Gamma;
    } ;
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile;

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace
    {
        ExtendedColorSpace_FullG22P709	= 0,
        ExtendedColorSpace_FullG10P709	= 1,
        ExtendedColorSpace_StudioG22P709	= 2,
        ExtendedColorSpace_StudioG22P2020	= 3,
        ExtendedColorSpace_FullG2084P2020	= 12,
        ExtendedColorSpace_StudioG2084P2020	= 14,
        ExtendedColorSpace_FullG22P2020	= 17,
        ExtendedColorSpace_Custom	= -1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace;


#endif /* end if !defined(__cplusplus) */


#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0354 */
/* [local] */ 


#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM ColorManagementProfileType
                        {
                            Icc	= 0,
                            Simple	= 1,
                            Extended	= 2
                        } ;

                    const MIDL_ENUM ColorManagementProfileType ColorManagementProfileType_Icc = ColorManagementProfileType::Icc;
                    const MIDL_ENUM ColorManagementProfileType ColorManagementProfileType_Simple = ColorManagementProfileType::Simple;
                    const MIDL_ENUM ColorManagementProfileType ColorManagementProfileType_Extended = ColorManagementProfileType::Extended;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM ColorManagementProfileType ColorManagementProfileType;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM ColorManagementGamma
                        {
                            G22	= 0,
                            G10	= 1,
                            G2084	= 2
                        } ;

                    const MIDL_ENUM ColorManagementGamma ColorManagementGamma_G22 = ColorManagementGamma::G22;
                    const MIDL_ENUM ColorManagementGamma ColorManagementGamma_G10 = ColorManagementGamma::G10;
                    const MIDL_ENUM ColorManagementGamma ColorManagementGamma_G2084 = ColorManagementGamma::G2084;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM ColorManagementGamma ColorManagementGamma;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    struct ColorManagementSimpleProfile
                        {
                        ABI::Windows::Foundation::Numerics::Vector2 RedPrimary;
                        ABI::Windows::Foundation::Numerics::Vector2 GreenPrimary;
                        ABI::Windows::Foundation::Numerics::Vector2 BluePrimary;
                        ABI::Windows::Foundation::Numerics::Vector2 WhitePointXZ;
                        ColorManagementGamma Gamma;
                        } ;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef struct ColorManagementSimpleProfile ColorManagementSimpleProfile;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM ExtendedColorSpace
                        {
                            FullG22P709	= 0,
                            FullG10P709	= 1,
                            StudioG22P709	= 2,
                            StudioG22P2020	= 3,
                            FullG2084P2020	= 12,
                            StudioG2084P2020	= 14,
                            FullG22P2020	= 17,
                            Custom	= -1
                        } ;

                    const MIDL_ENUM ExtendedColorSpace ExtendedColorSpace_FullG22P709 = ExtendedColorSpace::FullG22P709;
                    const MIDL_ENUM ExtendedColorSpace ExtendedColorSpace_FullG10P709 = ExtendedColorSpace::FullG10P709;
                    const MIDL_ENUM ExtendedColorSpace ExtendedColorSpace_StudioG22P709 = ExtendedColorSpace::StudioG22P709;
                    const MIDL_ENUM ExtendedColorSpace ExtendedColorSpace_StudioG22P2020 = ExtendedColorSpace::StudioG22P2020;
                    const MIDL_ENUM ExtendedColorSpace ExtendedColorSpace_FullG2084P2020 = ExtendedColorSpace::FullG2084P2020;
                    const MIDL_ENUM ExtendedColorSpace ExtendedColorSpace_StudioG2084P2020 = ExtendedColorSpace::StudioG2084P2020;
                    const MIDL_ENUM ExtendedColorSpace ExtendedColorSpace_FullG22P2020 = ExtendedColorSpace::FullG22P2020;
                    const MIDL_ENUM ExtendedColorSpace ExtendedColorSpace_Custom = ExtendedColorSpace::Custom;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM ExtendedColorSpace ExtendedColorSpace;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0354_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0354_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5668 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5668 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5668_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5668_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0355 */
/* [local] */ 

#ifndef DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile
#define DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0355 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0355_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0355_v0_0_s_ifspec;

#ifndef ____FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_INTERFACE_DEFINED__
#define ____FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_INTERFACE_DEFINED__

/* interface __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile */
/* [unique][uuid][object] */ 



/* interface __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("41db10c7-f02c-5d7f-a12e-4e05047388e7")
    __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ struct ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile *value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This,
            /* [retval][out] */ struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile *value);
        
        END_INTERFACE
    } __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileVtbl;

    interface __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile
    {
        CONST_VTBL struct __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0356 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementProfile";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0356 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0356_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0356_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("5123A56B-B199-47AB-AEBE-D308044423FE")
                        IColorManagementProfile : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorSpace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IccProfile( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ BYTE **valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SimpleProfile( 
                                /* [out][retval] */ __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile **value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ExtendedColorSpace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IColorManagementProfile = __uuidof(IColorManagementProfile);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IccProfile )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ BYTE **valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SimpleProfile )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
            /* [out][retval] */ __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtendedColorSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_get_ColorSpace(This,value)	\
    ( (This)->lpVtbl -> get_ColorSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_get_IccProfile(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_IccProfile(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_get_Type(This,value)	\
    ( (This)->lpVtbl -> get_Type(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_get_SimpleProfile(This,value)	\
    ( (This)->lpVtbl -> get_SimpleProfile(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_get_ExtendedColorSpace(This,value)	\
    ( (This)->lpVtbl -> get_ExtendedColorSpace(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0357 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileFactory[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementProfileFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0357 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0357_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0357_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("7A0F1C98-94C6-4621-9877-C51A17823EDF")
                        IColorManagementProfileFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace colorSpace,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile **result) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IColorManagementProfileFactory = __uuidof(IColorManagementProfileFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace colorSpace,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile **result);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_Create(This,colorSpace,result)	\
    ( (This)->lpVtbl -> Create(This,colorSpace,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0358 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementProfileStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0358 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0358_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0358_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("94EEF610-03BD-4E82-9479-62A616BE75F1")
                        IColorManagementProfileStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateCustom( 
                                /* [in] */ UINT32 iccProfileCount,
                                /* [in][size_is] */ BYTE *iccProfile,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateSimple( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile simpleProfile,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateExtended( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace colorSpace,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE IsSupported( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType type,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *device,
                                /* [out][retval] */ boolean *result) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IColorManagementProfileStatics = __uuidof(IColorManagementProfileStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCustom )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
            /* [in] */ UINT32 iccProfileCount,
            /* [in][size_is] */ BYTE *iccProfile,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile **result);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSimple )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile simpleProfile,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile **result);
        
        HRESULT ( STDMETHODCALLTYPE *CreateExtended )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace colorSpace,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile **result);
        
        HRESULT ( STDMETHODCALLTYPE *IsSupported )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType type,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *device,
            /* [out][retval] */ boolean *result);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_CreateCustom(This,iccProfileCount,iccProfile,result)	\
    ( (This)->lpVtbl -> CreateCustom(This,iccProfileCount,iccProfile,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_CreateSimple(This,simpleProfile,result)	\
    ( (This)->lpVtbl -> CreateSimple(This,simpleProfile,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_CreateExtended(This,colorSpace,result)	\
    ( (This)->lpVtbl -> CreateExtended(This,colorSpace,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_IsSupported(This,type,device,result)	\
    ( (This)->lpVtbl -> IsSupported(This,type,device,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0359 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorManagementProfile_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorManagementProfile_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorManagementProfile[] = L"Microsoft.Graphics.Canvas.Effects.ColorManagementProfile";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class EffectTransferTable3D;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3D[] = L"Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0359 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0359_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0359_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("7AF06B86-2C45-49C8-8F44-E15A6D4FA44E")
                        IEffectTransferTable3D : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IEffectTransferTable3D = __uuidof(IEffectTransferTable3D);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0360 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3DStatics[] = L"Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3DStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0360 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0360_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0360_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("3CB83559-216A-4BCA-9BB6-E233C5AD2C48")
                        IEffectTransferTable3DStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateFromColors( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 colorCount,
                                /* [in][size_is] */ ABI::Windows::UI::Color *colors,
                                /* [in] */ INT32 sizeB,
                                /* [in] */ INT32 sizeG,
                                /* [in] */ INT32 sizeR,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D **result) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateFromBytes( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 byteCount,
                                /* [in][size_is] */ BYTE *bytes,
                                /* [in] */ INT32 sizeB,
                                /* [in] */ INT32 sizeG,
                                /* [in] */ INT32 sizeR,
                                /* [in] */ ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D **result) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IEffectTransferTable3DStatics = __uuidof(IEffectTransferTable3DStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromColors )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 colorCount,
            /* [in][size_is] */ __x_ABI_CWindows_CUI_CColor *colors,
            /* [in] */ INT32 sizeB,
            /* [in] */ INT32 sizeG,
            /* [in] */ INT32 sizeR,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D **result);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromBytes )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 byteCount,
            /* [in][size_is] */ BYTE *bytes,
            /* [in] */ INT32 sizeB,
            /* [in] */ INT32 sizeG,
            /* [in] */ INT32 sizeR,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D **result);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_CreateFromColors(This,resourceCreator,colorCount,colors,sizeB,sizeG,sizeR,result)	\
    ( (This)->lpVtbl -> CreateFromColors(This,resourceCreator,colorCount,colors,sizeB,sizeG,sizeR,result) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_CreateFromBytes(This,resourceCreator,byteCount,bytes,sizeB,sizeG,sizeR,format,result)	\
    ( (This)->lpVtbl -> CreateFromBytes(This,resourceCreator,byteCount,bytes,sizeB,sizeG,sizeR,format,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0361 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EffectTransferTable3D_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EffectTransferTable3D_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_EffectTransferTable3D[] = L"Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class AlphaMaskEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect[] = L"Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0361 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0361_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0361_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("9BA6607E-75C9-5388-892F-DD3440564D98")
                        IAlphaMaskEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMask( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaMask( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IAlphaMaskEffect = __uuidof(IAlphaMaskEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMask )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaMask )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_get_AlphaMask(This,source)	\
    ( (This)->lpVtbl -> get_AlphaMask(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_put_AlphaMask(This,source)	\
    ( (This)->lpVtbl -> put_AlphaMask(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0362 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffectStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0362 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0362_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0362_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffectStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("CC31105C-0377-5708-8484-1AD8EE3E554B")
                        IAlphaMaskEffectStatics : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsSupported( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IAlphaMaskEffectStatics = __uuidof(IAlphaMaskEffectStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSupported )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This,
            /* [out][retval] */ boolean *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_get_IsSupported(This,value)	\
    ( (This)->lpVtbl -> get_IsSupported(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0363 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AlphaMaskEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AlphaMaskEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_AlphaMaskEffect[] = L"Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ArithmeticCompositeEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0363 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0363_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0363_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("BEEB682B-D64C-5C8B-A1FB-332162ED099C")
                        IArithmeticCompositeEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MultiplyAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MultiplyAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source1Amount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source1Amount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source2Amount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source2Amount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Offset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Offset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source1( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source1( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source2( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source2( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IArithmeticCompositeEffect = __uuidof(IArithmeticCompositeEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MultiplyAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MultiplyAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source1Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source1Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source2Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source2Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Offset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Offset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source1 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source1 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source2 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source2 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_MultiplyAmount(This,value)	\
    ( (This)->lpVtbl -> get_MultiplyAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_MultiplyAmount(This,value)	\
    ( (This)->lpVtbl -> put_MultiplyAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Source1Amount(This,value)	\
    ( (This)->lpVtbl -> get_Source1Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Source1Amount(This,value)	\
    ( (This)->lpVtbl -> put_Source1Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Source2Amount(This,value)	\
    ( (This)->lpVtbl -> get_Source2Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Source2Amount(This,value)	\
    ( (This)->lpVtbl -> put_Source2Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Offset(This,value)	\
    ( (This)->lpVtbl -> get_Offset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Offset(This,value)	\
    ( (This)->lpVtbl -> put_Offset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Source1(This,source)	\
    ( (This)->lpVtbl -> get_Source1(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Source1(This,source)	\
    ( (This)->lpVtbl -> put_Source1(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Source2(This,source)	\
    ( (This)->lpVtbl -> get_Source2(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Source2(This,source)	\
    ( (This)->lpVtbl -> put_Source2(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0364 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class AtlasEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IAtlasEffect[] = L"Microsoft.Graphics.Canvas.Effects.IAtlasEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0364 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0364_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0364_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IAtlasEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("F7F26EBA-F015-5EFF-9AF3-7BD2D44904BD")
                        IAtlasEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceRectangle( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceRectangle( 
                                /* [in] */ ABI::Windows::Foundation::Rect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PaddingRectangle( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PaddingRectangle( 
                                /* [in] */ ABI::Windows::Foundation::Rect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IAtlasEffect = __uuidof(IAtlasEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaddingRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaddingRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_get_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> get_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_put_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> put_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_get_PaddingRectangle(This,value)	\
    ( (This)->lpVtbl -> get_PaddingRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_put_PaddingRectangle(This,value)	\
    ( (This)->lpVtbl -> put_PaddingRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0365 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AtlasEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AtlasEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_AtlasEffect[] = L"Microsoft.Graphics.Canvas.Effects.AtlasEffect";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode
    {
        BlendEffectMode_Multiply	= 0,
        BlendEffectMode_Screen	= 1,
        BlendEffectMode_Darken	= 2,
        BlendEffectMode_Lighten	= 3,
        BlendEffectMode_Dissolve	= 4,
        BlendEffectMode_ColorBurn	= 5,
        BlendEffectMode_LinearBurn	= 6,
        BlendEffectMode_DarkerColor	= 7,
        BlendEffectMode_LighterColor	= 8,
        BlendEffectMode_ColorDodge	= 9,
        BlendEffectMode_LinearDodge	= 10,
        BlendEffectMode_Overlay	= 11,
        BlendEffectMode_SoftLight	= 12,
        BlendEffectMode_HardLight	= 13,
        BlendEffectMode_VividLight	= 14,
        BlendEffectMode_LinearLight	= 15,
        BlendEffectMode_PinLight	= 16,
        BlendEffectMode_HardMix	= 17,
        BlendEffectMode_Difference	= 18,
        BlendEffectMode_Exclusion	= 19,
        BlendEffectMode_Hue	= 20,
        BlendEffectMode_Saturation	= 21,
        BlendEffectMode_Color	= 22,
        BlendEffectMode_Luminosity	= 23,
        BlendEffectMode_Subtract	= 24,
        BlendEffectMode_Division	= 25
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class BlendEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IBlendEffect[] = L"Microsoft.Graphics.Canvas.Effects.IBlendEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0365 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM BlendEffectMode
                        {
                            Multiply	= 0,
                            Screen	= 1,
                            Darken	= 2,
                            Lighten	= 3,
                            Dissolve	= 4,
                            ColorBurn	= 5,
                            LinearBurn	= 6,
                            DarkerColor	= 7,
                            LighterColor	= 8,
                            ColorDodge	= 9,
                            LinearDodge	= 10,
                            Overlay	= 11,
                            SoftLight	= 12,
                            HardLight	= 13,
                            VividLight	= 14,
                            LinearLight	= 15,
                            PinLight	= 16,
                            HardMix	= 17,
                            Difference	= 18,
                            Exclusion	= 19,
                            Hue	= 20,
                            Saturation	= 21,
                            Color	= 22,
                            Luminosity	= 23,
                            Subtract	= 24,
                            Division	= 25
                        } ;

                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Multiply = BlendEffectMode::Multiply;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Screen = BlendEffectMode::Screen;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Darken = BlendEffectMode::Darken;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Lighten = BlendEffectMode::Lighten;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Dissolve = BlendEffectMode::Dissolve;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_ColorBurn = BlendEffectMode::ColorBurn;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_LinearBurn = BlendEffectMode::LinearBurn;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_DarkerColor = BlendEffectMode::DarkerColor;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_LighterColor = BlendEffectMode::LighterColor;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_ColorDodge = BlendEffectMode::ColorDodge;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_LinearDodge = BlendEffectMode::LinearDodge;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Overlay = BlendEffectMode::Overlay;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_SoftLight = BlendEffectMode::SoftLight;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_HardLight = BlendEffectMode::HardLight;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_VividLight = BlendEffectMode::VividLight;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_LinearLight = BlendEffectMode::LinearLight;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_PinLight = BlendEffectMode::PinLight;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_HardMix = BlendEffectMode::HardMix;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Difference = BlendEffectMode::Difference;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Exclusion = BlendEffectMode::Exclusion;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Hue = BlendEffectMode::Hue;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Saturation = BlendEffectMode::Saturation;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Color = BlendEffectMode::Color;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Luminosity = BlendEffectMode::Luminosity;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Subtract = BlendEffectMode::Subtract;
                    const MIDL_ENUM BlendEffectMode BlendEffectMode_Division = BlendEffectMode::Division;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM BlendEffectMode BlendEffectMode;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0365_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0365_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IBlendEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("5673248E-7266-5E49-B2AB-2589D5D875C3")
                        IBlendEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Mode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::BlendEffectMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Mode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::BlendEffectMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Background( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Background( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Foreground( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Foreground( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IBlendEffect = __uuidof(IBlendEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Background )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Background )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Foreground )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Foreground )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_get_Mode(This,value)	\
    ( (This)->lpVtbl -> get_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_put_Mode(This,value)	\
    ( (This)->lpVtbl -> put_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_get_Background(This,source)	\
    ( (This)->lpVtbl -> get_Background(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_put_Background(This,source)	\
    ( (This)->lpVtbl -> put_Background(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_get_Foreground(This,source)	\
    ( (This)->lpVtbl -> get_Foreground(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_put_Foreground(This,source)	\
    ( (This)->lpVtbl -> put_Foreground(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0366 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BlendEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BlendEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_BlendEffect[] = L"Microsoft.Graphics.Canvas.Effects.BlendEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class BorderEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IBorderEffect[] = L"Microsoft.Graphics.Canvas.Effects.IBorderEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0366 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0366_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0366_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IBorderEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("31602441-15DB-5B4A-98DD-BA4247548B41")
                        IBorderEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ExtendX( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ExtendX( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ExtendY( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ExtendY( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IBorderEffect = __uuidof(IBorderEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtendX )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExtendX )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtendY )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExtendY )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_get_ExtendX(This,value)	\
    ( (This)->lpVtbl -> get_ExtendX(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_put_ExtendX(This,value)	\
    ( (This)->lpVtbl -> put_ExtendX(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_get_ExtendY(This,value)	\
    ( (This)->lpVtbl -> get_ExtendY(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_put_ExtendY(This,value)	\
    ( (This)->lpVtbl -> put_ExtendY(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0367 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BorderEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BorderEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_BorderEffect[] = L"Microsoft.Graphics.Canvas.Effects.BorderEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class BrightnessEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect[] = L"Microsoft.Graphics.Canvas.Effects.IBrightnessEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0367 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0367_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0367_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("BECED347-025F-5727-8F7D-498D67DF557E")
                        IBrightnessEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WhitePoint( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_WhitePoint( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlackPoint( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlackPoint( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IBrightnessEffect = __uuidof(IBrightnessEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WhitePoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_WhitePoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlackPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlackPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_get_WhitePoint(This,value)	\
    ( (This)->lpVtbl -> get_WhitePoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_put_WhitePoint(This,value)	\
    ( (This)->lpVtbl -> put_WhitePoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_get_BlackPoint(This,value)	\
    ( (This)->lpVtbl -> get_BlackPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_put_BlackPoint(This,value)	\
    ( (This)->lpVtbl -> put_BlackPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0368 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BrightnessEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BrightnessEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_BrightnessEffect[] = L"Microsoft.Graphics.Canvas.Effects.BrightnessEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ChromaKeyEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0368 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0368_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0368_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("F14B9464-1871-5EAA-9DB6-C0901140E9D3")
                        IChromaKeyEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Tolerance( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Tolerance( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InvertAlpha( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InvertAlpha( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Feather( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Feather( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorHdr( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorHdr( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IChromaKeyEffect = __uuidof(IChromaKeyEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InvertAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InvertAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Feather )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Feather )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_get_Color(This,value)	\
    ( (This)->lpVtbl -> get_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_put_Color(This,value)	\
    ( (This)->lpVtbl -> put_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_get_Tolerance(This,value)	\
    ( (This)->lpVtbl -> get_Tolerance(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_put_Tolerance(This,value)	\
    ( (This)->lpVtbl -> put_Tolerance(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_get_InvertAlpha(This,value)	\
    ( (This)->lpVtbl -> get_InvertAlpha(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_put_InvertAlpha(This,value)	\
    ( (This)->lpVtbl -> put_InvertAlpha(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_get_Feather(This,value)	\
    ( (This)->lpVtbl -> get_Feather(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_put_Feather(This,value)	\
    ( (This)->lpVtbl -> put_Feather(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_get_ColorHdr(This,value)	\
    ( (This)->lpVtbl -> get_ColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_put_ColorHdr(This,value)	\
    ( (This)->lpVtbl -> put_ColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0369 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ChromaKeyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ChromaKeyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ChromaKeyEffect[] = L"Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality
    {
        ColorManagementEffectQuality_Proof	= 0,
        ColorManagementEffectQuality_Normal	= 1,
        ColorManagementEffectQuality_Best	= 2
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ColorManagementEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0369 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM ColorManagementEffectQuality
                        {
                            Proof	= 0,
                            Normal	= 1,
                            Best	= 2
                        } ;

                    const MIDL_ENUM ColorManagementEffectQuality ColorManagementEffectQuality_Proof = ColorManagementEffectQuality::Proof;
                    const MIDL_ENUM ColorManagementEffectQuality ColorManagementEffectQuality_Normal = ColorManagementEffectQuality::Normal;
                    const MIDL_ENUM ColorManagementEffectQuality ColorManagementEffectQuality_Best = ColorManagementEffectQuality::Best;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM ColorManagementEffectQuality ColorManagementEffectQuality;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0369_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0369_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("6E8BBE37-E1E4-5AD0-B98D-940E3213A54E")
                        IColorManagementEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceColorProfile( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile **value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceColorProfile( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceRenderingIntent( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceRenderingIntent( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OutputColorProfile( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile **value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OutputColorProfile( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OutputRenderingIntent( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OutputRenderingIntent( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Quality( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Quality( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IColorManagementEffect = __uuidof(IColorManagementEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceColorProfile )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceColorProfile )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceRenderingIntent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceRenderingIntent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputColorProfile )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputColorProfile )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputRenderingIntent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputRenderingIntent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Quality )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Quality )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_SourceColorProfile(This,value)	\
    ( (This)->lpVtbl -> get_SourceColorProfile(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_SourceColorProfile(This,value)	\
    ( (This)->lpVtbl -> put_SourceColorProfile(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_SourceRenderingIntent(This,value)	\
    ( (This)->lpVtbl -> get_SourceRenderingIntent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_SourceRenderingIntent(This,value)	\
    ( (This)->lpVtbl -> put_SourceRenderingIntent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_OutputColorProfile(This,value)	\
    ( (This)->lpVtbl -> get_OutputColorProfile(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_OutputColorProfile(This,value)	\
    ( (This)->lpVtbl -> put_OutputColorProfile(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_OutputRenderingIntent(This,value)	\
    ( (This)->lpVtbl -> get_OutputRenderingIntent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_OutputRenderingIntent(This,value)	\
    ( (This)->lpVtbl -> put_OutputRenderingIntent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> put_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_Quality(This,value)	\
    ( (This)->lpVtbl -> get_Quality(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_Quality(This,value)	\
    ( (This)->lpVtbl -> put_Quality(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0370 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementEffectStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0370 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0370_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0370_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementEffectStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("31C7AF98-F2D4-55FC-B129-A70736E6DA05")
                        IColorManagementEffectStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE IsBestQualitySupported( 
                                ABI::Microsoft::Graphics::Canvas::ICanvasDevice *device,
                                /* [out][retval] */ boolean *result) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IColorManagementEffectStatics = __uuidof(IColorManagementEffectStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *IsBestQualitySupported )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This,
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *device,
            /* [out][retval] */ boolean *result);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_IsBestQualitySupported(This,device,result)	\
    ( (This)->lpVtbl -> IsBestQualitySupported(This,device,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0371 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorManagementEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorManagementEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorManagementEffect[] = L"Microsoft.Graphics.Canvas.Effects.ColorManagementEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ColorMatrixEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0371 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0371_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0371_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("E6AE54C4-883D-588E-B451-E9EBE3830437")
                        IColorMatrixEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorMatrix( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::Matrix5x4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorMatrix( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::Matrix5x4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IColorMatrixEffect = __uuidof(IColorMatrixEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_get_ColorMatrix(This,value)	\
    ( (This)->lpVtbl -> get_ColorMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_put_ColorMatrix(This,value)	\
    ( (This)->lpVtbl -> put_ColorMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_put_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> put_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0372 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ColorSourceEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorSourceEffect[] = L"Microsoft.Graphics.Canvas.Effects.IColorSourceEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0372 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0372_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0372_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IColorSourceEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("25F942C7-7FEE-518A-BA7B-22A0060AF7F6")
                        IColorSourceEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorHdr( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorHdr( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IColorSourceEffect = __uuidof(IColorSourceEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_get_Color(This,value)	\
    ( (This)->lpVtbl -> get_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_put_Color(This,value)	\
    ( (This)->lpVtbl -> put_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_get_ColorHdr(This,value)	\
    ( (This)->lpVtbl -> get_ColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_put_ColorHdr(This,value)	\
    ( (This)->lpVtbl -> put_ColorHdr(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0373 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorSourceEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorSourceEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorSourceEffect[] = L"Microsoft.Graphics.Canvas.Effects.ColorSourceEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class CompositeEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif



/* interface __MIDL_itf_Canvas2Eabi_0000_0373 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0373_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0373_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5669 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5669 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5669_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5669_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0374 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
#define DEF___FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0374 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0374_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0374_v0_0_s_ifspec;

#ifndef ____FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__
#define ____FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

/* interface __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c50f44f2-b5b9-50e5-b493-a967ccc21dd2")
    __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl;

    interface __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
    {
        CONST_VTBL struct __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0375 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource */


/* interface __MIDL_itf_Canvas2Eabi_0000_0375 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0375_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0375_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5670 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5670 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5670_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5670_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0376 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
#define DEF___FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0376 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0376_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0376_v0_0_s_ifspec;

#ifndef ____FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__
#define ____FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

/* interface __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42924784-b65c-5e5f-9ea2-d50dcf427e65")
    __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource **first);
        
        END_INTERFACE
    } __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl;

    interface __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
    {
        CONST_VTBL struct __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0377 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource */


/* interface __MIDL_itf_Canvas2Eabi_0000_0377 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0377_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0377_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5671 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5671 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5671_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5671_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0378 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
#define DEF___FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0378 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0378_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0378_v0_0_s_ifspec;

#ifndef ____FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__
#define ____FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

/* interface __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74afa1ad-285c-5bc4-9936-4338f19d7979")
    __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl;

    interface __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
    {
        CONST_VTBL struct __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0379 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource */


/* interface __MIDL_itf_Canvas2Eabi_0000_0379 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0379_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0379_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5672 */




/* interface __MIDL_itf_Canvas2Eabi2Eidl_0000_5672 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5672_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi2Eidl_0000_5672_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0380 */
/* [local] */ 

#ifndef DEF___FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
#define DEF___FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0380 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0380_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0380_v0_0_s_ifspec;

#ifndef ____FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__
#define ____FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

/* interface __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 



/* interface __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b5a2f91f-1f97-50ef-ba3f-27aecbfb6d0a")
    __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int index,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int index,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **items,
            /* [retval][out] */ unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **value);
        
        END_INTERFACE
    } __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl;

    interface __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
    {
        CONST_VTBL struct __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0381 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICompositeEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0381 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0381_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0381_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ICompositeEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("F8808C48-CDC7-5DB4-807C-B9344FF71984")
                        ICompositeEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Mode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasComposite *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Mode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasComposite value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Sources( 
                                /* [out][retval] */ __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICompositeEffect = __uuidof(ICompositeEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [out][retval] */ __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_get_Mode(This,value)	\
    ( (This)->lpVtbl -> get_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_put_Mode(This,value)	\
    ( (This)->lpVtbl -> put_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_get_Sources(This,value)	\
    ( (This)->lpVtbl -> get_Sources(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0382 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CompositeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CompositeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_CompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.CompositeEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ContrastEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IContrastEffect[] = L"Microsoft.Graphics.Canvas.Effects.IContrastEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0382 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0382_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0382_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IContrastEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("DA8A2B9F-594E-560A-9EAA-1F912408FE79")
                        IContrastEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Contrast( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Contrast( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampSource( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampSource( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IContrastEffect = __uuidof(IContrastEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Contrast )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Contrast )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampSource )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampSource )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_get_Contrast(This,value)	\
    ( (This)->lpVtbl -> get_Contrast(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_put_Contrast(This,value)	\
    ( (This)->lpVtbl -> put_Contrast(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_get_ClampSource(This,value)	\
    ( (This)->lpVtbl -> get_ClampSource(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_put_ClampSource(This,value)	\
    ( (This)->lpVtbl -> put_ClampSource(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0383 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ContrastEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ContrastEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ContrastEffect[] = L"Microsoft.Graphics.Canvas.Effects.ContrastEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ConvolveMatrixEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0383 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0383_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0383_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("82961257-A78D-5440-8026-AF57D4A76A9E")
                        IConvolveMatrixEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_KernelScale( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_KernelScale( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_KernelWidth( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_KernelWidth( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_KernelHeight( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_KernelHeight( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_KernelMatrix( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_KernelMatrix( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Divisor( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Divisor( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Offset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Offset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_KernelOffset( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_KernelOffset( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PreserveAlpha( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PreserveAlpha( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IConvolveMatrixEffect = __uuidof(IConvolveMatrixEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_KernelScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_KernelScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_KernelWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_KernelWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_KernelHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_KernelHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_KernelMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_KernelMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Divisor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Divisor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Offset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Offset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_KernelOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_KernelOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreserveAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PreserveAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelScale(This,value)	\
    ( (This)->lpVtbl -> get_KernelScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelScale(This,value)	\
    ( (This)->lpVtbl -> put_KernelScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelWidth(This,value)	\
    ( (This)->lpVtbl -> get_KernelWidth(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelWidth(This,value)	\
    ( (This)->lpVtbl -> put_KernelWidth(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelHeight(This,value)	\
    ( (This)->lpVtbl -> get_KernelHeight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelHeight(This,value)	\
    ( (This)->lpVtbl -> put_KernelHeight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelMatrix(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_KernelMatrix(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelMatrix(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_KernelMatrix(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_Divisor(This,value)	\
    ( (This)->lpVtbl -> get_Divisor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_Divisor(This,value)	\
    ( (This)->lpVtbl -> put_Divisor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_Offset(This,value)	\
    ( (This)->lpVtbl -> get_Offset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_Offset(This,value)	\
    ( (This)->lpVtbl -> put_Offset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelOffset(This,value)	\
    ( (This)->lpVtbl -> get_KernelOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelOffset(This,value)	\
    ( (This)->lpVtbl -> put_KernelOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_PreserveAlpha(This,value)	\
    ( (This)->lpVtbl -> get_PreserveAlpha(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_PreserveAlpha(This,value)	\
    ( (This)->lpVtbl -> put_PreserveAlpha(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0384 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class CropEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICropEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICropEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0384 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0384_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0384_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ICropEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("D8A1C2A5-E031-566D-8F7C-BA07CFB58AAE")
                        ICropEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceRectangle( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceRectangle( 
                                /* [in] */ ABI::Windows::Foundation::Rect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICropEffect = __uuidof(ICropEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_get_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> get_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_put_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> put_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0385 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CropEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CropEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_CropEffect[] = L"Microsoft.Graphics.Canvas.Effects.CropEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class CrossFadeEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0385 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0385_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0385_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("BE161A9F-43D2-5613-8600-D51E3D7CE288")
                        ICrossFadeEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CrossFade( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CrossFade( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source2( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source2( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source1( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source1( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICrossFadeEffect = __uuidof(ICrossFadeEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CrossFade )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CrossFade )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source2 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source2 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source1 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source1 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_get_CrossFade(This,value)	\
    ( (This)->lpVtbl -> get_CrossFade(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_put_CrossFade(This,value)	\
    ( (This)->lpVtbl -> put_CrossFade(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_get_Source2(This,source)	\
    ( (This)->lpVtbl -> get_Source2(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_put_Source2(This,source)	\
    ( (This)->lpVtbl -> put_Source2(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_get_Source1(This,source)	\
    ( (This)->lpVtbl -> get_Source1(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_put_Source1(This,source)	\
    ( (This)->lpVtbl -> put_Source1(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0386 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.ICrossFadeEffectStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0386 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0386_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0386_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffectStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("A3B67330-6284-5EF6-99E8-B4B05D2B8BFC")
                        ICrossFadeEffectStatics : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsSupported( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICrossFadeEffectStatics = __uuidof(ICrossFadeEffectStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSupported )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This,
            /* [out][retval] */ boolean *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_get_IsSupported(This,value)	\
    ( (This)->lpVtbl -> get_IsSupported(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0387 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CrossFadeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CrossFadeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_CrossFadeEffect[] = L"Microsoft.Graphics.Canvas.Effects.CrossFadeEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class DirectionalBlurEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0387 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0387_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0387_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("5D155C4B-0882-506A-A8E1-12E1EAD17F0A")
                        IDirectionalBlurEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlurAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlurAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Angle( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Angle( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Optimization( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Optimization( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IDirectionalBlurEffect = __uuidof(IDirectionalBlurEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Angle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Angle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Optimization )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Optimization )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> get_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> put_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_Angle(This,value)	\
    ( (This)->lpVtbl -> get_Angle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_Angle(This,value)	\
    ( (This)->lpVtbl -> put_Angle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_Optimization(This,value)	\
    ( (This)->lpVtbl -> get_Optimization(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_Optimization(This,value)	\
    ( (This)->lpVtbl -> put_Optimization(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0388 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class DiscreteTransferEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0388 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0388_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0388_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("7F1F54F9-21B5-5B91-9506-832C536FDDFA")
                        IDiscreteTransferEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IDiscreteTransferEffect = __uuidof(IDiscreteTransferEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_RedTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_RedTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_RedTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_RedTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_RedDisable(This,value)	\
    ( (This)->lpVtbl -> get_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_RedDisable(This,value)	\
    ( (This)->lpVtbl -> put_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_GreenTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_GreenTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_GreenTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_GreenTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> get_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> put_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_BlueTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_BlueTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_BlueTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_BlueTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> get_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> put_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_AlphaTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_AlphaTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_AlphaTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_AlphaTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> get_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> put_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0389 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class DisplacementMapEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0389 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0389_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0389_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("45F57C50-D4D9-5AF1-8A6B-50378F3498A2")
                        IDisplacementMapEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Amount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Amount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_XChannelSelect( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_XChannelSelect( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YChannelSelect( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_YChannelSelect( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Displacement( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Displacement( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IDisplacementMapEffect = __uuidof(IDisplacementMapEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XChannelSelect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XChannelSelect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YChannelSelect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_YChannelSelect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Displacement )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Displacement )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_Amount(This,value)	\
    ( (This)->lpVtbl -> get_Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_Amount(This,value)	\
    ( (This)->lpVtbl -> put_Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_XChannelSelect(This,value)	\
    ( (This)->lpVtbl -> get_XChannelSelect(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_XChannelSelect(This,value)	\
    ( (This)->lpVtbl -> put_XChannelSelect(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_YChannelSelect(This,value)	\
    ( (This)->lpVtbl -> get_YChannelSelect(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_YChannelSelect(This,value)	\
    ( (This)->lpVtbl -> put_YChannelSelect(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_Displacement(This,source)	\
    ( (This)->lpVtbl -> get_Displacement(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_Displacement(This,source)	\
    ( (This)->lpVtbl -> put_Displacement(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0390 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect[] = L"Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class DistantDiffuseEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0390 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0390_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0390_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("D501B10B-B445-50F4-8B8F-CDECFCDD1321")
                        IDistantDiffuseEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Azimuth( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Azimuth( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Elevation( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Elevation( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DiffuseAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DiffuseAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapScale( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapScale( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColorHdr( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColorHdr( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IDistantDiffuseEffect = __uuidof(IDistantDiffuseEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Azimuth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Azimuth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Elevation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Elevation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiffuseAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DiffuseAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_Azimuth(This,value)	\
    ( (This)->lpVtbl -> get_Azimuth(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_Azimuth(This,value)	\
    ( (This)->lpVtbl -> put_Azimuth(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_Elevation(This,value)	\
    ( (This)->lpVtbl -> get_Elevation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_Elevation(This,value)	\
    ( (This)->lpVtbl -> put_Elevation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_DiffuseAmount(This,value)	\
    ( (This)->lpVtbl -> get_DiffuseAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_DiffuseAmount(This,value)	\
    ( (This)->lpVtbl -> put_DiffuseAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_LightColor(This,value)	\
    ( (This)->lpVtbl -> get_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_LightColor(This,value)	\
    ( (This)->lpVtbl -> put_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_LightColorHdr(This,value)	\
    ( (This)->lpVtbl -> get_LightColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_LightColorHdr(This,value)	\
    ( (This)->lpVtbl -> put_LightColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0391 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class DistantSpecularEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0391 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0391_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0391_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("A7A828DF-3072-545F-8D75-86C100F03231")
                        IDistantSpecularEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Azimuth( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Azimuth( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Elevation( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Elevation( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecularExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SpecularExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecularAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SpecularAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapScale( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapScale( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColorHdr( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColorHdr( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IDistantSpecularEffect = __uuidof(IDistantSpecularEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Azimuth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Azimuth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Elevation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Elevation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecularExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecularExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecularAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecularAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_Azimuth(This,value)	\
    ( (This)->lpVtbl -> get_Azimuth(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_Azimuth(This,value)	\
    ( (This)->lpVtbl -> put_Azimuth(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_Elevation(This,value)	\
    ( (This)->lpVtbl -> get_Elevation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_Elevation(This,value)	\
    ( (This)->lpVtbl -> put_Elevation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_SpecularExponent(This,value)	\
    ( (This)->lpVtbl -> get_SpecularExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_SpecularExponent(This,value)	\
    ( (This)->lpVtbl -> put_SpecularExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_SpecularAmount(This,value)	\
    ( (This)->lpVtbl -> get_SpecularAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_SpecularAmount(This,value)	\
    ( (This)->lpVtbl -> put_SpecularAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_LightColor(This,value)	\
    ( (This)->lpVtbl -> get_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_LightColor(This,value)	\
    ( (This)->lpVtbl -> put_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_LightColorHdr(This,value)	\
    ( (This)->lpVtbl -> get_LightColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_LightColorHdr(This,value)	\
    ( (This)->lpVtbl -> put_LightColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0392 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class DpiCompensationEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0392 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0392_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0392_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("636597CD-F94A-55B6-9CF0-694A53D638EA")
                        IDpiCompensationEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceDpi( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceDpi( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IDpiCompensationEffect = __uuidof(IDpiCompensationEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_get_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_put_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_get_SourceDpi(This,value)	\
    ( (This)->lpVtbl -> get_SourceDpi(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_put_SourceDpi(This,value)	\
    ( (This)->lpVtbl -> put_SourceDpi(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0393 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect[] = L"Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode
    {
        EdgeDetectionEffectMode_Sobel	= 0,
        EdgeDetectionEffectMode_Prewitt	= 1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class EdgeDetectionEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect[] = L"Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0393 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM EdgeDetectionEffectMode
                        {
                            Sobel	= 0,
                            Prewitt	= 1
                        } ;

                    const MIDL_ENUM EdgeDetectionEffectMode EdgeDetectionEffectMode_Sobel = EdgeDetectionEffectMode::Sobel;
                    const MIDL_ENUM EdgeDetectionEffectMode EdgeDetectionEffectMode_Prewitt = EdgeDetectionEffectMode::Prewitt;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM EdgeDetectionEffectMode EdgeDetectionEffectMode;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0393_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0393_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("69F6CF3A-F38F-5A88-974A-29390B957E5C")
                        IEdgeDetectionEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Amount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Amount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlurAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlurAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Mode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Mode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OverlayEdges( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OverlayEdges( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IEdgeDetectionEffect = __uuidof(IEdgeDetectionEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OverlayEdges )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OverlayEdges )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_get_Amount(This,value)	\
    ( (This)->lpVtbl -> get_Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_put_Amount(This,value)	\
    ( (This)->lpVtbl -> put_Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_get_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> get_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_put_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> put_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_get_Mode(This,value)	\
    ( (This)->lpVtbl -> get_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_put_Mode(This,value)	\
    ( (This)->lpVtbl -> put_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_get_OverlayEdges(This,value)	\
    ( (This)->lpVtbl -> get_OverlayEdges(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_put_OverlayEdges(This,value)	\
    ( (This)->lpVtbl -> put_OverlayEdges(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_put_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> put_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0394 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EdgeDetectionEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EdgeDetectionEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_EdgeDetectionEffect[] = L"Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class EmbossEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IEmbossEffect[] = L"Microsoft.Graphics.Canvas.Effects.IEmbossEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0394 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0394_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0394_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IEmbossEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("617BFF35-481C-5596-ABA5-00A162349D7B")
                        IEmbossEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Amount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Amount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Angle( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Angle( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IEmbossEffect = __uuidof(IEmbossEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Angle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Angle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_get_Amount(This,value)	\
    ( (This)->lpVtbl -> get_Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_put_Amount(This,value)	\
    ( (This)->lpVtbl -> put_Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_get_Angle(This,value)	\
    ( (This)->lpVtbl -> get_Angle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_put_Angle(This,value)	\
    ( (This)->lpVtbl -> put_Angle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0395 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EmbossEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EmbossEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_EmbossEffect[] = L"Microsoft.Graphics.Canvas.Effects.EmbossEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ExposureEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IExposureEffect[] = L"Microsoft.Graphics.Canvas.Effects.IExposureEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0395 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0395_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0395_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IExposureEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("B9E20A03-2232-5FD3-B408-15784B79DBB0")
                        IExposureEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Exposure( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Exposure( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IExposureEffect = __uuidof(IExposureEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Exposure )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Exposure )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_get_Exposure(This,value)	\
    ( (This)->lpVtbl -> get_Exposure(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_put_Exposure(This,value)	\
    ( (This)->lpVtbl -> put_Exposure(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0396 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ExposureEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ExposureEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ExposureEffect[] = L"Microsoft.Graphics.Canvas.Effects.ExposureEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class GammaTransferEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0396 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0396_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0396_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("B4576B6B-6C3E-534A-8576-D46DF4FCE93D")
                        IGammaTransferEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedAmplitude( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedAmplitude( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenAmplitude( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenAmplitude( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueAmplitude( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueAmplitude( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaAmplitude( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaAmplitude( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IGammaTransferEffect = __uuidof(IGammaTransferEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_RedAmplitude(This,value)	\
    ( (This)->lpVtbl -> get_RedAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_RedAmplitude(This,value)	\
    ( (This)->lpVtbl -> put_RedAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_RedExponent(This,value)	\
    ( (This)->lpVtbl -> get_RedExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_RedExponent(This,value)	\
    ( (This)->lpVtbl -> put_RedExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_RedOffset(This,value)	\
    ( (This)->lpVtbl -> get_RedOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_RedOffset(This,value)	\
    ( (This)->lpVtbl -> put_RedOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_RedDisable(This,value)	\
    ( (This)->lpVtbl -> get_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_RedDisable(This,value)	\
    ( (This)->lpVtbl -> put_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_GreenAmplitude(This,value)	\
    ( (This)->lpVtbl -> get_GreenAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_GreenAmplitude(This,value)	\
    ( (This)->lpVtbl -> put_GreenAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_GreenExponent(This,value)	\
    ( (This)->lpVtbl -> get_GreenExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_GreenExponent(This,value)	\
    ( (This)->lpVtbl -> put_GreenExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_GreenOffset(This,value)	\
    ( (This)->lpVtbl -> get_GreenOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_GreenOffset(This,value)	\
    ( (This)->lpVtbl -> put_GreenOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> get_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> put_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_BlueAmplitude(This,value)	\
    ( (This)->lpVtbl -> get_BlueAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_BlueAmplitude(This,value)	\
    ( (This)->lpVtbl -> put_BlueAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_BlueExponent(This,value)	\
    ( (This)->lpVtbl -> get_BlueExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_BlueExponent(This,value)	\
    ( (This)->lpVtbl -> put_BlueExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_BlueOffset(This,value)	\
    ( (This)->lpVtbl -> get_BlueOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_BlueOffset(This,value)	\
    ( (This)->lpVtbl -> put_BlueOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> get_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> put_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_AlphaAmplitude(This,value)	\
    ( (This)->lpVtbl -> get_AlphaAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_AlphaAmplitude(This,value)	\
    ( (This)->lpVtbl -> put_AlphaAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_AlphaExponent(This,value)	\
    ( (This)->lpVtbl -> get_AlphaExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_AlphaExponent(This,value)	\
    ( (This)->lpVtbl -> put_AlphaExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_AlphaOffset(This,value)	\
    ( (This)->lpVtbl -> get_AlphaOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_AlphaOffset(This,value)	\
    ( (This)->lpVtbl -> put_AlphaOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> get_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> put_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0397 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GammaTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GammaTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_GammaTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.GammaTransferEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class GaussianBlurEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0397 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0397_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0397_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("A82EC394-6734-5830-9123-2C82B27DD3C0")
                        IGaussianBlurEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlurAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlurAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Optimization( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Optimization( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IGaussianBlurEffect = __uuidof(IGaussianBlurEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Optimization )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Optimization )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_get_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> get_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_put_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> put_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_get_Optimization(This,value)	\
    ( (This)->lpVtbl -> get_Optimization(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_put_Optimization(This,value)	\
    ( (This)->lpVtbl -> put_Optimization(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0398 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class GrayscaleEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGrayscaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0398 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0398_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0398_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("78E13B83-0638-53F8-B0B3-5B0B320A9AD2")
                        IGrayscaleEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IGrayscaleEffect = __uuidof(IGrayscaleEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0399 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GrayscaleEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GrayscaleEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_GrayscaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.GrayscaleEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class HighlightsAndShadowsEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect[] = L"Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0399 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0399_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0399_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("7F90BE14-267E-5088-BC36-2E0AAD869B52")
                        IHighlightsAndShadowsEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Highlights( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Highlights( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Shadows( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Shadows( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Clarity( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Clarity( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MaskBlurAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MaskBlurAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceIsLinearGamma( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceIsLinearGamma( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IHighlightsAndShadowsEffect = __uuidof(IHighlightsAndShadowsEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Highlights )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Highlights )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Shadows )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Shadows )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Clarity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Clarity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaskBlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaskBlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceIsLinearGamma )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceIsLinearGamma )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_get_Highlights(This,value)	\
    ( (This)->lpVtbl -> get_Highlights(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_put_Highlights(This,value)	\
    ( (This)->lpVtbl -> put_Highlights(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_get_Shadows(This,value)	\
    ( (This)->lpVtbl -> get_Shadows(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_put_Shadows(This,value)	\
    ( (This)->lpVtbl -> put_Shadows(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_get_Clarity(This,value)	\
    ( (This)->lpVtbl -> get_Clarity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_put_Clarity(This,value)	\
    ( (This)->lpVtbl -> put_Clarity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_get_MaskBlurAmount(This,value)	\
    ( (This)->lpVtbl -> get_MaskBlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_put_MaskBlurAmount(This,value)	\
    ( (This)->lpVtbl -> put_MaskBlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_get_SourceIsLinearGamma(This,value)	\
    ( (This)->lpVtbl -> get_SourceIsLinearGamma(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_put_SourceIsLinearGamma(This,value)	\
    ( (This)->lpVtbl -> put_SourceIsLinearGamma(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0400 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HighlightsAndShadowsEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HighlightsAndShadowsEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_HighlightsAndShadowsEffect[] = L"Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class HueRotationEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHueRotationEffect[] = L"Microsoft.Graphics.Canvas.Effects.IHueRotationEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0400 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0400_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0400_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IHueRotationEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("C172EBF2-E35F-58AE-AD2C-561ECEAF2694")
                        IHueRotationEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Angle( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Angle( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IHueRotationEffect = __uuidof(IHueRotationEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Angle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Angle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_get_Angle(This,value)	\
    ( (This)->lpVtbl -> get_Angle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_put_Angle(This,value)	\
    ( (This)->lpVtbl -> put_Angle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0401 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueRotationEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueRotationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_HueRotationEffect[] = L"Microsoft.Graphics.Canvas.Effects.HueRotationEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class HueToRgbEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect[] = L"Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0401 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0401_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0401_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("1E97C12C-B743-53D0-88C4-8435272B0A3D")
                        IHueToRgbEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceColorSpace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceColorSpace( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IHueToRgbEffect = __uuidof(IHueToRgbEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceColorSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceColorSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_get_SourceColorSpace(This,value)	\
    ( (This)->lpVtbl -> get_SourceColorSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_put_SourceColorSpace(This,value)	\
    ( (This)->lpVtbl -> put_SourceColorSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0402 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueToRgbEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueToRgbEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_HueToRgbEffect[] = L"Microsoft.Graphics.Canvas.Effects.HueToRgbEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class InvertEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IInvertEffect[] = L"Microsoft.Graphics.Canvas.Effects.IInvertEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0402 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0402_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0402_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IInvertEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("D4ADCDFC-0F60-524D-936A-7F2736AD33D8")
                        IInvertEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IInvertEffect = __uuidof(IInvertEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0403 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_InvertEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_InvertEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_InvertEffect[] = L"Microsoft.Graphics.Canvas.Effects.InvertEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class LinearTransferEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0403 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0403_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0403_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("43D27AD0-8937-5FDB-876A-4E91CB47540C")
                        ILinearTransferEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedSlope( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedSlope( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenSlope( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenSlope( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueSlope( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueSlope( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaSlope( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaSlope( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ILinearTransferEffect = __uuidof(ILinearTransferEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_RedOffset(This,value)	\
    ( (This)->lpVtbl -> get_RedOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_RedOffset(This,value)	\
    ( (This)->lpVtbl -> put_RedOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_RedSlope(This,value)	\
    ( (This)->lpVtbl -> get_RedSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_RedSlope(This,value)	\
    ( (This)->lpVtbl -> put_RedSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_RedDisable(This,value)	\
    ( (This)->lpVtbl -> get_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_RedDisable(This,value)	\
    ( (This)->lpVtbl -> put_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_GreenOffset(This,value)	\
    ( (This)->lpVtbl -> get_GreenOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_GreenOffset(This,value)	\
    ( (This)->lpVtbl -> put_GreenOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_GreenSlope(This,value)	\
    ( (This)->lpVtbl -> get_GreenSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_GreenSlope(This,value)	\
    ( (This)->lpVtbl -> put_GreenSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> get_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> put_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_BlueOffset(This,value)	\
    ( (This)->lpVtbl -> get_BlueOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_BlueOffset(This,value)	\
    ( (This)->lpVtbl -> put_BlueOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_BlueSlope(This,value)	\
    ( (This)->lpVtbl -> get_BlueSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_BlueSlope(This,value)	\
    ( (This)->lpVtbl -> put_BlueSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> get_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> put_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_AlphaOffset(This,value)	\
    ( (This)->lpVtbl -> get_AlphaOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_AlphaOffset(This,value)	\
    ( (This)->lpVtbl -> put_AlphaOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_AlphaSlope(This,value)	\
    ( (This)->lpVtbl -> get_AlphaSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_AlphaSlope(This,value)	\
    ( (This)->lpVtbl -> put_AlphaSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> get_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> put_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0404 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LinearTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LinearTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_LinearTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.LinearTransferEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class LuminanceToAlphaEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ILuminanceToAlphaEffect[] = L"Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0404 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0404_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0404_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("22364900-AC51-5BD3-8BD2-D626FC9A65F9")
                        ILuminanceToAlphaEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ILuminanceToAlphaEffect = __uuidof(ILuminanceToAlphaEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0405 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect[] = L"Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode
    {
        MorphologyEffectMode_Erode	= 0,
        MorphologyEffectMode_Dilate	= 1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class MorphologyEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IMorphologyEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0405 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM MorphologyEffectMode
                        {
                            Erode	= 0,
                            Dilate	= 1
                        } ;

                    const MIDL_ENUM MorphologyEffectMode MorphologyEffectMode_Erode = MorphologyEffectMode::Erode;
                    const MIDL_ENUM MorphologyEffectMode MorphologyEffectMode_Dilate = MorphologyEffectMode::Dilate;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM MorphologyEffectMode MorphologyEffectMode;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0405_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0405_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("FF065FDB-62C8-5808-921E-49EFA43A3D34")
                        IMorphologyEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Mode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Mode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Width( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Height( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IMorphologyEffect = __uuidof(IMorphologyEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_get_Mode(This,value)	\
    ( (This)->lpVtbl -> get_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_put_Mode(This,value)	\
    ( (This)->lpVtbl -> put_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_get_Width(This,value)	\
    ( (This)->lpVtbl -> get_Width(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_put_Width(This,value)	\
    ( (This)->lpVtbl -> put_Width(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_get_Height(This,value)	\
    ( (This)->lpVtbl -> get_Height(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_put_Height(This,value)	\
    ( (This)->lpVtbl -> put_Height(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0406 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_MorphologyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_MorphologyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_MorphologyEffect[] = L"Microsoft.Graphics.Canvas.Effects.MorphologyEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class OpacityEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IOpacityEffect[] = L"Microsoft.Graphics.Canvas.Effects.IOpacityEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0406 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0406_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0406_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IOpacityEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("94B6AD75-C540-51B8-A9D1-544174ADC68D")
                        IOpacityEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Opacity( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Opacity( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IOpacityEffect = __uuidof(IOpacityEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Opacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Opacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_get_Opacity(This,value)	\
    ( (This)->lpVtbl -> get_Opacity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_put_Opacity(This,value)	\
    ( (This)->lpVtbl -> put_Opacity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0407 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IOpacityEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IOpacityEffectStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0407 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0407_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0407_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IOpacityEffectStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("91A7CDE3-B9B7-5437-8878-FB2E14100E6D")
                        IOpacityEffectStatics : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsSupported( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IOpacityEffectStatics = __uuidof(IOpacityEffectStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSupported )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This,
            /* [out][retval] */ boolean *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_get_IsSupported(This,value)	\
    ( (This)->lpVtbl -> get_IsSupported(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0408 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_OpacityEffect[] = L"Microsoft.Graphics.Canvas.Effects.OpacityEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class OpacityMetadataEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect[] = L"Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0408 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0408_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0408_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("099F3299-9B0A-5ED3-B044-4A6FC96F8362")
                        IOpacityMetadataEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OpaqueRectangle( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OpaqueRectangle( 
                                /* [in] */ ABI::Windows::Foundation::Rect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IOpacityMetadataEffect = __uuidof(IOpacityMetadataEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OpaqueRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_get_OpaqueRectangle(This,value)	\
    ( (This)->lpVtbl -> get_OpaqueRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_put_OpaqueRectangle(This,value)	\
    ( (This)->lpVtbl -> put_OpaqueRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0409 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect[] = L"Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class PointDiffuseEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0409 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0409_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0409_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("6CCE09EC-F847-5661-AF4B-531DD3DD7D6E")
                        IPointDiffuseEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightPosition( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector3 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightPosition( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector3 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DiffuseAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DiffuseAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapScale( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapScale( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColorHdr( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColorHdr( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IPointDiffuseEffect = __uuidof(IPointDiffuseEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector3 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiffuseAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DiffuseAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_LightPosition(This,value)	\
    ( (This)->lpVtbl -> get_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_LightPosition(This,value)	\
    ( (This)->lpVtbl -> put_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_DiffuseAmount(This,value)	\
    ( (This)->lpVtbl -> get_DiffuseAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_DiffuseAmount(This,value)	\
    ( (This)->lpVtbl -> put_DiffuseAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_LightColor(This,value)	\
    ( (This)->lpVtbl -> get_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_LightColor(This,value)	\
    ( (This)->lpVtbl -> put_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_LightColorHdr(This,value)	\
    ( (This)->lpVtbl -> get_LightColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_LightColorHdr(This,value)	\
    ( (This)->lpVtbl -> put_LightColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0410 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class PointSpecularEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0410 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0410_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0410_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("EC8AFE9B-8501-5286-A43C-1AFFF7420AD6")
                        IPointSpecularEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightPosition( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector3 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightPosition( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector3 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecularExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SpecularExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecularAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SpecularAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapScale( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapScale( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColorHdr( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColorHdr( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IPointSpecularEffect = __uuidof(IPointSpecularEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector3 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecularExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecularExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecularAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecularAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_LightPosition(This,value)	\
    ( (This)->lpVtbl -> get_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_LightPosition(This,value)	\
    ( (This)->lpVtbl -> put_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_SpecularExponent(This,value)	\
    ( (This)->lpVtbl -> get_SpecularExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_SpecularExponent(This,value)	\
    ( (This)->lpVtbl -> put_SpecularExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_SpecularAmount(This,value)	\
    ( (This)->lpVtbl -> get_SpecularAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_SpecularAmount(This,value)	\
    ( (This)->lpVtbl -> put_SpecularAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_LightColor(This,value)	\
    ( (This)->lpVtbl -> get_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_LightColor(This,value)	\
    ( (This)->lpVtbl -> put_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_LightColorHdr(This,value)	\
    ( (This)->lpVtbl -> get_LightColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_LightColorHdr(This,value)	\
    ( (This)->lpVtbl -> put_LightColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0411 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointSpecularEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointSpecularEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PointSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.PointSpecularEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class PosterizeEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPosterizeEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0411 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0411_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0411_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("2F631A3B-C89A-507C-9756-299B61434FA4")
                        IPosterizeEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedValueCount( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedValueCount( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenValueCount( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenValueCount( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueValueCount( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueValueCount( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IPosterizeEffect = __uuidof(IPosterizeEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedValueCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedValueCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenValueCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenValueCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueValueCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueValueCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_get_RedValueCount(This,value)	\
    ( (This)->lpVtbl -> get_RedValueCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_put_RedValueCount(This,value)	\
    ( (This)->lpVtbl -> put_RedValueCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_get_GreenValueCount(This,value)	\
    ( (This)->lpVtbl -> get_GreenValueCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_put_GreenValueCount(This,value)	\
    ( (This)->lpVtbl -> put_GreenValueCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_get_BlueValueCount(This,value)	\
    ( (This)->lpVtbl -> get_BlueValueCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_put_BlueValueCount(This,value)	\
    ( (This)->lpVtbl -> put_BlueValueCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0412 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PosterizeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PosterizeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PosterizeEffect[] = L"Microsoft.Graphics.Canvas.Effects.PosterizeEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class PremultiplyEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0412 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0412_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0412_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("D29A9D1E-BD57-5F3E-9AE0-009C6AC5B06D")
                        IPremultiplyEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IPremultiplyEffect = __uuidof(IPremultiplyEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0413 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PremultiplyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PremultiplyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.PremultiplyEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class RgbToHueEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect[] = L"Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0413 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0413_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0413_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("7CAEADC6-9EB3-5895-B876-F485C9574847")
                        IRgbToHueEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OutputColorSpace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OutputColorSpace( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IRgbToHueEffect = __uuidof(IRgbToHueEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputColorSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputColorSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_get_OutputColorSpace(This,value)	\
    ( (This)->lpVtbl -> get_OutputColorSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_put_OutputColorSpace(This,value)	\
    ( (This)->lpVtbl -> put_OutputColorSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0414 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_RgbToHueEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_RgbToHueEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_RgbToHueEffect[] = L"Microsoft.Graphics.Canvas.Effects.RgbToHueEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class SaturationEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISaturationEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISaturationEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0414 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0414_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0414_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ISaturationEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("F85A5ED7-7212-57A6-B357-61038961C58D")
                        ISaturationEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Saturation( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Saturation( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ISaturationEffect = __uuidof(ISaturationEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Saturation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Saturation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_get_Saturation(This,value)	\
    ( (This)->lpVtbl -> get_Saturation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_put_Saturation(This,value)	\
    ( (This)->lpVtbl -> put_Saturation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0415 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SaturationEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SaturationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SaturationEffect[] = L"Microsoft.Graphics.Canvas.Effects.SaturationEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ScaleEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IScaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.IScaleEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0415 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0415_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0415_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IScaleEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("7522AE90-BEC2-512C-BCC0-4D6A97E3ED34")
                        IScaleEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Scale( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Scale( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CenterPoint( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CenterPoint( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Sharpness( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Sharpness( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IScaleEffect = __uuidof(IScaleEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Scale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CenterPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CenterPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sharpness )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sharpness )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_Scale(This,value)	\
    ( (This)->lpVtbl -> get_Scale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_Scale(This,value)	\
    ( (This)->lpVtbl -> put_Scale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_CenterPoint(This,value)	\
    ( (This)->lpVtbl -> get_CenterPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_CenterPoint(This,value)	\
    ( (This)->lpVtbl -> put_CenterPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_Sharpness(This,value)	\
    ( (This)->lpVtbl -> get_Sharpness(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_Sharpness(This,value)	\
    ( (This)->lpVtbl -> put_Sharpness(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0416 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ScaleEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ScaleEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ScaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.ScaleEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class SepiaEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISepiaEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISepiaEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0416 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0416_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0416_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ISepiaEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("F933471F-A7AF-5521-BE79-B0DA22976CFF")
                        ISepiaEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Intensity( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Intensity( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ISepiaEffect = __uuidof(ISepiaEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Intensity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Intensity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_get_Intensity(This,value)	\
    ( (This)->lpVtbl -> get_Intensity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_put_Intensity(This,value)	\
    ( (This)->lpVtbl -> put_Intensity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_put_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> put_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0417 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SepiaEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SepiaEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SepiaEffect[] = L"Microsoft.Graphics.Canvas.Effects.SepiaEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ShadowEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IShadowEffect[] = L"Microsoft.Graphics.Canvas.Effects.IShadowEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0417 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0417_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0417_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IShadowEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("3947C621-78DA-5489-9927-BE655F4576E2")
                        IShadowEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlurAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlurAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ShadowColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ShadowColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Optimization( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Optimization( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ShadowColorHdr( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ShadowColorHdr( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IShadowEffect = __uuidof(IShadowEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Optimization )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Optimization )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> get_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> put_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_ShadowColor(This,value)	\
    ( (This)->lpVtbl -> get_ShadowColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_ShadowColor(This,value)	\
    ( (This)->lpVtbl -> put_ShadowColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_Optimization(This,value)	\
    ( (This)->lpVtbl -> get_Optimization(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_Optimization(This,value)	\
    ( (This)->lpVtbl -> put_Optimization(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_ShadowColorHdr(This,value)	\
    ( (This)->lpVtbl -> get_ShadowColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_ShadowColorHdr(This,value)	\
    ( (This)->lpVtbl -> put_ShadowColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0418 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ShadowEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ShadowEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ShadowEffect[] = L"Microsoft.Graphics.Canvas.Effects.ShadowEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class SharpenEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISharpenEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISharpenEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0418 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0418_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0418_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ISharpenEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("7EFEF0A1-7578-5F62-8364-46145674EF7E")
                        ISharpenEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Amount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Amount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Threshold( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Threshold( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ISharpenEffect = __uuidof(ISharpenEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Threshold )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Threshold )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_get_Amount(This,value)	\
    ( (This)->lpVtbl -> get_Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_put_Amount(This,value)	\
    ( (This)->lpVtbl -> put_Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_get_Threshold(This,value)	\
    ( (This)->lpVtbl -> get_Threshold(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_put_Threshold(This,value)	\
    ( (This)->lpVtbl -> put_Threshold(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0419 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SharpenEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SharpenEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SharpenEffect[] = L"Microsoft.Graphics.Canvas.Effects.SharpenEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class SpotDiffuseEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0419 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0419_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0419_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("B3DCBE44-1DD7-5CB3-95E5-A48974CD12E8")
                        ISpotDiffuseEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightPosition( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector3 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightPosition( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector3 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightTarget( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector3 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightTarget( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector3 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Focus( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Focus( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LimitingConeAngle( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LimitingConeAngle( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DiffuseAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DiffuseAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapScale( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapScale( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColorHdr( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColorHdr( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ISpotDiffuseEffect = __uuidof(ISpotDiffuseEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector3 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightTarget )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector3 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightTarget )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focus )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Focus )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LimitingConeAngle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LimitingConeAngle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiffuseAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DiffuseAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LightPosition(This,value)	\
    ( (This)->lpVtbl -> get_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LightPosition(This,value)	\
    ( (This)->lpVtbl -> put_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LightTarget(This,value)	\
    ( (This)->lpVtbl -> get_LightTarget(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LightTarget(This,value)	\
    ( (This)->lpVtbl -> put_LightTarget(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_Focus(This,value)	\
    ( (This)->lpVtbl -> get_Focus(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_Focus(This,value)	\
    ( (This)->lpVtbl -> put_Focus(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LimitingConeAngle(This,value)	\
    ( (This)->lpVtbl -> get_LimitingConeAngle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LimitingConeAngle(This,value)	\
    ( (This)->lpVtbl -> put_LimitingConeAngle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_DiffuseAmount(This,value)	\
    ( (This)->lpVtbl -> get_DiffuseAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_DiffuseAmount(This,value)	\
    ( (This)->lpVtbl -> put_DiffuseAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LightColor(This,value)	\
    ( (This)->lpVtbl -> get_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LightColor(This,value)	\
    ( (This)->lpVtbl -> put_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LightColorHdr(This,value)	\
    ( (This)->lpVtbl -> get_LightColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LightColorHdr(This,value)	\
    ( (This)->lpVtbl -> put_LightColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0420 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class SpotSpecularEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0420 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0420_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0420_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("83AE4CD0-80AA-5783-8572-F15E5F85329E")
                        ISpotSpecularEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightPosition( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector3 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightPosition( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector3 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightTarget( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector3 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightTarget( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector3 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Focus( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Focus( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LimitingConeAngle( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LimitingConeAngle( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecularExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SpecularExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecularAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SpecularAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapScale( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapScale( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColorHdr( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColorHdr( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ISpotSpecularEffect = __uuidof(ISpotSpecularEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector3 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightTarget )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector3 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightTarget )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focus )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Focus )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LimitingConeAngle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LimitingConeAngle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecularExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecularExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecularAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecularAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LightPosition(This,value)	\
    ( (This)->lpVtbl -> get_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LightPosition(This,value)	\
    ( (This)->lpVtbl -> put_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LightTarget(This,value)	\
    ( (This)->lpVtbl -> get_LightTarget(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LightTarget(This,value)	\
    ( (This)->lpVtbl -> put_LightTarget(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_Focus(This,value)	\
    ( (This)->lpVtbl -> get_Focus(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_Focus(This,value)	\
    ( (This)->lpVtbl -> put_Focus(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LimitingConeAngle(This,value)	\
    ( (This)->lpVtbl -> get_LimitingConeAngle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LimitingConeAngle(This,value)	\
    ( (This)->lpVtbl -> put_LimitingConeAngle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_SpecularExponent(This,value)	\
    ( (This)->lpVtbl -> get_SpecularExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_SpecularExponent(This,value)	\
    ( (This)->lpVtbl -> put_SpecularExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_SpecularAmount(This,value)	\
    ( (This)->lpVtbl -> get_SpecularAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_SpecularAmount(This,value)	\
    ( (This)->lpVtbl -> put_SpecularAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LightColor(This,value)	\
    ( (This)->lpVtbl -> get_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LightColor(This,value)	\
    ( (This)->lpVtbl -> put_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LightColorHdr(This,value)	\
    ( (This)->lpVtbl -> get_LightColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LightColorHdr(This,value)	\
    ( (This)->lpVtbl -> put_LightColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0421 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class StraightenEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IStraightenEffect[] = L"Microsoft.Graphics.Canvas.Effects.IStraightenEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0421 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0421_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0421_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IStraightenEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("965FC262-2EBA-59E6-935F-2389CB5A305A")
                        IStraightenEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Angle( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Angle( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MaintainSize( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MaintainSize( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IStraightenEffect = __uuidof(IStraightenEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Angle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Angle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaintainSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaintainSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_get_Angle(This,value)	\
    ( (This)->lpVtbl -> get_Angle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_put_Angle(This,value)	\
    ( (This)->lpVtbl -> put_Angle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_get_MaintainSize(This,value)	\
    ( (This)->lpVtbl -> get_MaintainSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_put_MaintainSize(This,value)	\
    ( (This)->lpVtbl -> put_MaintainSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_get_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_put_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0422 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_StraightenEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_StraightenEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_StraightenEffect[] = L"Microsoft.Graphics.Canvas.Effects.StraightenEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class TableTransferEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITableTransferEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0422 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0422_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0422_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("BF0B63B6-FE77-5198-A2A1-3FB80C268B8F")
                        ITableTransferEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITableTransferEffect = __uuidof(ITableTransferEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_RedTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_RedTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_RedTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_RedTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_RedDisable(This,value)	\
    ( (This)->lpVtbl -> get_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_RedDisable(This,value)	\
    ( (This)->lpVtbl -> put_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_GreenTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_GreenTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_GreenTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_GreenTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> get_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> put_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_BlueTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_BlueTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_BlueTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_BlueTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> get_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> put_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_AlphaTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_AlphaTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_AlphaTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_AlphaTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> get_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> put_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0423 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TableTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.TableTransferEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class TableTransfer3DEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0423 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0423_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0423_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("EF09C6E0-9437-53F7-B7B4-B53C79A0BC37")
                        ITableTransfer3DEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Table( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D **value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Table( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITableTransfer3DEffect = __uuidof(ITableTransfer3DEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Table )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Table )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_get_Table(This,value)	\
    ( (This)->lpVtbl -> get_Table(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_put_Table(This,value)	\
    ( (This)->lpVtbl -> put_Table(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_put_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> put_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0424 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransfer3DEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransfer3DEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TableTransfer3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class TemperatureAndTintEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0424 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0424_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0424_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("8AE43E02-2619-5D78-8980-4ED569549BD8")
                        ITemperatureAndTintEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Temperature( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Temperature( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Tint( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Tint( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITemperatureAndTintEffect = __uuidof(ITemperatureAndTintEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Temperature )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Temperature )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_get_Temperature(This,value)	\
    ( (This)->lpVtbl -> get_Temperature(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_put_Temperature(This,value)	\
    ( (This)->lpVtbl -> put_Temperature(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_get_Tint(This,value)	\
    ( (This)->lpVtbl -> get_Tint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_put_Tint(This,value)	\
    ( (This)->lpVtbl -> put_Tint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0425 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TemperatureAndTintEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TemperatureAndTintEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TemperatureAndTintEffect[] = L"Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class TileEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITileEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITileEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0425 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0425_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0425_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITileEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("78A809CB-1154-5AD6-A880-E3A175772815")
                        ITileEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceRectangle( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceRectangle( 
                                /* [in] */ ABI::Windows::Foundation::Rect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITileEffect = __uuidof(ITileEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_get_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> get_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_put_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> put_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0426 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TileEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TileEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TileEffect[] = L"Microsoft.Graphics.Canvas.Effects.TileEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class TintEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITintEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITintEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0426 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0426_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0426_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITintEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("729A21EA-C61E-5308-9EAE-D638AA1F5B8C")
                        ITintEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorHdr( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorHdr( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITintEffect = __uuidof(ITintEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_get_Color(This,value)	\
    ( (This)->lpVtbl -> get_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_put_Color(This,value)	\
    ( (This)->lpVtbl -> put_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_get_ColorHdr(This,value)	\
    ( (This)->lpVtbl -> get_ColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_put_ColorHdr(This,value)	\
    ( (This)->lpVtbl -> put_ColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0427 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITintEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.ITintEffectStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0427 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0427_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0427_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITintEffectStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("65E31771-4BAF-5C8C-93F4-3B874E29F68D")
                        ITintEffectStatics : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsSupported( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITintEffectStatics = __uuidof(ITintEffectStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSupported )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This,
            /* [out][retval] */ boolean *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_get_IsSupported(This,value)	\
    ( (This)->lpVtbl -> get_IsSupported(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0428 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TintEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TintEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TintEffect[] = L"Microsoft.Graphics.Canvas.Effects.TintEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class Transform2DEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITransform2DEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0428 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0428_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0428_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("4467D118-33E7-5B1A-87C2-0F1F0497353D")
                        ITransform2DEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransformMatrix( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Matrix3x2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TransformMatrix( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix3x2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Sharpness( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Sharpness( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITransform2DEffect = __uuidof(ITransform2DEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransformMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TransformMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sharpness )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sharpness )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_TransformMatrix(This,value)	\
    ( (This)->lpVtbl -> get_TransformMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_TransformMatrix(This,value)	\
    ( (This)->lpVtbl -> put_TransformMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_Sharpness(This,value)	\
    ( (This)->lpVtbl -> get_Sharpness(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_Sharpness(This,value)	\
    ( (This)->lpVtbl -> put_Sharpness(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0429 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform2DEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform2DEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_Transform2DEffect[] = L"Microsoft.Graphics.Canvas.Effects.Transform2DEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class Transform3DEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITransform3DEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0429 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0429_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0429_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("3025ED7F-8F25-5E0B-80C9-56BBDD3E8A10")
                        ITransform3DEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransformMatrix( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Matrix4x4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TransformMatrix( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Matrix4x4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITransform3DEffect = __uuidof(ITransform3DEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransformMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TransformMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_get_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_put_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_get_TransformMatrix(This,value)	\
    ( (This)->lpVtbl -> get_TransformMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_put_TransformMatrix(This,value)	\
    ( (This)->lpVtbl -> put_TransformMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0430 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform3DEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform3DEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_Transform3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.Transform3DEffect";
#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise
    {
        TurbulenceEffectNoise_FractalSum	= 0,
        TurbulenceEffectNoise_Turbulence	= 1
    } ;
#endif /* end if !defined(__cplusplus) */

#if !defined(__cplusplus)

typedef enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class TurbulenceEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0430 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    /* [v1_enum] */ 
                    MIDL_ENUM TurbulenceEffectNoise
                        {
                            FractalSum	= 0,
                            Turbulence	= 1
                        } ;

                    const MIDL_ENUM TurbulenceEffectNoise TurbulenceEffectNoise_FractalSum = TurbulenceEffectNoise::FractalSum;
                    const MIDL_ENUM TurbulenceEffectNoise TurbulenceEffectNoise_Turbulence = TurbulenceEffectNoise::Turbulence;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef MIDL_ENUM TurbulenceEffectNoise TurbulenceEffectNoise;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0430_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0430_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("1CB1B33D-20E9-564B-856E-37E9FA1D0016")
                        ITurbulenceEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Offset( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Offset( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Size( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Frequency( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Frequency( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Octaves( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Octaves( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Seed( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Seed( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Noise( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Noise( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Tileable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Tileable( 
                                /* [in] */ boolean value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITurbulenceEffect = __uuidof(ITurbulenceEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Offset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Offset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Frequency )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Frequency )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Octaves )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Octaves )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Seed )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Seed )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Noise )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Noise )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tileable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tileable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ boolean value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Offset(This,value)	\
    ( (This)->lpVtbl -> get_Offset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Offset(This,value)	\
    ( (This)->lpVtbl -> put_Offset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Size(This,value)	\
    ( (This)->lpVtbl -> get_Size(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Size(This,value)	\
    ( (This)->lpVtbl -> put_Size(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Frequency(This,value)	\
    ( (This)->lpVtbl -> get_Frequency(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Frequency(This,value)	\
    ( (This)->lpVtbl -> put_Frequency(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Octaves(This,value)	\
    ( (This)->lpVtbl -> get_Octaves(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Octaves(This,value)	\
    ( (This)->lpVtbl -> put_Octaves(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Seed(This,value)	\
    ( (This)->lpVtbl -> get_Seed(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Seed(This,value)	\
    ( (This)->lpVtbl -> put_Seed(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Noise(This,value)	\
    ( (This)->lpVtbl -> get_Noise(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Noise(This,value)	\
    ( (This)->lpVtbl -> put_Noise(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Tileable(This,value)	\
    ( (This)->lpVtbl -> get_Tileable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Tileable(This,value)	\
    ( (This)->lpVtbl -> put_Tileable(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0431 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TurbulenceEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TurbulenceEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TurbulenceEffect[] = L"Microsoft.Graphics.Canvas.Effects.TurbulenceEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class UnPremultiplyEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IUnPremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0431 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0431_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0431_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("73098BB4-DCF1-5403-AF44-3344D2982D40")
                        IUnPremultiplyEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IUnPremultiplyEffect = __uuidof(IUnPremultiplyEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0432 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class VignetteEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IVignetteEffect[] = L"Microsoft.Graphics.Canvas.Effects.IVignetteEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0432 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0432_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0432_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IVignetteEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("574D0F9F-EEC7-5989-AC53-135868CF5E0C")
                        IVignetteEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Amount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Amount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Curve( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Curve( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorHdr( 
                                /* [out][retval] */ ABI::Windows::Foundation::Numerics::Vector4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorHdr( 
                                /* [in] */ ABI::Windows::Foundation::Numerics::Vector4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Windows::Graphics::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IVignetteEffect = __uuidof(IVignetteEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Curve )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Curve )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorHdr )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CNumerics_CVector4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_get_Color(This,value)	\
    ( (This)->lpVtbl -> get_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_put_Color(This,value)	\
    ( (This)->lpVtbl -> put_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_get_Amount(This,value)	\
    ( (This)->lpVtbl -> get_Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_put_Amount(This,value)	\
    ( (This)->lpVtbl -> put_Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_get_Curve(This,value)	\
    ( (This)->lpVtbl -> get_Curve(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_put_Curve(This,value)	\
    ( (This)->lpVtbl -> put_Curve(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_get_ColorHdr(This,value)	\
    ( (This)->lpVtbl -> get_ColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_put_ColorHdr(This,value)	\
    ( (This)->lpVtbl -> put_ColorHdr(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0433 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_VignetteEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_VignetteEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_VignetteEffect[] = L"Microsoft.Graphics.Canvas.Effects.VignetteEffect";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0433 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0433_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0433_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  HSTRING_UserSize(     unsigned long *, unsigned long            , HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserMarshal(  unsigned long *, unsigned char *, HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserUnmarshal(unsigned long *, unsigned char *, HSTRING * ); 
void                      __RPC_USER  HSTRING_UserFree(     unsigned long *, HSTRING * ); 

unsigned long             __RPC_USER  HSTRING_UserSize64(     unsigned long *, unsigned long            , HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserMarshal64(  unsigned long *, unsigned char *, HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserUnmarshal64(unsigned long *, unsigned char *, HSTRING * ); 
void                      __RPC_USER  HSTRING_UserFree64(     unsigned long *, HSTRING * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


